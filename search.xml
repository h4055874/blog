<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django中mysql的联合唯一索引</title>
    <url>/2020/05/19/Django/Django%E4%B8%ADmysql%E7%9A%84%E8%81%94%E5%90%88%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h4 id="在Django中设置mysql的联合唯一索引"><a href="#在Django中设置mysql的联合唯一索引" class="headerlink" title="在Django中设置mysql的联合唯一索引"></a>在Django中设置mysql的联合唯一索引</h4><a id="more"></a>

<h4 id="联合唯一索引的意义："><a href="#联合唯一索引的意义：" class="headerlink" title="联合唯一索引的意义："></a>联合唯一索引的意义：</h4><p>　　<strong>节省空间、提高效率、建立联合索引的同时、还会给他们之间的组合建立索引</strong></p>
<h4 id="联合唯一索引的作用："><a href="#联合唯一索引的作用：" class="headerlink" title="联合唯一索引的作用："></a>联合唯一索引的作用：</h4><p>　　<strong>联合唯一索引的字段，相同的数据，同时只能存在一次，保证数据的唯一性</strong></p>
<h4 id="在Django中的使用方法："><a href="#在Django中的使用方法：" class="headerlink" title="在Django中的使用方法："></a>在Django中的使用方法：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Temperature</span><span class="params">(Base)</span>:</span></span><br><span class="line">    order_id = models.IntegerField()  <span class="comment"># 运单号</span></span><br><span class="line">    tempera = models.CharField(max_length=<span class="number">200</span>)  <span class="comment"># 记录温度</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'temperature'</span></span><br><span class="line">         <span class="comment"># 联合索引   其中order_id和create_time不能同时重复存在</span></span><br><span class="line">        unique_together = (</span><br><span class="line">            (<span class="string">'order_id'</span>, <span class="string">'create_time'</span>)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 8安装mysql8.0</title>
    <url>/2020/05/18/CentOS/CentOS%208%E5%AE%89%E8%A3%85mysql8.0/</url>
    <content><![CDATA[<h3 id="CentOS-8-安装MySQL-8-0"><a href="#CentOS-8-安装MySQL-8-0" class="headerlink" title="CentOS 8 安装MySQL 8.0"></a>CentOS 8 安装MySQL 8.0</h3><a id="more"></a>

<h4 id="1、使用最新的包管理器安装MySQL"><a href="#1、使用最新的包管理器安装MySQL" class="headerlink" title="1、使用最新的包管理器安装MySQL"></a>1、使用最新的包管理器安装MySQL</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dnf install @mysql</span><br></pre></td></tr></table></figure>

<h4 id="2、开启启动"><a href="#2、开启启动" class="headerlink" title="2、开启启动"></a>2、开启启动</h4><p><strong>安装完成后，运行以下命令来启动MySQL服务并使它在启动时自动启动：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> --now mysqld</span><br></pre></td></tr></table></figure>

<h4 id="3、要检查MySQL服务器是否正在运行"><a href="#3、要检查MySQL服务器是否正在运行" class="headerlink" title="3、要检查MySQL服务器是否正在运行"></a>3、要检查MySQL服务器是否正在运行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status mysqld</span><br></pre></td></tr></table></figure>

<h4 id="4、添加密码及安全设置"><a href="#4、添加密码及安全设置" class="headerlink" title="4、添加密码及安全设置"></a>4、添加密码及安全设置</h4><p><strong>运行mysql_secure_installation脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：**</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo mysql_secure_installation</span></span><br></pre></td></tr></table></figure>

<p>步骤如下：</p>
<p>1、要求你配置VALIDATE PASSWORD component（验证密码组件）： 输入y ，回车进入该配置</p>
<ul>
<li>选择密码验证策略等级， 我这里选择0 （low），回车</li>
<li>输入新密码两次</li>
<li>确认是否继续使用提供的密码？输入y ，回车</li>
<li>移除匿名用户？ 输入y ，回车</li>
<li>不允许root远程登陆？ 我这里需要远程登陆，所以输入n ，回车</li>
</ul>
<p>2、移除test数据库？ 输入y ，回车</p>
<p>3、重新载入权限表？ 输入y ，回车</p>
<h4 id="5、配置远程登陆"><a href="#5、配置远程登陆" class="headerlink" title="5、配置远程登陆"></a>5、配置远程登陆</h4><p>如果需要设置root账户远程登陆，上一步骤中，<code>不允许root远程登陆？</code>这一步需要设为n。<br>接下来本机登录MySQL，将root用户的host字段设为’%’，意为接受root所有IP地址的登录请求：<br>本机登录MySQL:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p&lt;上面步骤中设置的密码&gt;</span><br></pre></td></tr></table></figure>

<p><strong>接着继续执行mysql语句，将将root用户的host字段设为’%’：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user <span class="built_in">set</span> host=<span class="string">'%'</span> <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>设置完成后输入exit退出mysql，回到终端shell界面，接着开启系统防火墙的3306端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --add-port=3306/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h4 id="6、关闭MySQL主机查询dns"><a href="#6、关闭MySQL主机查询dns" class="headerlink" title="6、关闭MySQL主机查询dns"></a>6、关闭MySQL主机查询dns</h4><p>MySQL会反向解析远程连接地址的dns记录，如果MySQL主机无法连接外网，则dns可能无法解析成功，</p>
<p>导致第一次连接MySQL速度很慢，所以在配置中可以关闭该功能。</p>
<p>打开<code>/etc/my.cnf</code>文件，添加以下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure>

<h4 id="7、重启服务"><a href="#7、重启服务" class="headerlink" title="7、重启服务"></a>7、重启服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<p><strong>本机测试安装后，MySQL8.0默认已经是utf8mb4字符集，所以字符集不再修改</strong></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟环境命令</title>
    <url>/2020/05/17/Spider/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="1、安装虚拟环境"><a href="#1、安装虚拟环境" class="headerlink" title="1、安装虚拟环境"></a>1、安装虚拟环境</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令：pip install virtualenvwrapper-win -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line">    https://pypi.tuna.tsinghua.edu.cn/simple网址是清华源网址，-i 加清华源网址会提高下载速度</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2、创建虚拟环境"><a href="#2、创建虚拟环境" class="headerlink" title="2、创建虚拟环境"></a>2、创建虚拟环境</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令：mkvirtualenv name</span></span><br><span class="line">	-----name是虚拟环境的名字</span><br><span class="line">	例如创建一个a1906虚拟环境----&gt;命令：# mkvirtualenv a1906</span><br></pre></td></tr></table></figure>

<h2 id="3、激活虚拟环境"><a href="#3、激活虚拟环境" class="headerlink" title="3、激活虚拟环境"></a>3、激活虚拟环境</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令：workon name</span></span><br><span class="line">	当我门需要使用a1906虚拟环境时，可以使用命令来激活---&gt;命令：# workon a1906</span><br><span class="line">    如果我们已经在使用一个虚拟环境，需要切换到另一个虚拟环境时，也可以直接使用此命令来切换</span><br></pre></td></tr></table></figure>

<h2 id="4、安装模块"><a href="#4、安装模块" class="headerlink" title="4、安装模块"></a>4、安装模块</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令：pip install 模块名</span></span><br><span class="line">	当我们需要在虚拟环境中安装requests模块时，可以使用---&gt;命令：# pip install requests</span><br><span class="line">还可以通过清华源来安装---&gt;命令：# pip install requests -i 清华源网址(https://pypi.tuna.tsinghua.edu.cn/simple)</span><br></pre></td></tr></table></figure>

<h2 id="5、删除已安装的模块"><a href="#5、删除已安装的模块" class="headerlink" title="5、删除已安装的模块"></a>5、删除已安装的模块</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令：pip uninstall 模块名</span></span><br><span class="line">	当我们需要删除requests模块时，可以使用---&gt;命令：# pip uninstall requests</span><br></pre></td></tr></table></figure>

<h2 id="6、查看已安装的模块"><a href="#6、查看已安装的模块" class="headerlink" title="6、查看已安装的模块"></a>6、查看已安装的模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令：pip list</span></span><br><span class="line">	此命令可以查看所有已安装过的模块名</span><br></pre></td></tr></table></figure>

<h2 id="7、退出虚拟环境"><a href="#7、退出虚拟环境" class="headerlink" title="7、退出虚拟环境"></a>7、退出虚拟环境</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令：deactivate</span></span><br><span class="line">	此命令可以退出当前正在使用的虚拟环境</span><br></pre></td></tr></table></figure>

<h2 id="8、生成requirements-txt文件"><a href="#8、生成requirements-txt文件" class="headerlink" title="8、生成requirements.txt文件"></a>8、生成requirements.txt文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令：pip freeze &gt; requirements.txt</span></span><br><span class="line">	此命令可以将环境中所有已安装的模块和包导入到生成的requirements.txt文件中</span><br></pre></td></tr></table></figure>

<h2 id="9、批量安装模块"><a href="#9、批量安装模块" class="headerlink" title="9、批量安装模块"></a>9、批量安装模块</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令：pip install -r requirements.txt文件所在目录</span></span><br><span class="line">	-r 后面跟的是路径，我们也可以切换到requirements.txt文件的所在目录进入虚拟环境进行直接安装，使用---&gt;命令：# pip install -r requirements.txt</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>虚拟环境命令</tag>
      </tags>
  </entry>
  <entry>
    <title>网页请求</title>
    <url>/2020/05/17/Spider/%E7%BD%91%E9%A1%B5%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h2 id="1、请求过程"><a href="#1、请求过程" class="headerlink" title="1、请求过程"></a>1、请求过程</h2><a id="more"></a>

<h2 id="1、1-URL介绍"><a href="#1、1-URL介绍" class="headerlink" title="1、1  URL介绍"></a>1、1  URL介绍</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">URL作用：用于定位服务器资源</span><br><span class="line">    <span class="comment"># 结构：</span></span><br><span class="line">        <span class="number">1</span>)协议：Protocol</span><br><span class="line">        <span class="number">2</span>)域名：domain</span><br><span class="line">        <span class="number">3</span>)端口：port</span><br></pre></td></tr></table></figure>

<h2 id="1、2-HTTP请求过程"><a href="#1、2-HTTP请求过程" class="headerlink" title="1、2  HTTP请求过程"></a>1、2  HTTP请求过程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求过程：</span></span><br><span class="line">	客户端通常指web浏览器或APP向服务器发起请求，服务器接收到请求后进行处理，并向客户端发起响应</span><br></pre></td></tr></table></figure>

<h2 id="1、3-请求四部分"><a href="#1、3-请求四部分" class="headerlink" title="1、3  请求四部分"></a>1、3  请求四部分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由客户端向服务器发出的，可以分为四部分内容：</span></span><br><span class="line">        <span class="number">1</span>)请求方法(Request Method)</span><br><span class="line">        <span class="number">2</span>)请求网址(Request URL)</span><br><span class="line">        <span class="number">3</span>)请求头(Request Headers)</span><br><span class="line">        <span class="number">4</span>)请求体(Request Body)</span><br></pre></td></tr></table></figure>

<h2 id="1、4-请求的八种方法"><a href="#1、4-请求的八种方法" class="headerlink" title="1、4  请求的八种方法"></a>1、4  请求的八种方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求常见的八种方法：</span></span><br><span class="line">        <span class="number">1</span>)GET：请求页面,并返回页面内容</span><br><span class="line">        <span class="number">2</span>)POST：用于提交表单数据或上传文件，数据包含在请求体中</span><br><span class="line">        <span class="number">3</span>)PUT：从客户端向服务器传送的数据取代指定文档中的内容，就是所谓的更新指定内容</span><br><span class="line">        <span class="number">4</span>)DELETE：请求服务器删除指定的页面</span><br><span class="line">        <span class="number">5</span>)HEAD：累死与GET请求，只不过返回的响应中没有具体的内容，用于获取报头</span><br><span class="line">        <span class="number">6</span>)CONNECT：把服务器当作跳板，让服务器代替客户端访问其它网页</span><br><span class="line">        <span class="number">7</span>)OPTIONS：允许客户端查看服务器的性能</span><br><span class="line">        <span class="number">8</span>)TRACE：回显服务器收到的请求，主要用于测试或诊断</span><br><span class="line"><span class="comment"># GET和POST区别：(面试重点、需重点掌握)</span></span><br><span class="line">        <span class="number">1</span>)GET请求中的参数会包含在URL里面，数据可以在URL中看到，而POST请求的URL不会包含这些数据，POST的数据都是通过表单形式传输的，包含在请求体中</span><br><span class="line">        <span class="number">2</span>)GET请求提交的数据最多只有<span class="number">1024</span>字节，而POST方式没有限制</span><br><span class="line">        <span class="number">3</span>)post请求相对安全</span><br></pre></td></tr></table></figure>

<h2 id="1、5-请求网址"><a href="#1、5-请求网址" class="headerlink" title="1、5  请求网址"></a>1、5  请求网址</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求网址</span></span><br><span class="line">	<span class="number">1</span>)请求的网址，即同意资源定位符URL，它是可以唯一确定我们想请求的资源</span><br></pre></td></tr></table></figure>

<h2 id="1、6-请求头"><a href="#1、6-请求头" class="headerlink" title="1、6  请求头"></a>1、6  请求头</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求头，用来说明服务器要使用的附加信息，重点掌握：Accept、Cookie、Referer、User-Agent</span></span><br><span class="line">        <span class="number">1</span>)Accept：请求报头域，用于指定客户端可接受哪些类型的信息</span><br><span class="line">        <span class="number">2</span>)Cookie：也常用复数形式Cookies，这是网站为了辨别用户进行会话跟踪而存储在用户本地的数据。它的主要功能是维持当前访问会话。</span><br><span class="line">        <span class="number">3</span>)Referer：此内容用来表示这个请求是从哪个页面发过来的，服务器可以拿到这一信息并做相应的处理，如做来源统计、防盗链处理等</span><br><span class="line">        <span class="number">4</span>)User-Agent：简称UA，它是一个特殊的字符串头，可以使服务器识别客户使用的操作系统及版本，浏览器及版本等信息。在做爬虫时附加上此信息，</span><br><span class="line">        			可以伪装为浏览器，如果不加，很可能会被识别出为爬虫</span><br><span class="line">        <span class="number">5</span>)x-requested-<span class="keyword">with</span>：XMLHtpRequest	<span class="comment"># 代表ajax请求</span></span><br><span class="line">        <span class="number">6</span>)Accept-Encoding：指定客户端可接受的内容编码</span><br><span class="line">        <span class="number">7</span>)Content-Type：也叫互联网媒体类型(Intemet Media Type) 或者MIME类型，在HTTP协议消息头中，它用来表示具体请求中的媒体类型信息。</span><br><span class="line">        			例如:text/html代表HTML格式，image/gif代表GIF图片，application/json代表JSON类型</span><br></pre></td></tr></table></figure>

<h2 id="1、7-请求体"><a href="#1、7-请求体" class="headerlink" title="1、7  请求体"></a>1、7  请求体</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求体</span></span><br><span class="line">	请求体一般承载的内容时POST请求中的表单数据，而对于GET请求，请求体则为空</span><br></pre></td></tr></table></figure>

<h2 id="1、8-响应"><a href="#1、8-响应" class="headerlink" title="1、8  响应"></a>1、8  响应</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 响应，是由服务端返回给客户端的，可以分为三部分：响应状态码(response status code)，响应头(response headers)，响应体(response body)</span></span><br></pre></td></tr></table></figure>

<h2 id="1、8、1-响应状态码"><a href="#1、8、1-响应状态码" class="headerlink" title="1、8、1  响应状态码"></a>1、8、1  响应状态码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 响应状态码：用于哦按段请求后的响应状态，如200代表请求成功，404代表页面找不到，500代表服务器错误</span></span><br><span class="line"><span class="comment"># 常见的状态码：</span></span><br><span class="line">	<span class="number">200</span>系列：</span><br><span class="line">    	<span class="number">200</span> 成功	服务器已成功处理了请求	<span class="comment"># 重点</span></span><br><span class="line">        </span><br><span class="line">        <span class="number">300</span>系列：</span><br><span class="line">            <span class="number">301</span> 永久移动	请求的网页已永久移动到新位置，即永久重定向	<span class="comment"># 重点</span></span><br><span class="line">            <span class="number">302</span>	临时移动	请求的网页暂时跳转到其它页面，即暂时重定向	<span class="comment"># 重点</span></span><br><span class="line">        </span><br><span class="line">        <span class="number">400</span>系列：</span><br><span class="line">            <span class="number">400</span>	错误请求	服务器无法解析该请求	<span class="comment"># 重点</span></span><br><span class="line">            <span class="number">401</span>	未授权		请求没有进行身份验证或验证未通过</span><br><span class="line">            <span class="number">403</span>	禁止访问	服务器拒绝此请求	<span class="comment"># 重点</span></span><br><span class="line">            <span class="number">404</span>	未找到		服务器找不到请求的网页</span><br><span class="line">            </span><br><span class="line">        <span class="number">500</span>系列：</span><br><span class="line">            <span class="number">500</span>	服务器内部错误		服务器遇到错误，无法完成请求	<span class="comment"># 重点</span></span><br><span class="line">            <span class="number">501</span>	未实现		服务器不具备完成请求的功能</span><br><span class="line">            <span class="number">502</span>	错误网关	服务器作为网关或代理，从上游服务器收到无效响应</span><br><span class="line">            <span class="number">504</span>	网关超时	服务器作为网关或代理，但是没有及时从上游服务器收到请求</span><br><span class="line">            <span class="number">505</span>	HTTP版本不支持	服务器不支持请求中所用的HTTP协议版本</span><br><span class="line"></span><br><span class="line"><span class="comment">### (注意：状态码不能完全代表响应状态，部分网站的状态码是自定义的，一切以响应的数据为准)</span></span><br></pre></td></tr></table></figure>

<h2 id="1、8、2-响应头"><a href="#1、8、2-响应头" class="headerlink" title="1、8、2  响应头"></a>1、8、2  响应头</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 响应头：</span></span><br><span class="line">    响应头包含了服务器对请求的应答信息</span><br><span class="line">    Date：表示响应产生的时间</span><br><span class="line">    Content-Encoding：指定响应内容的编码</span><br><span class="line">    Server：包含服务器的信息，比如名称、版本号等</span><br><span class="line">    Content-Type：文档类型，指定返回的数据类型是什么，如text/html代表返回HTML文档，application/x-javascriot则表达返回JavaScript文件，</span><br><span class="line">    			image/jpeg则代表返回图片</span><br><span class="line">    Set-Cookie：设置Cookies，响应头中的Set-Cookie告诉浏览器需要将此内容放在Cookie中，下次请求携带Cookie请求</span><br><span class="line">    Expires：指定响应的过期时间，可以使代理服务器或浏览器将加载的内容更新到缓存中。如果再次访问时，就可以直接从缓存中加载，降低服务器负载，</span><br><span class="line">    		缩短加载时间</span><br></pre></td></tr></table></figure>

<h2 id="1、8、3-响应体"><a href="#1、8、3-响应体" class="headerlink" title="1、8、3  响应体"></a>1、8、3  响应体</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  响应体</span></span><br><span class="line"><span class="comment"># 最重要的当属响应体的内容了，响应的正文数据都在响应体中。</span></span><br><span class="line">	比如请求网页时，他的响应体就是网页的HTML代码，请求一张图片时，他的相应体就是图片的二进制数据。我们做爬虫请求网页后，要解析的内容就是响应体</span><br></pre></td></tr></table></figure>

<h2 id="1、9-网页基础"><a href="#1、9-网页基础" class="headerlink" title="1、9  网页基础"></a>1、9  网页基础</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网页的组成</span></span><br><span class="line">网页可以分为三部分：HTML、CSS、JavaScript</span><br><span class="line">        <span class="number">1</span>)HTML：全称：Hyper Text Markup Language、即超文本标记语言</span><br><span class="line">        <span class="comment"># 定义了网页的骨架</span></span><br><span class="line">        <span class="number">2</span>)CSS：全称：Cascading Style Sheets，即层叠样式表</span><br><span class="line">        <span class="comment"># 定义了网页的样式</span></span><br><span class="line">        <span class="number">3</span>)JavaScript：简称JS，是一种脚本语言</span><br><span class="line">        <span class="comment"># 定义了网页与用户的交互行为，如下载进度条，提示框，轮播图</span></span><br></pre></td></tr></table></figure>

<h2 id="2、第一次请求"><a href="#2、第一次请求" class="headerlink" title="2、第一次请求"></a>2、第一次请求</h2><h2 id="2、1-爬虫的工作流"><a href="#2、1-爬虫的工作流" class="headerlink" title="2、1  爬虫的工作流"></a>2、1  爬虫的工作流</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">确定URL，想服务器发送请求并获得响应：requests、urllib、aiohttp</span><br><span class="line">在响应中提取目标数据，即数据解析：xpath、bs4、正则、PyQuery</span><br><span class="line">数据持久化：文件，关系型数据库，非关系型数据库</span><br></pre></td></tr></table></figure>

<h2 id="2、2-第一个爬虫"><a href="#2、2-第一个爬虫" class="headerlink" title="2、2  第一个爬虫"></a>2、2  第一个爬虫</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求：爬取报读首页，并写入文件中，最后用浏览器打开文件查看效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定url，向服务器发送请求</span></span><br><span class="line">url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line">res = requests.get(url=rul)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作响应数据，获取目标数据，根据网页编码模式进行编码</span></span><br><span class="line">res.encoding = <span class="string">'utf-8'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将目标数据持久化到本地：写入文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'baidu.html'</span>,<span class="string">'w'</span>,encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res.text)	<span class="comment"># res.text	代表将获取的文本</span></span><br></pre></td></tr></table></figure>

<h2 id="2、3-requests模块基本使用"><a href="#2、3-requests模块基本使用" class="headerlink" title="2、3  requests模块基本使用"></a>2、3  requests模块基本使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装requests模块</span></span><br><span class="line">pip install requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># requests的请求方式</span></span><br><span class="line">	<span class="number">1</span>、get请求：</span><br><span class="line">                <span class="number">1</span>)不携带参数的get请求</span><br><span class="line">                <span class="number">2</span>)不携带参数的get请求	+  headers</span><br><span class="line">                <span class="number">3</span>)携带参数的get请求  +  headers</span><br><span class="line">            </span><br><span class="line">          <span class="number">2</span>、post请求：构建参数的post请求</span><br><span class="line">          <span class="number">3</span>、响应数据的获取与属性</span><br><span class="line">                <span class="number">3.1</span>)响应数据的获取：</span><br><span class="line">                        <span class="number">3.11</span>)res.text：文本数据</span><br><span class="line">                        <span class="number">3.12</span>)res.json()：Json数据</span><br><span class="line">                        <span class="number">3.13</span>)res.content：流</span><br><span class="line">                <span class="number">3.2</span>)响应的其它属性：</span><br><span class="line">                	<span class="number">3.21</span>)res.status_code：获取响应状态码</span><br><span class="line">                        <span class="number">3.22</span>)res.headers：响应头</span><br><span class="line">                        <span class="number">3.23</span>)res.cookie：cookie信息</span><br><span class="line">                        <span class="number">3.24</span>)res.history：响应历史</span><br></pre></td></tr></table></figure>

<h2 id="2、3、1-requests模块的get请求"><a href="#2、3、1-requests模块的get请求" class="headerlink" title="2、3、1  requests模块的get请求"></a>2、3、1  requests模块的get请求</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不携带参数的get请求：爬取搜狗主页</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'https://www.sogou.com/'</span></span><br><span class="line">res = requests.get(url=url)</span><br><span class="line">res.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'sogou.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res.text)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不携带参数的get请求 + readers：爬取知乎的发现页</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">res = requests.get(url = url,headers = headers)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'zhihu.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res.text)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 携带参数的get请求 + headers：知乎的发现栏中搜索Python</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">     <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">url =  <span class="string">'https://www.zhihu.com/search?'</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">'type'</span> : <span class="string">'content'</span>,</span><br><span class="line">    <span class="string">'q'</span> : <span class="string">'python'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url = url , headers = headers , params = params)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'zhihu.html'</span> , <span class="string">'w'</span> , encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.wirte(res.text)</span><br></pre></td></tr></table></figure>

<h2 id="2、3、2-requests模块的post请求"><a href="#2、3、2-requests模块的post请求" class="headerlink" title="2、3、2  requests模块的post请求"></a>2、3、2  requests模块的post请求</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># requests的post请求：以post方式请求：百度翻译时返回的请求信息</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'https://fanyi.baidu.com/sug'</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'kw'</span> : <span class="string">'girlgriend'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url = url , headers = headers , data = data)</span><br><span class="line">print(josn.loads(res.text))</span><br></pre></td></tr></table></figure>

<h2 id="3、josn形式与流形式的响应数据示例"><a href="#3、josn形式与流形式的响应数据示例" class="headerlink" title="3、josn形式与流形式的响应数据示例"></a>3、josn形式与流形式的响应数据示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># json形式响应数据示例：bilibili的Python视频教程，目录列表</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">     <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'https://api.bilibili.com/x/web-interface/view?aid=14184325&amp;cid=23153678'</span></span><br><span class="line">res = requests.get(url = url , headers = headers)</span><br><span class="line">print(res)</span><br><span class="line">print(res.status_code)</span><br><span class="line">print(res.headers)</span><br><span class="line">print(<span class="string">'----------------------------------------------------'</span>)</span><br><span class="line">print(res.json())</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 流形式响应数据示例：站长素材的简历模板</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">     <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'http://fjdx.sc.chinaz.net/Files/DownLoad/jianli/201907/jianli10810.rar'</span></span><br><span class="line">res = requests.get(url = url , headers = headers)</span><br><span class="line">print(res.content)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'jianli.rar'</span> , <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res.content)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Spider</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫的介绍</title>
    <url>/2020/05/17/Spider/%E7%88%AC%E8%99%AB%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="1、爬虫的概念："><a href="#1、爬虫的概念：" class="headerlink" title="1、爬虫的概念："></a>1、爬虫的概念：</h2><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="comment"># 爬虫又称网页蜘蛛和网络机器人</span></span><br><span class="line"><span class="number">2</span>、<span class="comment"># 爬虫是模拟人操作客户端(浏览器，APP)，向服务器发起请求，抓取数据的自动化程序或脚本</span></span><br><span class="line">  <span class="comment"># 说明：</span></span><br><span class="line">    <span class="number">1</span>)模拟：用爬虫程序伪装出人的行为，避免被服务器识别为爬虫程序或脚本</span><br><span class="line">    <span class="number">2</span>)客户端：浏览器，APP都可以实现人与服务器之间交互的行为，应用客户端从服务器获取数据</span><br><span class="line">    <span class="number">3</span>)自动化：数量较小时可以人为的从服务端获取数据，但公司需求高达百万甚至千万条以上时，就需要程序自动从服务端获取数据</span><br></pre></td></tr></table></figure>

<h2 id="2、爬虫的语言："><a href="#2、爬虫的语言：" class="headerlink" title="2、爬虫的语言："></a>2、爬虫的语言：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="comment"># 爬虫的语言有：PHP、C/C++、Java、Python</span></span><br><span class="line"><span class="number">2</span>、<span class="comment"># 各语言之间的对比：</span></span><br><span class="line">	<span class="number">1</span>)PHP：并发能力差，对多线程和多进程支持不好，数据量较大时爬虫效率极低</span><br><span class="line">    <span class="number">2</span>)C/C++：语言效率高，但学习成本高，对程序员的计数能力要求较高，目前还处于研究阶段，需求量很少</span><br><span class="line">    <span class="number">3</span>)Java：python爬虫的主要竞争对手，由于Java语言的特点，代码臃肿，代码量大，维护成本和重构成本高，开发效率低，但目前市场岗位需求比较旺盛</span><br><span class="line">    <span class="number">4</span>)python：语法简单，学习成本低，对于新手比较友好，python语言良好的生态，大量库和框架的支持，使得python爬虫目前处于爬虫圈的主导地位</span><br></pre></td></tr></table></figure>

<h2 id="3、爬虫的分类："><a href="#3、爬虫的分类：" class="headerlink" title="3、爬虫的分类："></a>3、爬虫的分类：</h2><h2 id="3、1-通用爬虫"><a href="#3、1-通用爬虫" class="headerlink" title="3、1  通用爬虫"></a>3、1  通用爬虫</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、通用爬虫：搜索引擎</span><br><span class="line">	<span class="comment">#(通用爬虫就是一个爬虫，它爬取的数据为搜索引擎提供检索服务，但是通用爬虫不是搜索引擎)</span></span><br><span class="line">	<span class="number">1</span>)实例：百度，搜狗，Goolge的搜索引擎</span><br><span class="line">    <span class="number">2</span>)工作流：</span><br><span class="line">        <span class="number">2.1</span>)给定一个起始URL，放在爬虫队列中</span><br><span class="line">        <span class="number">2.2</span>)爬虫从队列中取出URL，爬取数据</span><br><span class="line">        <span class="number">2.3</span>)解析爬取到的数据，获取网页内所有URL地址，放在爬虫队列中</span><br><span class="line">        <span class="number">2.4</span>)重复第二个步骤</span><br><span class="line">    <span class="number">3</span>)使搜索引擎获取网站链接：</span><br><span class="line">        <span class="number">3.1</span>)主动将URL提交给搜索引擎(https://www.***.com)</span><br><span class="line">        <span class="number">3.2</span>)在其它热门网站设置友情链接</span><br><span class="line">        <span class="number">3.3</span>)百度和DNS服务商合作，收录新的网站</span><br><span class="line">    <span class="number">4</span>)网站排名(SEO)：</span><br><span class="line">        <span class="number">4.1</span>)根据PageRank值进行排名(流量，点击率)</span><br><span class="line">        <span class="number">4.2</span>)百度竞价排名，钱多就可以靠前排</span><br><span class="line">    <span class="number">5</span>)缺点：</span><br><span class="line">        <span class="number">5.1</span>)抓取的数据多数无用</span><br><span class="line">        <span class="number">5.2</span>)无法精确获取数据</span><br><span class="line">    6)协议：robots协议---&gt;约定哪些内容允许被哪些爬虫爬取</span><br><span class="line">        <span class="number">6.1</span>)无需遵守、该协议使用于通用爬虫，而我们写的使聚焦爬虫</span><br><span class="line">        <span class="number">6.2</span>)查看方法：网站URL/robots.txt，例如：https://www.baidu.com/robots.txt</span><br></pre></td></tr></table></figure>

<h2 id="3、2-聚焦爬虫"><a href="#3、2-聚焦爬虫" class="headerlink" title="3、2  聚焦爬虫"></a>3、2  聚焦爬虫</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>)聚焦爬虫又分为：增量式爬虫和深度爬虫</span><br><span class="line"><span class="number">2</span>)概念</span><br><span class="line">	<span class="number">2.1</span>)聚焦爬虫是针对某一领域中的特定数据进行爬取的程序，来抓取所需要的数据(又称：垂直领域爬取)</span><br><span class="line"><span class="number">3</span>)设计思路：</span><br><span class="line">        <span class="number">3.1</span>)确定爬取的URL，模拟客户端向服务端发送请求</span><br><span class="line">        <span class="number">3.2</span>)获取相应数据，并进行数据解析 </span><br><span class="line"></span><br><span class="line">        <span class="number">3.3</span>)将获取的数据持久化保存到本地</span><br></pre></td></tr></table></figure>

<h2 id="4、协议"><a href="#4、协议" class="headerlink" title="4、协议"></a>4、协议</h2><h2 id="4、1-OSI七层模型"><a href="#4、1-OSI七层模型" class="headerlink" title="4、1  OSI七层模型"></a>4、1  OSI七层模型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">应用层</span><br><span class="line">表示层</span><br><span class="line">会话层</span><br><span class="line">传输层</span><br><span class="line">网络层</span><br><span class="line">数据链路层</span><br><span class="line">物理层</span><br></pre></td></tr></table></figure>

<h2 id="4、2-TCT-IP五层模型"><a href="#4、2-TCT-IP五层模型" class="headerlink" title="4、2  TCT/IP五层模型"></a>4、2  TCT/IP五层模型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">应用层：HTTP、HTTPS、FIP(文件传输)、SSH协议</span><br><span class="line">传输层：TCP、UDP协议</span><br><span class="line">网络层：IP协议</span><br><span class="line">数据链路层：ARP协议</span><br><span class="line">物理层：以太网协议</span><br></pre></td></tr></table></figure>

<h2 id="4、3-常用协议"><a href="#4、3-常用协议" class="headerlink" title="4、3  常用协议"></a>4、3  常用协议</h2><h2 id="4、3、1-HTTP协议"><a href="#4、3、1-HTTP协议" class="headerlink" title="4、3、1  HTTP协议"></a>4、3、1  HTTP协议</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HTTP协议：明文传输，端口<span class="number">80</span></span><br><span class="line">HTTP协议全称Hyper Text Transfer Protocol，即超文本传输协议</span><br><span class="line">HTTP协议是用于从网络传输超文本数据到本地浏览器的传送协议，它能保证高效而转却地传送超文本文档</span><br><span class="line">目前广泛使用HTTP	<span class="number">1.1</span>版本</span><br></pre></td></tr></table></figure>

<h2 id="4、3、2-HTTPS协议"><a href="#4、3、2-HTTPS协议" class="headerlink" title="4、3、2  HTTPS协议"></a>4、3、2  HTTPS协议</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HTTPS协议：加密传输，端口<span class="number">443</span></span><br><span class="line">HTTPS协议全称：Hyper Text Transfer Protocol over Secure Socket Layer，是以安全为目标的HTTP通道，HTTPS协议实质是HTTP的安全版，即HTTP下加入SSL层，简称HTTPS</span><br><span class="line">HTTPS的安全体现在SSL的加密行为，即通过HTTPS协议传输的数据都是经过SSL加密的</span><br><span class="line">HTTPS的作用：</span><br><span class="line">    <span class="number">1</span>)建立一个信息安全的通道来保证数据传输的安全</span><br><span class="line">    <span class="number">2</span>)确认网站的真实性，凡是使用了HTTPS的网站，都可以通过点击浏览器地址栏的锁头标志来查看网站认证之后的真实信息，也可以通过CA机构颁发的安全签</span><br><span class="line">    	章来查询</span><br></pre></td></tr></table></figure>

<h2 id="4、3、3-HTTP和HTTPS的区别"><a href="#4、3、3-HTTP和HTTPS的区别" class="headerlink" title="4、3、3  HTTP和HTTPS的区别"></a>4、3、3  HTTP和HTTPS的区别</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HTTPS协议需要到CA申请证书，一般免费证书较少，因为需要一定的费用</span><br><span class="line">HTTP是超文本传输协议，信息是明文传输，HTTPS则是具有安全性的SSL加密传输协议</span><br><span class="line">HTTP和HTTPS使用的是完全不同的链接方式，用的端口也不一样，前者是<span class="number">80</span>，后者是<span class="number">443</span></span><br><span class="line">HTTP的链接方式很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议、比HTTP协议安全</span><br></pre></td></tr></table></figure>

<h2 id="4、3、4-TCP协议"><a href="#4、3、4-TCP协议" class="headerlink" title="4、3、4  TCP协议"></a>4、3、4  TCP协议</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TCP协议是一种面向链接的，可靠的，基于字节流的传输层通信协议</span><br><span class="line">有四大特性：</span><br><span class="line">    <span class="number">1</span>)有序性：数据包编号，判断数据包的正确次序</span><br><span class="line">    <span class="number">2</span>)正确性：使用checksum函数检查数据包是否损坏，发送及接收时都会计算校验和</span><br><span class="line">    <span class="number">3</span>)可靠性：发送端有超时重发，并由确认机制识别错误和数据的丢失</span><br><span class="line">    <span class="number">4</span>)可控性：滑动窗口协议与拥塞控制算法控制数据包的发送速度</span><br></pre></td></tr></table></figure>

<h2 id="4、3、5-UDP协议"><a href="#4、3、5-UDP协议" class="headerlink" title="4、3、5  UDP协议"></a>4、3、5  UDP协议</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UDP协议是用户数据报协议，面向无链接的传输层协议，传输时不可靠的</span><br><span class="line">    <span class="number">1</span>)无连接，数据可能会丢失或损坏</span><br><span class="line">    <span class="number">2</span>)报文小，传输速度块</span><br><span class="line">    <span class="number">3</span>)吞吐量大的网络传输，可以在一定程度上承受数据丢失</span><br></pre></td></tr></table></figure>

<h2 id="4、3、6-ARP协议"><a href="#4、3、6-ARP协议" class="headerlink" title="4、3、6  ARP协议"></a>4、3、6  ARP协议</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ARP协议是通过IP获取目标计算机MAC地址的协议</span><br></pre></td></tr></table></figure>

<h2 id="5、服务器常见端口"><a href="#5、服务器常见端口" class="headerlink" title="5、服务器常见端口"></a>5、服务器常见端口</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FTP：全称：File Transfer Protocol，及文件传输协议、端口：<span class="number">21</span></span><br><span class="line">SSH：全称：Secure Shell，用于远程登录会话、端口：<span class="number">22</span></span><br><span class="line">MySQL：关系型数据库、端口<span class="number">3306</span></span><br><span class="line">MongoDB：非关系型数据库、端口：<span class="number">27017</span></span><br><span class="line">Redis：非关系型数据库、端口：<span class="number">6379</span></span><br></pre></td></tr></table></figure>

<h2 id="6、开发准备"><a href="#6、开发准备" class="headerlink" title="6、开发准备"></a>6、开发准备</h2><h2 id="6、1-web端"><a href="#6、1-web端" class="headerlink" title="6、1  web端"></a>6、1  web端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python <span class="number">3.6</span>版本</span><br><span class="line">Pycharm</span><br><span class="line">Google Chrome</span><br></pre></td></tr></table></figure>

<h2 id="6、2-APP"><a href="#6、2-APP" class="headerlink" title="6、2  APP"></a>6、2  APP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fiddler抓包工具</span><br><span class="line">Charles抓包工具</span><br><span class="line">Appium自动化测试工具</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Spider</tag>
      </tags>
  </entry>
  <entry>
    <title>文件的操作</title>
    <url>/2020/05/17/Spider/%E6%96%87%E4%BB%B6%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="1、json文件的操作"><a href="#1、json文件的操作" class="headerlink" title="1、json文件的操作"></a>1、json文件的操作</h2><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">las = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    las.append(&#123;<span class="string">"name"</span>:<span class="string">"这是第%d几个json对象"</span>%i,<span class="string">"age"</span>:<span class="string">"今年%d岁了"</span> %i&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"json_file.json"</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(las,ensure_ascii=<span class="literal">False</span>,indent=<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h2 id="1、1-json文件案例"><a href="#1、1-json文件案例" class="headerlink" title="1、1  json文件案例"></a>1、1  json文件案例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml.html <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.budejie.com/'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url=url,headers=headers).text</span><br><span class="line">tree = etree.HTML(res)</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line">las = []</span><br><span class="line">title = tree.xpath(<span class="string">'//a[@class="u-user-name"]/text()'</span>)</span><br><span class="line">time = tree.xpath(<span class="string">'//span[@class="u-time  f-ib f-fr"]/text()'</span>)</span><br><span class="line">praise = tree.xpath(<span class="string">'//li[@class="j-r-list-tool-l-up"]/span/text()'</span>)</span><br><span class="line">degrade = tree.xpath(<span class="string">'//li[@class="j-r-list-tool-l-down "]/span/text()'</span>)</span><br><span class="line">share_list = tree.xpath(<span class="string">'//div[@class="j-r-list-tool-ct-share-c"]/span/text()'</span>)</span><br><span class="line">comment = tree.xpath(<span class="string">'//span[@class="comment-counts"]/text()'</span>)</span><br><span class="line">shares = []</span><br><span class="line"><span class="keyword">for</span> share <span class="keyword">in</span> share_list:</span><br><span class="line">    share = share.replace(<span class="string">'\xa0'</span>,<span class="string">''</span>)[<span class="number">2</span>]</span><br><span class="line">    shares.append(share)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'baisi.json'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            dic = &#123;<span class="string">'用户'</span>: title[i], <span class="string">'创建时间'</span>: time[i], <span class="string">'点赞'</span>: praise[i], <span class="string">'贬低'</span>: degrade[i], <span class="string">'分享'</span>: shares[i],</span><br><span class="line">                   <span class="string">'评论'</span>: comment[i]&#125;</span><br><span class="line">            las.append(dic)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            f.write(json.dumps(las,ensure_ascii=<span class="literal">False</span>,indent=<span class="number">2</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h2 id="2、csv文件的操作"><a href="#2、csv文件的操作" class="headerlink" title="2、csv文件的操作"></a>2、csv文件的操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'csv_file.csv'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f,delimiter=<span class="string">','</span>)</span><br><span class="line">    writer.writerow([<span class="string">'title'</span>,<span class="string">'age'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    title = <span class="string">'标题%d'</span> % i</span><br><span class="line">    age = <span class="string">'年龄%d'</span> % i</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'csv_file.csv'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f,delimiter=<span class="string">','</span>)</span><br><span class="line">        writer.writerow([title,age])</span><br></pre></td></tr></table></figure>

<h2 id="2、1-csv文件操作的案例"><a href="#2、1-csv文件操作的案例" class="headerlink" title="2、1  csv文件操作的案例"></a>2、1  csv文件操作的案例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml.html <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'baisi.csv'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f, delimiter=<span class="string">','</span>)</span><br><span class="line">    writer.writerow([<span class="string">'作者'</span>,<span class="string">'时间'</span>,<span class="string">'点赞'</span>,<span class="string">'拉黑'</span>,<span class="string">'分享'</span>,<span class="string">'评论'</span>])</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.budejie.com/'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url=url,headers=headers).text</span><br><span class="line">tree = etree.HTML(res)</span><br><span class="line">title_list = tree.xpath(<span class="string">'//div[@class="u-txt"]/a/text()'</span>)</span><br><span class="line">title = []</span><br><span class="line"><span class="keyword">for</span> tit <span class="keyword">in</span> title_list:</span><br><span class="line">    tit = tit.replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">    title.append(tit)</span><br><span class="line">time = tree.xpath(<span class="string">'//div[@class="u-txt"]/span/text()'</span>)</span><br><span class="line">praise = tree.xpath(<span class="string">'//li[@class="j-r-list-tool-l-up"]/span/text()'</span>)</span><br><span class="line">degrade = tree.xpath(<span class="string">'//li[@class="j-r-list-tool-l-down "]/span/text()'</span>)</span><br><span class="line">share_list = tree.xpath(<span class="string">'//div[@class="j-r-list-tool-ct-share-c"]/span/text()'</span>)</span><br><span class="line">share = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> share_list:</span><br><span class="line">    i = i.split(<span class="string">'\xa0'</span>)[<span class="number">2</span>]</span><br><span class="line">    share.append(i)</span><br><span class="line"><span class="comment"># print(share)</span></span><br><span class="line">comment = tree.xpath(<span class="string">'//span[@class="comment-counts"]/text()'</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'baisi.csv'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            writer = csv.writer(f,delimiter=<span class="string">','</span>)</span><br><span class="line">            writer.writerow([title[i],time[i],praise[i],degrade[i],share[i],comment[i]])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>文件的操作</tag>
      </tags>
  </entry>
  <entry>
    <title>打码平台</title>
    <url>/2020/05/17/Spider/%E6%89%93%E7%A0%81%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h2 id="1、打码平台"><a href="#1、打码平台" class="headerlink" title="1、打码平台"></a>1、打码平台</h2><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用流程:</span></span><br><span class="line">	- 注册账号:</span><br><span class="line">        普通账户: 充钱的</span><br><span class="line">        开发账户: 调接口进行打码</span><br><span class="line">	- 登陆普通用户: 查询剩余积分, 在线充值</span><br><span class="line">	- 开发者登陆:</span><br><span class="line">        我的软件--&gt;创建新软件: 名字随便, 秘钥不要改---&gt;软件代码 + 通讯秘钥</span><br><span class="line">		开发文档:PythonHTTP操作示例</span><br></pre></td></tr></table></figure>

<h2 id="2、云打码平台接口使用"><a href="#2、云打码平台接口使用" class="headerlink" title="2、云打码平台接口使用"></a>2、云打码平台接口使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取验证码:</span></span><br><span class="line"><span class="keyword">import</span> http.client, mimetypes, urllib, json, time, requests</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YDMHttp</span>:</span></span><br><span class="line"></span><br><span class="line">    apiurl = <span class="string">'http://api.yundama.com/api.php'</span></span><br><span class="line">    username = <span class="string">''</span></span><br><span class="line">    password = <span class="string">''</span></span><br><span class="line">    appid = <span class="string">''</span></span><br><span class="line">    appkey = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, appid, appkey)</span>:</span></span><br><span class="line">        self.username = username  </span><br><span class="line">        self.password = password</span><br><span class="line">        self.appid = str(appid)</span><br><span class="line">        self.appkey = appkey</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(self, fields, files=[])</span>:</span></span><br><span class="line">        response = self.post_url(self.apiurl, fields, files)</span><br><span class="line">        response = json.loads(response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'balance'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid, <span class="string">'appkey'</span>: self.appkey&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">if</span> (response[<span class="string">'ret'</span>] <span class="keyword">and</span> response[<span class="string">'ret'</span>] &lt; <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'ret'</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'balance'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'login'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid, <span class="string">'appkey'</span>: self.appkey&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">if</span> (response[<span class="string">'ret'</span>] <span class="keyword">and</span> response[<span class="string">'ret'</span>] &lt; <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'ret'</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'uid'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(self, filename, codetype, timeout)</span>:</span></span><br><span class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'upload'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid, <span class="string">'appkey'</span>: self.appkey, <span class="string">'codetype'</span>: str(codetype), <span class="string">'timeout'</span>: str(timeout)&#125;</span><br><span class="line">        file = &#123;<span class="string">'file'</span>: filename&#125;</span><br><span class="line">        response = self.request(data, file)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">if</span> (response[<span class="string">'ret'</span>] <span class="keyword">and</span> response[<span class="string">'ret'</span>] &lt; <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'ret'</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'cid'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(self, cid)</span>:</span></span><br><span class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'result'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid, <span class="string">'appkey'</span>: self.appkey, <span class="string">'cid'</span>: str(cid)&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">return</span> response <span class="keyword">and</span> response[<span class="string">'text'</span>] <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self, filename, codetype, timeout)</span>:</span></span><br><span class="line">        cid = self.upload(filename, codetype, timeout)</span><br><span class="line">        <span class="keyword">if</span> (cid &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, timeout):</span><br><span class="line">                result = self.result(cid)</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="string">''</span>):</span><br><span class="line">                    <span class="keyword">return</span> cid, result</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-3003</span>, <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> cid, <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">report</span><span class="params">(self, cid)</span>:</span></span><br><span class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'report'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid, <span class="string">'appkey'</span>: self.appkey, <span class="string">'cid'</span>: str(cid), <span class="string">'flag'</span>: <span class="string">'0'</span>&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">return</span> response[<span class="string">'ret'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_url</span><span class="params">(self, url, fields, files=[])</span>:</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> files:</span><br><span class="line">            files[key] = open(files[key], <span class="string">'rb'</span>);</span><br><span class="line">        res = requests.post(url, files=files, data=fields)</span><br><span class="line">        <span class="keyword">return</span> res.text</span><br><span class="line"></span><br><span class="line"><span class="comment">#################只有一下部分需要作出修改, 上面的类不需要该#########################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line">username    = <span class="string">'jeremy0820'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line">password    = <span class="string">'0820_ab'</span>                            </span><br><span class="line"></span><br><span class="line"><span class="comment"># 软件ＩＤ，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></span><br><span class="line">appid       = <span class="number">7608</span>                                    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 软件密钥，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></span><br><span class="line">appkey      = <span class="string">'106f27ed6a4ef2c97652c68a76a505f9'</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片文件</span></span><br><span class="line">filename    = <span class="string">'./code.jpg'</span>                        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证码类型，# 例：1004表示4位字母数字，不同类型收费不同。请准确填写，否则影响识别率。在此查询所有类型 http://www.yundama.com/price.html</span></span><br><span class="line">codetype    = <span class="number">1004</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超时时间，秒</span></span><br><span class="line">timeout     = <span class="number">60</span>                                    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line"><span class="keyword">if</span> (username == <span class="string">'username'</span>):</span><br><span class="line">    print(<span class="string">'请设置好相关参数再测试'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    yundama = YDMHttp(username, password, appid, appkey)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆云打码</span></span><br><span class="line">    uid = yundama.login();</span><br><span class="line">    print(<span class="string">'uid: %s'</span> % uid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询余额</span></span><br><span class="line">    balance = yundama.balance();</span><br><span class="line">    print(<span class="string">'balance: %s'</span> % balance)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始识别，图片路径，验证码类型ID，超时时间（秒），识别结果</span></span><br><span class="line">    cid, result = yundama.decode(filename, codetype, timeout);</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br></pre></td></tr></table></figure>

<h2 id="3、动态传参与模拟登陆"><a href="#3、动态传参与模拟登陆" class="headerlink" title="3、动态传参与模拟登陆"></a>3、动态传参与模拟登陆</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 古诗文网模拟登陆</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取隐藏参数</span></span><br><span class="line">session =  requests.Session()</span><br><span class="line">url = <span class="string">"https://so.gushiwen.org/user/login.aspx"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">"headers"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36"</span>&#125;</span><br><span class="line">response = session.get(url=url, headers=headers).text</span><br><span class="line">etree_obj = etree.HTML(response)</span><br><span class="line">__VIEWSTATE = etree_obj.xpath(<span class="string">"//input[@id='__VIEWSTATE']/@value"</span>)</span><br><span class="line">__VIEWSTATEGENERATOR = etree_obj.xpath(<span class="string">"//input[@id='__VIEWSTATEGENERATOR']/@value"</span>)</span><br><span class="line">print(__VIEWSTATE)</span><br><span class="line">print(__VIEWSTATEGENERATOR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取验证码图片:</span></span><br><span class="line">url_image = <span class="string">'https://so.gushiwen.org/RandCode.ashx'</span></span><br><span class="line">content = session.get(url=url_image, headers=headers).content</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"./code.jpg"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取验证码:</span></span><br><span class="line"><span class="keyword">import</span> http.client, mimetypes, urllib, json, time, requests</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YDMHttp</span>:</span></span><br><span class="line"></span><br><span class="line">    apiurl = <span class="string">'http://api.yundama.com/api.php'</span></span><br><span class="line">    username = <span class="string">''</span></span><br><span class="line">    password = <span class="string">''</span></span><br><span class="line">    appid = <span class="string">''</span></span><br><span class="line">    appkey = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, appid, appkey)</span>:</span></span><br><span class="line">        self.username = username  </span><br><span class="line">        self.password = password</span><br><span class="line">        self.appid = str(appid)</span><br><span class="line">        self.appkey = appkey</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(self, fields, files=[])</span>:</span></span><br><span class="line">        response = self.post_url(self.apiurl, fields, files)</span><br><span class="line">        response = json.loads(response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'balance'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid, <span class="string">'appkey'</span>: self.appkey&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">if</span> (response[<span class="string">'ret'</span>] <span class="keyword">and</span> response[<span class="string">'ret'</span>] &lt; <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'ret'</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'balance'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'login'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid, <span class="string">'appkey'</span>: self.appkey&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">if</span> (response[<span class="string">'ret'</span>] <span class="keyword">and</span> response[<span class="string">'ret'</span>] &lt; <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'ret'</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'uid'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(self, filename, codetype, timeout)</span>:</span></span><br><span class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'upload'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid, <span class="string">'appkey'</span>: self.appkey, <span class="string">'codetype'</span>: str(codetype), <span class="string">'timeout'</span>: str(timeout)&#125;</span><br><span class="line">        file = &#123;<span class="string">'file'</span>: filename&#125;</span><br><span class="line">        response = self.request(data, file)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">if</span> (response[<span class="string">'ret'</span>] <span class="keyword">and</span> response[<span class="string">'ret'</span>] &lt; <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'ret'</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> response[<span class="string">'cid'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(self, cid)</span>:</span></span><br><span class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'result'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid, <span class="string">'appkey'</span>: self.appkey, <span class="string">'cid'</span>: str(cid)&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">return</span> response <span class="keyword">and</span> response[<span class="string">'text'</span>] <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(self, filename, codetype, timeout)</span>:</span></span><br><span class="line">        cid = self.upload(filename, codetype, timeout)</span><br><span class="line">        <span class="keyword">if</span> (cid &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, timeout):</span><br><span class="line">                result = self.result(cid)</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="string">''</span>):</span><br><span class="line">                    <span class="keyword">return</span> cid, result</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-3003</span>, <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> cid, <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">report</span><span class="params">(self, cid)</span>:</span></span><br><span class="line">        data = &#123;<span class="string">'method'</span>: <span class="string">'report'</span>, <span class="string">'username'</span>: self.username, <span class="string">'password'</span>: self.password, <span class="string">'appid'</span>: self.appid, <span class="string">'appkey'</span>: self.appkey, <span class="string">'cid'</span>: str(cid), <span class="string">'flag'</span>: <span class="string">'0'</span>&#125;</span><br><span class="line">        response = self.request(data)</span><br><span class="line">        <span class="keyword">if</span> (response):</span><br><span class="line">            <span class="keyword">return</span> response[<span class="string">'ret'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-9001</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_url</span><span class="params">(self, url, fields, files=[])</span>:</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> files:</span><br><span class="line">            files[key] = open(files[key], <span class="string">'rb'</span>);</span><br><span class="line">        res = requests.post(url, files=files, data=fields)</span><br><span class="line">        <span class="keyword">return</span> res.text</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line">username    = <span class="string">'jeremy0820'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line">password    = <span class="string">'0820_ab'</span>                            </span><br><span class="line"></span><br><span class="line"><span class="comment"># 软件ＩＤ，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></span><br><span class="line">appid       = <span class="number">7608</span>                                    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 软件密钥，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></span><br><span class="line">appkey      = <span class="string">'106f27ed6a4ef2c97652c68a76a505f9'</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片文件</span></span><br><span class="line">filename    = <span class="string">'./code.jpg'</span>                        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证码类型，# 例：1004表示4位字母数字，不同类型收费不同。请准确填写，否则影响识别率。在此查询所有类型 http://www.yundama.com/price.html</span></span><br><span class="line">codetype    = <span class="number">1004</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超时时间，秒</span></span><br><span class="line">timeout     = <span class="number">60</span>                                    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line"><span class="keyword">if</span> (username == <span class="string">'username'</span>):</span><br><span class="line">    print(<span class="string">'请设置好相关参数再测试'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    yundama = YDMHttp(username, password, appid, appkey)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登陆云打码</span></span><br><span class="line">    uid = yundama.login();</span><br><span class="line">    print(<span class="string">'uid: %s'</span> % uid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询余额</span></span><br><span class="line">    balance = yundama.balance();</span><br><span class="line">    print(<span class="string">'balance: %s'</span> % balance)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始识别，图片路径，验证码类型ID，超时时间（秒），识别结果</span></span><br><span class="line">    cid, result = yundama.decode(filename, codetype, timeout);</span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line">print(<span class="string">"验证码识别结果:"</span>, result)</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"__VIEWSTATE"</span>: __VIEWSTATE,</span><br><span class="line">    <span class="string">"__VIEWSTATEGENERATOR"</span>: __VIEWSTATEGENERATOR,</span><br><span class="line">    <span class="string">"from"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"yujeremy0820@gmail.com"</span>,</span><br><span class="line">    <span class="string">"pwd"</span>: <span class="string">"0820@ab"</span>,</span><br><span class="line">    <span class="string">"code"</span>: result,</span><br><span class="line">    <span class="string">"denglu"</span>: <span class="string">"登录"</span>,</span><br><span class="line">&#125;</span><br><span class="line">login =session.post(url=url, headers=headers, data=data)</span><br><span class="line">index_url = <span class="string">'https://so.gushiwen.org/user/collect.aspx'</span></span><br><span class="line">index_content = session.get(url=index_url, headers=headers).text</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./shi.html'</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">"开始写文件"</span>)</span><br><span class="line">    f.write(index_content)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>打码平台</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程爬虫</title>
    <url>/2020/05/17/Spider/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h2 id="1、整体思路"><a href="#1、整体思路" class="headerlink" title="1、整体思路"></a>1、整体思路</h2><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; 队列保存变化的参数，即之前构建的类似页码的东西。</span><br><span class="line"></span><br><span class="line">&gt; 一个类实现：三个线程进行数据采集，依次从队列中获取参数，拼接url，请求到的网	页源码保存到新队列。</span><br><span class="line"></span><br><span class="line">&gt; 一个类实现 ：<span class="number">1.</span>  三个线程进行数据处理，依次从队列中获取源码，xpath定位元素	取出文本，构建字典。<span class="number">2.</span> 定义函数数据入库，pymongon数据插入数据即可</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">主程序 mian 分为 两 部分</span><br><span class="line"></span><br><span class="line">- 实例化队列，我们有两组线程在工作，初始队列一个，线程间通信需要一个，一共两个</span><br><span class="line"></span><br><span class="line">- 实例化线程，通过遍历实例化线程类，创建俩组三线程。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">调用主程序</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><p>具体部署，和相关知识点罗列</p>
<p>细节决定成败，必须搞清楚每一步的意义是什么，而不是说这里就应该这么写，没有那么多理所应当。</p>
<p>#####具体部署： </p>
<ul>
<li><p>定义第一个类：</p>
<ul>
<li><p>定义类：需要继承threading.Thread父类</p>
</li>
<li><p>类属性：想清楚传那些熟悉</p>
<ol>
<li><p>参数队列要传进来</p>
</li>
<li><p>子类重写初始化属性</p>
<p>先继承父类属性—-&gt;然后写自己要加的属性</p>
</li>
</ol>
</li>
<li><p>定义方法：</p>
<p>重写run方法</p>
<p>​    通过无限循环获取队列中的参数，实现请求多页面，</p>
<p>​    这个队列是被三个线程去访问的。</p>
</li>
</ul>
</li>
<li><p>定义第二个类：</p>
<p>​    需要考虑的和第一个类思路是一样的，这里有一个互斥锁的加入</p>
<p>​    就是在处理数据的时候加入，因为写入数据库的字段都一样，避免数据量过大</p>
<p>​    出错，导致数据错乱。</p>
</li>
<li><p>主程序代码</p>
<ul>
<li><p>实例队列对象</p>
<p>page_Queue = Queue() 构建参数</p>
<p>data_Queue = Queue() 负责两个主线程间的通信</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre><code>+ 实例互斥锁对象

  lock = Lock()



+ 构建两个主线程，一个线程负责采集数据，一个线程处理数据并入库

+ 当然都是用for循环来构建的，记得线程类需要传入那些属性</code></pre><ul>
<li><p>调用主程序</p>
<p>#####相关知识点： </p>
</li>
<li><p>重写父类同名方法需要注意:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParseTread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadName, dataQueue, lock)</span>:</span></span><br><span class="line">        <span class="comment"># 先把父类的方法继承下来</span></span><br><span class="line">        super(ParseTread, self).__init__()</span><br><span class="line">        <span class="comment"># 然后定义自己的方法</span></span><br><span class="line">        self.threadName = threadName</span><br><span class="line">        self.dataQueue = dataQueue</span><br><span class="line">        self.lock = lock</span><br></pre></td></tr></table></figure>
</li>
<li><p>首先明白什么是进程什么是线程，线程和进程的区别？</p>
<p>线程（有时候称为轻量级进程）与进程类似，不过它们是在同一个进程下执行的，并共享相同的上下文。可以将它们认为是在一个主进程或“主线程”中并行运行的一些“迷你进程”。 </p>
<p>这里讲的很清楚<a href="https://www.cnblogs.com/chbo/p/7043660.html" target="_blank" rel="noopener">https://www.cnblogs.com/chbo/p/7043660.html</a> </p>
</li>
<li><p>我们的子线程为什么要设置join()，其实设置了守护线程才是join()出现的时机</p>
<p>如果是为了避免数据的恶性竞争的话，互斥锁是接这个的小能手。</p>
</li>
<li><p>为什么要设置守护线程</p>
<p>如果给线程设置守护线程，那么后台线程执行完毕就会杀死这些线程。大致的作用就是当你退出进程，后台线程关闭那么这些子线程也要同时关闭。</p>
</li>
<li><p>join()的作用，和其存在的意义</p>
<p>join()的功能是设置阻塞，之所以要设置join()就是有选择的设置守护线程，因为我们有的线程需要同步主线程结束而结束，而有的线程需要执行完毕菜行。设置了守护线程的子线程都会随着主线的结束而结束。</p>
<p>我们这里设置的join()是没有意义的，因为并没有设置守护线程，因此没必要设置阻塞。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying_Client</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re, threading</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrawlThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadName, page_Queue, data_Queue)</span>:</span></span><br><span class="line">        super(CrawlThread, self).__init__()</span><br><span class="line">        self.threadName = threadName</span><br><span class="line">        self.pageQueue = page_Queue</span><br><span class="line">        self.dataQueue = data_Queue</span><br><span class="line">        self.headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36"</span>,&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        url1 = <span class="string">'http://www.ziroom.com/z/nl/z3.html?p=%s'</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 如果队列为空 block 为 True 那么进入阻塞状态</span></span><br><span class="line">                <span class="comment"># 如果队列为控 block 为 false 那么会抛出异常</span></span><br><span class="line">                p = self.pageQueue.get(block=<span class="literal">False</span>)</span><br><span class="line">                print(<span class="string">'%s开始工作...'</span> % self.threadName)</span><br><span class="line">                response = requests.get(url=url1 % p, headers=self.headers)</span><br><span class="line">                content = response.text</span><br><span class="line">                self.dataQueue.put(content)</span><br><span class="line">                <span class="comment"># print(self.dataQueue.qsize())</span></span><br><span class="line">                print(<span class="string">'%s工作结束...'</span> % self.threadName)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParseTread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, threadName, dataQueue, lock)</span>:</span></span><br><span class="line">        super(ParseTread, self).__init__()</span><br><span class="line">        self.threadName = threadName</span><br><span class="line">        self.dataQueue = dataQueue</span><br><span class="line">        self.lock = lock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                html = self.dataQueue.get(block=<span class="literal">False</span>)</span><br><span class="line">                print(<span class="string">'%s开始处理数据........'</span> % self.threadName)</span><br><span class="line">                self.get_price_list(html)</span><br><span class="line">                print(<span class="string">'%s数据处理完毕........'</span> % self.threadName)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(e)</span><br><span class="line">                <span class="comment"># print('出错了')</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_price_list</span><span class="params">(self, html)</span>:</span></span><br><span class="line">        <span class="comment"># 正则匹配图片地址，超级鹰打码，获取列表两个参数 code 下标列表</span></span><br><span class="line">        price_image = re.findall(<span class="string">r'"image":"(.*?)"'</span>, html)[<span class="number">0</span>]</span><br><span class="line">        index_list = re.findall(<span class="string">r'"offset":(.*?)&#125;;'</span>, html)[<span class="number">0</span>]</span><br><span class="line">        index_list = eval(index_list)</span><br><span class="line">        <span class="comment"># print(index_list)</span></span><br><span class="line">        price_image_link = <span class="string">'http:'</span> + price_image</span><br><span class="line">        <span class="comment"># print(price_image_link)</span></span><br><span class="line">        request.urlretrieve(price_image_link, <span class="string">'./im.jpg'</span>)</span><br><span class="line">        <span class="comment"># 超级鹰打码，获取到图片中的数字</span></span><br><span class="line">        chaojiying = Chaojiying_Client(<span class="string">'ipython'</span>, <span class="string">'123456789'</span>, <span class="string">'96001'</span>)</span><br><span class="line">        im = open(<span class="string">'im.jpg'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line">        code = chaojiying.PostPic(im, <span class="number">4111</span>)[<span class="string">'pic_str'</span>]</span><br><span class="line">        price_list = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> index_list:</span><br><span class="line">            <span class="comment"># print(j)</span></span><br><span class="line">            str1 = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> j:</span><br><span class="line">                str1 += code[int(i)]</span><br><span class="line">            <span class="comment"># print(code)</span></span><br><span class="line">            <span class="comment"># print(str1)</span></span><br><span class="line">            price_list.append(int(str1))</span><br><span class="line">        self.get_detail_list(html, price_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_detail_list</span><span class="params">(self, html, price_list)</span>:</span></span><br><span class="line">        html = etree.HTML(html)</span><br><span class="line">        data_list = html.xpath(<span class="string">'//ul[@id="houseList"]/li'</span>)</span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data_list:</span><br><span class="line">            item = &#123;&#125;</span><br><span class="line">            title = i.xpath(<span class="string">'.//h3/a[@class="t1"]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">            size_detail = i.xpath(<span class="string">'.//div[@class="detail"]/p'</span>)[<span class="number">0</span>].xpath(<span class="string">'.//span/text()'</span>)</span><br><span class="line">            position = i.xpath(<span class="string">'.//div[@class="detail"]/p'</span>)[<span class="number">1</span>].xpath(<span class="string">'.//span/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">            item = &#123;<span class="string">'标题'</span>: title, <span class="string">'面积'</span>: size_detail, <span class="string">'位置'</span>: position, <span class="string">'价格'</span>: price_list[a]&#125;</span><br><span class="line">            a += <span class="number">1</span></span><br><span class="line">            <span class="keyword">with</span> self.lock:</span><br><span class="line">                self.save(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        conn = pymongo.MongoClient(<span class="string">"localhost"</span>,<span class="number">27017</span>)</span><br><span class="line">        db = conn.qiubai</span><br><span class="line">        table = db.qiubai</span><br><span class="line">        table.insert(item)</span><br><span class="line">       </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(n)</span>:</span></span><br><span class="line">    page_Queue = Queue()</span><br><span class="line">    data_Queue = Queue()</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        page_Queue.put(i)</span><br><span class="line"></span><br><span class="line">    crawlList = &#123;<span class="string">'长征1号'</span>, <span class="string">'长征2号'</span>, <span class="string">'长征3号'</span>&#125;</span><br><span class="line">    TreadCrawl = []</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> crawlList:</span><br><span class="line">        c = CrawlThread(var, page_Queue, data_Queue)</span><br><span class="line">        c.start()</span><br><span class="line">        TreadCrawl.append(c)</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> TreadCrawl:</span><br><span class="line">        var.join()</span><br><span class="line">    parseList = [<span class="string">'嫦娥1号'</span>, <span class="string">'嫦娥2号'</span>, <span class="string">'嫦娥3号'</span>]</span><br><span class="line">    TreadParse = []</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> parseList:</span><br><span class="line">        p = ParseTread(var, data_Queue, lock)</span><br><span class="line">        p.start()</span><br><span class="line">        TreadParse.append(p)</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> TreadParse:</span><br><span class="line">        var.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>多线程爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>xpath使用</title>
    <url>/2020/05/17/Spider/xpath%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1、xpath解析库"><a href="#1、xpath解析库" class="headerlink" title="1、xpath解析库"></a>1、xpath解析库</h2><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Xpath解析库介绍:</span></span><br><span class="line">	数据解析的过程中使用过正则表达式, 但正则表达式想要进准匹配难度较高, 一旦正则表达式书写错误, 匹配的数据也会出错.</span><br><span class="line">    网页由三部分组成: HTML, Css, JavaScript, HTML页面标签存在层级关系, 即DOM树, 在获取目标数据时可以根据网页层次关系定位标签, 在获取标签的文本或属性.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xpath解析库解析数据原理:</span></span><br><span class="line"><span class="number">1.</span> 根据网页DOM树定位节点标签</span><br><span class="line"><span class="number">2.</span> 获取节点标签的正文文本或属性值</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xpath安装, 初体验 --&gt; 使用步骤:	xpath解析网络网页</span></span><br><span class="line"><span class="number">1.</span>xpath安装: pip install lxml</span><br><span class="line"><span class="number">2.</span>requests模块爬取壁纸:</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 获取请求地址，第一页内容---第五页内容</span></span><br><span class="line">url_list = [<span class="string">'http://www.win4000.com/zt/gaoqing_%d.html'</span> % num <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>)]</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 遍历网页 获取每一个网页的文本</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    res = requests.get(url=url,headers=headers).text</span><br><span class="line">    <span class="comment"># 创建对象，变量tree接收</span></span><br><span class="line">    tree = etree.HTML(res)</span><br><span class="line">    <span class="comment"># 从对象中获取需要的图片地址，使用变量url2_list接收</span></span><br><span class="line">    url2_list = tree.xpath(<span class="string">'//ul[@class="clearfix"]/li/a/img/@data-original'</span>)</span><br><span class="line">    <span class="comment"># 遍历图片地址对象，获取每一个地址</span></span><br><span class="line">    <span class="keyword">for</span> url2 <span class="keyword">in</span> url2_list:</span><br><span class="line">        <span class="comment"># 获取每一个页面的二进制流</span></span><br><span class="line">        content = requests.get(url=url2,headers=headers).content</span><br><span class="line">        name = url2.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'./src/%s'</span>%name,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            print(name)</span><br><span class="line">            f.write(content)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xpath解析本地文件</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">tree = etree.parse(<span class="string">'./qb.html'</span>, etree.HTMLParser())</span><br><span class="line">title_lst = tree.xpath(<span class="string">'//ul/li/div/a/text()'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> title_lst:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xpath语法:</span></span><br><span class="line"><span class="number">1.</span>常用规则:</span><br><span class="line">      <span class="number">1.</span>  nodename:		  节点名定位</span><br><span class="line">      <span class="number">2.</span>  //:			  从当前节点选取子孙节点</span><br><span class="line">      <span class="number">3.</span>  /:			  从当前节点选取直接子节点</span><br><span class="line">      <span class="number">4.</span>  nodename[@attribute=<span class="string">"..."</span>]  根据属性定位标签</span><br><span class="line">      <span class="number">5.</span>  @attributename:  获取属性 </span><br><span class="line">      <span class="number">6.</span>  text():		   获取文本</span><br><span class="line">   </span><br><span class="line"><span class="number">2.</span>属性匹配两种情况: 多属性匹配 &amp;  单属性多值匹配  </span><br><span class="line">     <span class="number">2.2</span> 多属性匹配</span><br><span class="line">    示例: tree.xpath(<span class="string">'//div[@class="item" and @name="test"]/text()'</span>) 	</span><br><span class="line">    <span class="number">2.1</span> 单属性多值匹配</span><br><span class="line">    示例: tree.xpath(<span class="string">'//div[contains(@class, "dc")]/text()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>按序选择:</span><br><span class="line">    <span class="number">3.1</span> 索引定位: 从<span class="number">1</span>开始</span><br><span class="line">    <span class="number">3.2</span> last()函数</span><br><span class="line">    <span class="number">3.3</span> position()函数</span><br></pre></td></tr></table></figure>

<h2 id="解析示例-示例解析的是本地文件"><a href="#解析示例-示例解析的是本地文件" class="headerlink" title="解析示例: 示例解析的是本地文件"></a>解析示例: 示例解析的是本地文件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Xpath练习文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"007"</span>&gt;</span></span><br><span class="line">    "我是div标签的文字内容, 和下面的p标签还有div标签是同级的哦"</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是p标签内的文字内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是p标签同级的div标签<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divtag"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第1个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第2个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第3个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第4个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第5个li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>这是百度的跳转连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c1"</span> <span class="attr">name</span>=<span class="string">"laoda"</span>&gt;</span>老大在此<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c1 c3"</span> <span class="attr">name</span>=<span class="string">"laoer"</span>&gt;</span>老二任性, class有两个值<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c1"</span> <span class="attr">name</span>=<span class="string">"laosan"</span>&gt;</span>我是老三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">tree = etree.parse(<span class="string">'./x.html'</span>, etree.HTMLParser())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.根据节点名, 即nodename定位title标签, 获取标签内文字</span></span><br><span class="line">title_text = tree.xpath(<span class="string">'//title/text()'</span>)</span><br><span class="line">print(title_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.根据节点属性定位: 定位id为007的div标签</span></span><br><span class="line">div_007 = tree.xpath(<span class="string">'//div[@id="007"]'</span>)</span><br><span class="line">print(div_007)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.示例直接子节点与子孙节点:/, //</span></span><br><span class="line">div_007_one = tree.xpath(<span class="string">'//div[@id="007"]/text()'</span>)</span><br><span class="line">print(div_007_one)</span><br><span class="line">div_007_two = tree.xpath(<span class="string">'//div[@id="007"]//text()'</span>)</span><br><span class="line">print(div_007_two)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取a标签的href属性</span></span><br><span class="line">a_href = tree.xpath(<span class="string">'//div[@class="divtag"]/a/@href'</span>)</span><br><span class="line">print(a_href)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.多属性定位: 根据class属性和name属性定位div标签</span></span><br><span class="line">div_two_attr = tree.xpath(<span class="string">'//div[@class="c1" and @name="laoda"]/text()'</span>)</span><br><span class="line">print(div_two_attr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.属性多值定位: 定位所有class中有c1的div标签</span></span><br><span class="line">div_c1 = tree.xpath(<span class="string">'//div[contains(@class, "c1")]'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.按序定位</span></span><br><span class="line">li_first = tree.xpath(<span class="string">'//div[@class="divtag"]/ul/li[1]/text()'</span>)  <span class="comment"># 定位第一个li标签, 获取其文本</span></span><br><span class="line">print(li_first)</span><br><span class="line"></span><br><span class="line">li_last = tree.xpath(<span class="string">'//div[@class="divtag"]/ul/li[last()]/text()'</span>)  <span class="comment"># 定位最后一个li标签</span></span><br><span class="line">print(li_last)</span><br><span class="line"></span><br><span class="line">li_daotwo = tree.xpath(<span class="string">'//div[@class="divtag"]/ul/li[last()-1]/text()'</span>)  <span class="comment"># 定位倒数第二个li标签</span></span><br><span class="line">print(li_daotwo)</span><br><span class="line"></span><br><span class="line">li_qianthree = tree.xpath(<span class="string">'//div[@class="divtag"]/ul/li[position()&lt;4]/text()'</span>)  <span class="comment"># 定位前三个li标签</span></span><br><span class="line">print(li_qianthree)</span><br></pre></td></tr></table></figure>

<h2 id="作业"><a href="#作业" class="headerlink" title="作业:"></a>作业:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>爬取糗事百科, 热门前两页的每一项标题, 详情页链接, 好笑指数及评论数</span><br><span class="line"><span class="number">2.</span>默写</span><br><span class="line">res = requests.get(url=url, headers=headers, params=params, proxies=proxies)</span><br><span class="line">res = requests.post(url=url, headers=headers, data=data, proxies=proxies)</span><br><span class="line">代理类型:</span><br><span class="line">    透明代理:</span><br><span class="line">    匿名代理:</span><br><span class="line">    高匿代理:</span><br><span class="line">    </span><br><span class="line">获取响应数据内容:</span><br><span class="line">		res.text		获取HTML文本</span><br><span class="line">		res.content		获取二进制流</span><br><span class="line">		res.json()		获取json数据</span><br><span class="line">xpath常用规则:</span><br><span class="line">      <span class="number">1.</span>  nodename:		  节点名定位</span><br><span class="line">      <span class="number">2.</span>  //:			  从当前节点选取子孙节点</span><br><span class="line">      <span class="number">3.</span>  /:			  从当前节点选取直接子节点</span><br><span class="line">      <span class="number">4.</span>  nodename[@attribute=<span class="string">"..."</span>]  根据属性定位标签</span><br><span class="line">      <span class="number">5.</span>  @attributename:  获取属性 </span><br><span class="line">      <span class="number">6.</span>  text():		   获取文本</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Xpath</tag>
      </tags>
  </entry>
  <entry>
    <title>selenuim模块的使用</title>
    <url>/2020/05/17/Spider/selenuim%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1、selenium介绍"><a href="#1、selenium介绍" class="headerlink" title="1、selenium介绍"></a>1、selenium介绍</h2><a id="more"></a>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>selenium是一个web自动化测试用的框架. 程序员可以通过代码实现对浏览器的控制, 比如打开网页, 点击网页中的元素, 实现鼠标滚动等操作.</span><br><span class="line"><span class="number">2.</span>它支持多款浏览器, 如谷歌浏览器, 火狐浏览器等等, 当然也支持无头浏览器.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目的:</span></span><br><span class="line">在爬取数据的过程中, 经常遇到动态数据加载, 一般动态数据加载有两种, 一种通过ajax请求加载数据, 另一种通过js代码加载动态数据. selenium可以模拟人操作真实浏览器, 获取加载完成的页面数据</span><br><span class="line">ajax:</span><br><span class="line">    url有规律且未加密, 直接构建url连接请求</span><br><span class="line">    url加密过无法破解规律 --&gt; selenium</span><br><span class="line">js动态数据加载 --&gt;  selenium</span><br></pre></td></tr></table></figure>

<h2 id="2、selenium安装"><a href="#2、selenium安装" class="headerlink" title="2、selenium安装"></a>2、selenium安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">三要素: 浏览器, 驱动程序, selenium框架</span><br><span class="line">	浏览器: 推荐谷歌浏览器, 标准稳定版本</span><br><span class="line">	谷歌浏览器驱动程序chromedriver.exe下载地址:http://chromedriver.storage.googleapis.com/index.html</span><br><span class="line">         火狐浏览器驱动chromedriver.exe下载地址:https://github.com/mozilla/geckodriver/releases</span><br><span class="line">            <span class="comment"># 将下载的驱动放在python环境的scirpt文件中，不需要导入使用，或者放在跟py文件同级的目录中，但是每次需导入使用</span></span><br><span class="line">	pip install selenium   <span class="comment"># 安装selenium模块</span></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome(<span class="string">'./webdriver'</span>)   <span class="comment"># 将驱动放在脚本所在的文件夹</span></span><br><span class="line">browser.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果报错---cannot find Chrome binary</span></span><br><span class="line">则使用如下测试</span><br><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.binary_location = <span class="string">"D:\software\Google\Chrome\Application\chrome.exe"</span></span><br><span class="line">browser = webdriver.Chrome(options=option)</span><br><span class="line">browser.get(url)</span><br></pre></td></tr></table></figure>

<h2 id="3、selenium常用操作"><a href="#3、selenium常用操作" class="headerlink" title="3、selenium常用操作"></a>3、selenium常用操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例化浏览器对象:</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Chrome(<span class="string">'driverpath'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送get请求:</span></span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面元素:</span></span><br><span class="line">find_element_by_id(<span class="string">'ID名'</span>):根据元素的id</span><br><span class="line">find_element_by_name():根据元素的name属性</span><br><span class="line">find_element_by_xpath():根据xpath表达式</span><br><span class="line">find_element_by_class_name():根据<span class="class"><span class="keyword">class</span>的值</span></span><br><span class="line"><span class="class"><span class="title">find_element_by_css_selector</span><span class="params">()</span>:</span>根据css选择器</span><br><span class="line">find_element_by_link_text(<span class="string">'text'</span>):根据超链接的文本进行定位</span><br><span class="line">find_element_by_partial_link_text(<span class="string">'a part of text'</span>):根据超文本的文本进行模块匹配</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点交互操作:</span></span><br><span class="line">click(): 点击</span><br><span class="line">send_keys(): 输入内容</span><br><span class="line">clear(): 清空操作</span><br><span class="line">browser.forword():前进</span><br><span class="line">browser.back():后退</span><br><span class="line"></span><br><span class="line">execute_script(js): 执行指定的js代码</span><br><span class="line"><span class="comment"># JS代码: window.scrollTo(0, document.body.scrollHeight)可以模拟鼠标滚动一屏高度</span></span><br><span class="line">quit(): 退出浏览器</span><br><span class="line">    I quit! 我不干!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页的数据:</span></span><br><span class="line">browser.page_source   ---&gt;  获取网页源代码---str类型</span><br><span class="line">获取元素属性：get_attribute()</span><br><span class="line">获取元素文本：get_text()</span><br><span class="line">获取元素位置：element.location</span><br><span class="line">获取元素尺寸：element.size</span><br><span class="line"></span><br><span class="line"><span class="comment"># frame</span></span><br><span class="line">switch_to.frame(<span class="string">'frameid'</span>) </span><br><span class="line">switch_to.default_coutent()</span><br></pre></td></tr></table></figure>

<h2 id="4、qq空间模拟登陆"><a href="#4、qq空间模拟登陆" class="headerlink" title="4、qq空间模拟登陆"></a>4、qq空间模拟登陆</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 实例化浏览器对象</span></span><br><span class="line">browser = webdriver.Chrome(<span class="string">'./chromedriver.exe'</span>)</span><br><span class="line"><span class="comment"># 打开qq空间登陆页面</span></span><br><span class="line">browser.get(<span class="string">'https://qzone.qq.com/'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 转至frame子页面</span></span><br><span class="line">browser.switch_to.frame(<span class="string">'login_frame'</span>)</span><br><span class="line"><span class="comment"># 获取密码登陆选项并点击</span></span><br><span class="line">a_tag = browser.find_element_by_id(<span class="string">'switcher_plogin'</span>)</span><br><span class="line">a_tag.click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 获取账号输入框并输入账号</span></span><br><span class="line">browser.find_element_by_id(<span class="string">'u'</span>).clear()</span><br><span class="line">user = browser.find_element_by_id(<span class="string">'u'</span>)</span><br><span class="line">user.send_keys(<span class="string">'3338003899'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 获取密码输入框并输入密码</span></span><br><span class="line">browser.find_element_by_id(<span class="string">'p'</span>).clear()</span><br><span class="line">pwd = browser.find_element_by_id(<span class="string">'p'</span>)</span><br><span class="line">pwd.send_keys(<span class="string">'qq123456'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 获取登陆按钮并单击</span></span><br><span class="line">button = browser.find_element_by_id(<span class="string">'login_button'</span>)</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure>

<h2 id="5、PhantomJS浏览器使用"><a href="#5、PhantomJS浏览器使用" class="headerlink" title="5、PhantomJS浏览器使用"></a>5、PhantomJS浏览器使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PhantomJS下载及配置环境变量</span></span><br><span class="line">	- 下载, 直接解压</span><br><span class="line">	- 将解压文件的bin目录添加至环境变量</span><br><span class="line">    </span><br><span class="line"><span class="comment"># PhantomJS无界面浏览器</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.PhantomJS()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'baidu_phantomjs.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(browser.page_source)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 谷歌无头浏览器</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">print(browser.page_source)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'baidu_headerless.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(browser.page_source)</span><br></pre></td></tr></table></figure>

<h2 id="6、图片懒加载"><a href="#6、图片懒加载" class="headerlink" title="6、图片懒加载"></a>6、图片懒加载</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">url = <span class="string">'http://sc.chinaz.com/tupian/index.html'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"USer-Agent"</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url=url, headers=headers)</span><br><span class="line">res.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="comment"># print(res.text)</span></span><br><span class="line">tree = etree.HTML(res.text)</span><br><span class="line"></span><br><span class="line">src_list = tree.xpath(<span class="string">'//div[contains(@class,"box")]/div/a/img/@src2'</span>)</span><br><span class="line"><span class="keyword">for</span> url_img <span class="keyword">in</span> src_list:</span><br><span class="line">    request.urlretrieve(url_img,<span class="string">'%s.jpg'</span>%src_list.index(url_img))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(<span class="string">'./chromedriver.exe'</span>)</span><br><span class="line">browser.get(<span class="string">'http://image.baidu.com/'</span>)</span><br><span class="line">search = browser.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">search.send_keys(<span class="string">'安琪拉'</span>)</span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">'s_search'</span>)</span><br><span class="line">button.click()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">text = browser.page_source</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'baidu_pic.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'./baidu_pic.html'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">li_list = soup.select(<span class="string">'.imgpage ul li'</span>)</span><br><span class="line"><span class="keyword">for</span> url_img <span class="keyword">in</span> li_list:</span><br><span class="line">    url_img = url_img[<span class="string">'data-objurl'</span>]</span><br><span class="line">    print(url_img)</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 作业:雪球网首页, 抓取推荐咨询的每一条标题与详情页链接(使用selenium模拟鼠标向下滑动)</span></span><br><span class="line">https://xueqiu.com/</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 默写:</span></span><br><span class="line">    <span class="comment"># 实例化浏览器对象:</span></span><br><span class="line">    <span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">    browser = webdriver.Chrome(<span class="string">'driverpath'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送get请求:</span></span><br><span class="line">    browser.get(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取页面元素:</span></span><br><span class="line">    find_element_by_id</span><br><span class="line">    find_element_by_xpath</span><br><span class="line">    find_element_by_name</span><br><span class="line">    find_element_by_class_name</span><br><span class="line">    find_element_by_css_selector</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交互操作:</span></span><br><span class="line">    click(): 点击</span><br><span class="line">    send_keys(): 输入内容</span><br><span class="line">    clear(): 清空操作</span><br><span class="line">    execute_script(js): 执行指定的js代码</span><br><span class="line">    <span class="comment"># JS代码: window.scrollTo(0, document.body.scrollHeight)可以模拟鼠标滚动一屏高度</span></span><br><span class="line">    quit(): 退出浏览器</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取网页的数据:</span></span><br><span class="line">    browser.page_source   ---&gt;  str类型</span><br></pre></td></tr></table></figure>

<h2 id="7、扩展鼠标操作"><a href="#7、扩展鼠标操作" class="headerlink" title="7、扩展鼠标操作"></a>7、扩展鼠标操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ActionChains类里面的方法行为：</span><br><span class="line">初始化的时候需要传driver 对象，内置的一个空列表中：（译：）</span><br><span class="line"></span><br><span class="line">    perform：执行所有的行为</span><br><span class="line">        （译：泼峰）执行所有存储的操作</span><br><span class="line">    reset_actions：将整个列表清空</span><br><span class="line">        （译：瑞斯特.安可深思）清除已在本地和远程端存储的操作　　</span><br><span class="line">    click：点击</span><br><span class="line">        （译：可立克）点击一个元素。　　</span><br><span class="line">    click_and_hold：拖拽</span><br><span class="line">        （译：可立克.按得.后的）按住元素上的鼠标左键。不松　　</span><br><span class="line">    context_click：右击</span><br><span class="line">        （译：康泰克斯特.可立克）对元素执行上下文单击(右击)。　　</span><br><span class="line">    double_click：双击</span><br><span class="line">        （译：大泊儿.可立克）双击其中的一个元素。</span><br><span class="line">    drag_and_drop：拖拽到目标后松开</span><br><span class="line">        （译：转个.按得.赵坡）按住源元素上的鼠标左键，然后移动到目标元素并释放鼠标按钮。　　　　</span><br><span class="line">    drag_and_drop_by_offset：偏移拖拽</span><br><span class="line">        （译：转个.按得.赵坡.白.奥佛赛特）按住源元素上的鼠标左键，然后移动到目标偏移量并释放鼠标按钮。　　　</span><br><span class="line">    key_down：在一个元素上按住一个键不松</span><br><span class="line">        （译：k当）只发送一个按键，不释放它。只能与修改键(控制，Ctrl、Alt和Shift)一起使用。　　</span><br><span class="line">    key_up： 松开按键</span><br><span class="line">        （译：K阿婆）释放修改键。　　</span><br><span class="line">    move_by_offset：鼠标移动</span><br><span class="line">        （译：目.白.奥佛赛特）将鼠标移动到当前鼠标位置的偏移量。　　</span><br><span class="line">    move_to_element：鼠标悬浮</span><br><span class="line">        （译：目.图.按了们特）将鼠标移动到元素的中间。　　</span><br><span class="line">    move_to_element_with_offset：鼠标坐标偏移</span><br><span class="line">        （译：目.图.按了们特.位子.奥佛赛特）将鼠标移动指定元素的偏移量。偏移量相对于元素的左上角。　　</span><br><span class="line">    pause：暂停</span><br><span class="line">        （译：普斯）在指定的持续时间内暂停所有输入(以秒为单位)--每个动作执行后需要暂停几秒不执行之后操作　　</span><br><span class="line">    release：松开</span><br><span class="line">        （译：瑞丽斯）释放元素上被按住的鼠标按钮。　　</span><br><span class="line">    send_keys：输入</span><br><span class="line">        （译：森德.K死）向元素发送键。　　</span><br><span class="line">    send_keys_to_element：在元素上输入文本</span><br><span class="line">        （译：森德.K死.图.按了们特）</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">案例：登录自动验证滑块验证码</span><br><span class="line">url = <span class="string">"http://localhost:8080/login"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本人使用的是火狐浏览器</span></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动访问爬取页面</span></span><br><span class="line">browser.get(url=url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取username输入框</span></span><br><span class="line">username = browser.find_element_by_xpath(<span class="string">'/html/body/div/div/section/div/div[1]/input'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取password输入框</span></span><br><span class="line">password = browser.find_element_by_xpath(<span class="string">'/html/body/div/div/section/div/div[2]/input'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取滑动块按钮，注意：获取的是滑动块中那个会移动的按钮，并未滑动块</span></span><br><span class="line">div = browser.find_element_by_xpath(<span class="string">"/html/body/div/div/section/div/center/div/div/div[3]"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取登录按钮</span></span><br><span class="line">login = browser.find_element_by_xpath(<span class="string">"/html/body/div/div/section/div/div[3]/button"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户为123，自动填充到用户框中</span></span><br><span class="line">username.send_keys(“<span class="number">123</span>”)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密码为123，自动填充到密码框中</span></span><br><span class="line">password.send_keys(“<span class="number">123</span>”)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用鼠标操作模块ActionChains，详情请访问链接：https://www.cnblogs.com/shouhu/p/12205169.html</span></span><br><span class="line">active = ActionChains(browser)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标左键点击目标，且不松开</span></span><br><span class="line">active.click_and_hold(div).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将滑动按钮移动到目标位置后松开鼠标左键，release()方法为松开鼠标左键</span></span><br><span class="line"><span class="comment"># 参数xoffset为滑动的左右长度及横轴，yoffset为滑动的上下的高度及纵轴</span></span><br><span class="line">active.move_by_offset(xoffset=<span class="number">250</span>, yoffset=<span class="number">0</span>).release().perform()</span><br><span class="line"><span class="comment"># 自动点击登录</span></span><br><span class="line">login.click()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Selenuim</tag>
      </tags>
  </entry>
  <entry>
    <title>sceapy框架</title>
    <url>/2020/05/17/Spider/sceapy%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="1、scrapy安装与环境依赖"><a href="#1、scrapy安装与环境依赖" class="headerlink" title="1、scrapy安装与环境依赖"></a>1、scrapy安装与环境依赖</h2><p>　　1.在安装scrapy前需要安装好相应的依赖库, 再安装scrapy, 具体安装步骤如下:</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>).安装lxml库: pip install lxml</span><br><span class="line">(<span class="number">2</span>).安装wheel: pip install wheel</span><br><span class="line">(<span class="number">3</span>).安装twisted: pip install twisted文件路径</span><br><span class="line">	(twisted需下载后本地安装,下载地址:http://www.lfd.uci.edu/~gohlke/pythonlibs/<span class="comment">#twisted)</span></span><br><span class="line">	(版本选择如下图,版本后面有解释,请根据自己实际选择)</span><br><span class="line">(<span class="number">4</span>).安装pywin32: pip install pywin32</span><br><span class="line">	(注意:以上安装步骤一定要确保每一步安装都成功,没有报错信息,如有报错自行百度解决)</span><br><span class="line">(<span class="number">5</span>).安装scrapy: pip install scrapy</span><br><span class="line">	(注意:以上安装步骤一定要确保每一步安装都成功,没有报错信息,如有报错自行百度解决)</span><br><span class="line">(<span class="number">6</span>).成功验证:在cmd命令行输入scrapy,显示Scrapy1<span class="number">.6</span><span class="number">.0</span>-no active project,证明安装成功</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/tian_yu_ting/blog_img/raw/master/sceapy.png">

<h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p>　　1.手动创建一个目录test<br>　　2.在test文件夹下创建爬虫项目为spiderpro: scrapy startproject spiderpro<br>　　3.进入项目文件夹: cd spiderpro<br>　　4.创建爬虫文件: scrapy genspider 爬虫名 域名</p>
<h2 id="3、项目目录介绍"><a href="#3、项目目录介绍" class="headerlink" title="3、项目目录介绍"></a>3、项目目录介绍</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spiderpro</span><br><span class="line">　　spiderpro <span class="comment"># 项目目录</span></span><br><span class="line">　　　　__init__</span><br><span class="line">　　　　spiders:爬虫文件目录</span><br><span class="line">　　　　　　__init__</span><br><span class="line">　　　　　　tests.py:爬虫文件</span><br><span class="line">　　　　items.py:定义爬取数据持久化的数据结构</span><br><span class="line">　　　　middlewares.py:定义中间件</span><br><span class="line">　　　　pipelines.py:管道,持久化存储相关</span><br><span class="line">　　　　settings.py:配置文件</span><br><span class="line">　　venv:虚拟环境目录</span><br><span class="line">　 scrapy.cfg: scrapy项目配置文件</span><br></pre></td></tr></table></figure>

<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>　　(1).spiders:其内包含一个个Spider的实现, 每个Spider是一个单独的文件<br>　　(2).items.py:它定义了Item数据结构, 爬取到的数据存储为哪些字段<br>　　(3).pipelines.py:它定义Item Pipeline的实现<br>　　(4).settings.py:项目的全局配置<br>　　(5).middlewares.py:定义中间件, 包括爬虫中间件和下载中间件<br>　　(6).scrapy.cfg:它是scrapy项目的配置文件, 其内定义了项目的配置路径, 部署相关的信息等</p>
<h2 id="4、scrapy框架介绍-5大核心组件与数据流向"><a href="#4、scrapy框架介绍-5大核心组件与数据流向" class="headerlink" title="4、scrapy框架介绍: 5大核心组件与数据流向"></a>4、scrapy框架介绍: 5大核心组件与数据流向</h2><img src="https://gitee.com/tian_yu_ting/blog_img/raw/master/sceapy2.png" style="zoom:70%">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>).架构:</span><br><span class="line"></span><br><span class="line">　　Scrapy Engine: 这是引擎，负责Spiders、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等等!</span><br><span class="line"></span><br><span class="line">　　Scheduler(调度器): 它负责接受引擎发送过来的requests请求，并按照一定的方式进行整理排列，入队、并等待Scrapy Engine(引擎)来请求时，交给引擎。</span><br><span class="line"></span><br><span class="line">　　Downloader（下载器)：负责下载Scrapy Engine(引擎)发送的所有Requests请求，并将其获取到的Responses交还给Scrapy Engine(引擎)，由引擎交给Spiders来处理，</span><br><span class="line"></span><br><span class="line">　　Spiders：它负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给引擎，再次进入Scheduler(调度器)，</span><br><span class="line"></span><br><span class="line">　　Item Pipeline：它负责处理Spiders中获取到的Item，并进行处理，比如去重，持久化存储（存数据库，写入文件，总之就是保存数据用的）</span><br><span class="line"></span><br><span class="line">　　Downloader Middlewares(下载中间件)：你可以当作是一个可以自定义扩展下载功能的组件</span><br><span class="line"></span><br><span class="line">　　Spider Middlewares(Spider中间件)：你可以理解为是一个可以自定扩展和操作引擎和Spiders中间‘通信‘的功能组件（比如进入Spiders的Responses;和从Spiders出去的Requests）</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">2</span>).工作流:</span><br><span class="line"></span><br><span class="line">　　<span class="number">1.</span>spider将请求发送给引擎, 引擎将request发送给调度器进行请求调度</span><br><span class="line"></span><br><span class="line">　　<span class="number">2.</span>调度器把接下来要请求的request发送给引擎, 引擎传递给下载器, 中间会途径下载中间件</span><br><span class="line"></span><br><span class="line">　　<span class="number">3.</span>下载携带request访问服务器, 并将爬取内容response返回给引擎, 引擎将response返回给spider</span><br><span class="line"></span><br><span class="line">　　<span class="number">4.</span>spider将response传递给自己的parse进行数据解析处理及构建item一系列的工作, 最后将item返回给引擎, 引擎传递个pipeline</span><br><span class="line"></span><br><span class="line">　　<span class="number">5.</span>pipe获取到item后进行数据持久化</span><br><span class="line"></span><br><span class="line">　　<span class="number">6.</span>以上过程不断循环直至爬虫程序终止</span><br></pre></td></tr></table></figure>

<h2 id="5、使用scrapy框架爬取糗百"><a href="#5、使用scrapy框架爬取糗百" class="headerlink" title="5、使用scrapy框架爬取糗百"></a>5、使用scrapy框架爬取糗百</h2><p>　　需求: 爬取糗事百科热门板块,每一条的标题,好笑,评论条数及作者信息,解析爬取的信息数据,定制item数据存储结构,最终将数据存储于MongoDB数据库中.<br>　　创建项目:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scrapy startproject qsbk <span class="comment"># 创建项目</span></span><br><span class="line">cd qsbk <span class="comment"># 切换到项目目录</span></span><br><span class="line">scrapy genspider qsbk_hot www.qiushibaike.com <span class="comment"># 创建爬虫文件, qsbk_hot为爬虫名, www...com为爬取范围</span></span><br></pre></td></tr></table></figure>

<p>　　item文件定义数据存储的字段:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    title = scrapy.Field()  <span class="comment"># 标题</span></span><br><span class="line">    lau = scrapy.Field()  <span class="comment"># 好笑数</span></span><br><span class="line">    comment = scrapy.Field()  <span class="comment"># 评论数</span></span><br><span class="line">    auth = scrapy.Field()  <span class="comment"># 作者</span></span><br></pre></td></tr></table></figure>

<p>　　spider文件中定义解析数据的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkHotSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">	name =<span class="string">'qsbk_hot'</span></span><br><span class="line">	<span class="comment"># allowed_domains = ['www.qiushibaike.com'] # 无用, 可注释掉</span></span><br><span class="line">	start_urls =[<span class="string">'http://www.qiushibaike.com/'</span>]</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 思路:一条热点数据在前端中对应一个li标签, 将一页中的所有li标签取出, 再进一步操作</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line"></span><br><span class="line">		li_list = response.selector.xpath(<span class="string">'//div[@class="recommend-article"]/ul/li'</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 循环li标签组成的列表, 先实例化item, 再取需要的字段, 并该item对象的相应属性赋值</span></span><br><span class="line">		<span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line"></span><br><span class="line">			<span class="comment"># 实例化item对象</span></span><br><span class="line">			item =QsbkItem()</span><br><span class="line"></span><br><span class="line">			<span class="comment"># 解析获取title(标题), lau(好笑数), comment(评论数), auth(作者)等信息</span></span><br><span class="line">			title = li.xpath(<span class="string">'./div[@class="recmd-right"]/a/text()'</span>).extract_first()</span><br><span class="line">			lau = li.xpath(<span class="string">'./div[@class="recmd-right"]/div[@class="recmd-detail clearfix"]/div/span[1]/text()'</span>).extract_first()</span><br><span class="line">			comment = li.xpath(<span class="string">'./div[@class="recmd-right"]/div[@class="recmd-detail clearfix"]/div/span[4]/text()'</span>).extract_first()</span><br><span class="line">			auth = li.xpath(<span class="string">'./div[@class="recmd-right"]/div[@class="recmd-detail clearfix"]/a/span/text()'</span>).extract_first()</span><br><span class="line"></span><br><span class="line">			<span class="comment"># 因为部分热点数据还没有评论和好笑数, 所以需对数据进行处理</span></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> lau:</span><br><span class="line">				lau =<span class="literal">None</span></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> comment:</span><br><span class="line">				comment =<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">			<span class="comment"># 将字段的值存储在item的属性中</span></span><br><span class="line">            item[<span class="string">"title"</span>]= title</span><br><span class="line">            item[<span class="string">"lau"</span>]= lau</span><br><span class="line">            item[<span class="string">"comment"</span>]= comment</span><br><span class="line">            item[<span class="string">"auth"</span>]= auth</span><br><span class="line"></span><br><span class="line">			<span class="comment"># 返回item, 框架会自动将item传送至pipeline中的指定类</span></span><br><span class="line">			<span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>

<p>　　在pipeline中定义管道类进行数据的存储</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">classQsbkPipeline(object):</span><br><span class="line">　　<span class="comment"># 连接MongoDB数据库</span></span><br><span class="line">	conn = pymongo.MongoClient(<span class="string">"localhost"</span>, <span class="number">27017</span>)</span><br><span class="line">	db = conn.qiubai</span><br><span class="line">	table = db.qb_hot</span><br><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">　　　　<span class="comment"># 向数据库中出入数据</span></span><br><span class="line">　　　　self.table.insert(dict(item))</span><br><span class="line"></span><br><span class="line">　　　　<span class="comment"># 此处return item是为了下一个管道类能够接收到item进行存储</span></span><br><span class="line">　　　　<span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self)</span>:</span></span><br><span class="line">　　　　<span class="comment"># 关闭数据库连接</span></span><br><span class="line">　　　　self.conn.close()</span><br></pre></td></tr></table></figure>

<p>　　此示例中配置文件中的配置的项, 注意是不是全部的配置, 是针对该项目增加或修改的配置项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 忽略robots协议</span></span><br><span class="line">ROBOTSTXT_OBEY =<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UA伪装</span></span><br><span class="line">USER_AGENT = <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.87 Safari/537.36'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管道类的注册配置</span></span><br><span class="line">ITEM_PIPELINES =&#123;</span><br><span class="line"><span class="string">'qsbk.pipelines.QsbkPipeline'</span>:<span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、scrapy爬取校花网人名与图片下载链接"><a href="#6、scrapy爬取校花网人名与图片下载链接" class="headerlink" title="6、scrapy爬取校花网人名与图片下载链接"></a>6、scrapy爬取校花网人名与图片下载链接</h2><p>　　需求: 爬取校花网大学校花的默认的第一页的所有图片src和人名, 并通过管道存入mongodb数据库<br>　　创建项目:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scrapy startproject xiaohuaspider <span class="comment"># 创建项目</span></span><br><span class="line">cd xiaohuaspider <span class="comment"># 切换到项目目录</span></span><br><span class="line">scrapy genspider hua www.baidu.com <span class="comment"># 创建爬虫文件, hua为爬虫名, www.baidu.com为爬取范围</span></span><br></pre></td></tr></table></figure>

<p>　　创建item类, 用于存储解析出的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaohuaspiderItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    src = scrapy.Field()</span><br></pre></td></tr></table></figure>

<p>　　spider中定义爬取的行为与解析数据的操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> XiaohuaspiderItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'hua'</span></span><br><span class="line">    <span class="comment"># allowed_domains = ['www.baidu.com']</span></span><br><span class="line">    start_urls = [<span class="string">'http://www.xiaohuar.com/hua/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        div_list = response.xpath(<span class="string">'//div[@class="img"]'</span>)</span><br><span class="line">        <span class="keyword">for</span> div <span class="keyword">in</span> div_list:</span><br><span class="line">            item = XiaohuaspiderItem()</span><br><span class="line">            name = div.xpath(<span class="string">'.//span/text()'</span>).extract_first()</span><br><span class="line">            src = div.xpath(<span class="string">'./a/img/@src'</span>).extract_first()</span><br><span class="line">            item[<span class="string">"name"</span>] = name</span><br><span class="line">            item[<span class="string">"src"</span>] = src</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>

<p>　　itemPipeline编码, 持久化数据到本地</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaohuaspiderPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    conn = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line">    db = conn.xiaohua</span><br><span class="line">    table = db.hua</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.table.insert(dict(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.conn.close()</span><br></pre></td></tr></table></figure>

<p>　　配置项:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># UA伪装:</span></span><br><span class="line">USER_AGENT = <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.87 Safari/537.36'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略robots协议:</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启管道类</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">'xiaohuaspider.pipelines.XiaohuaspiderPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Sceapy</tag>
      </tags>
  </entry>
  <entry>
    <title>requests高级部分 &amp; urllib简单介绍 &amp; 正则</title>
    <url>/2020/05/17/Spider/requests%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<h2 id="1、requests高级用法"><a href="#1、requests高级用法" class="headerlink" title="1、requests高级用法"></a>1、requests高级用法</h2><a id="more"></a>

<h2 id="1、1-文件上传功能"><a href="#1、1-文件上传功能" class="headerlink" title="1、1  文件上传功能"></a>1、1  文件上传功能</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义上传文件数据, 键为file, 值为文件句柄</span></span><br><span class="line">files = &#123;</span><br><span class="line"><span class="string">'file'</span>: open(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>)</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, files=files)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<h2 id="1、2-cookie处理"><a href="#1、2-cookie处理" class="headerlink" title="1、2  cookie处理"></a>1、2  cookie处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动处理cookie：</span></span><br><span class="line">	<span class="number">1.</span>headers添加cookie键值对</span><br><span class="line">	<span class="number">2.</span>RequestsCookieJar对象</span><br><span class="line"><span class="comment"># 自动处理cookie：Session</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># headers内添加cookie键值对处理cookie</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>:<span class="string">'BIDUPSID=E01FE1A1E9555174ABC136FBFBFDE674; PSTM=1575031812; BD_UPN=12314753; BAIDUID=580A55392F38BF9168294CCFB5F408C8:FG=1; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; yjs_js_security_passport=fed4dfca16fcc236aa3827bce130a90fcb7407bd_1576809267_js; COOKIE_SESSION=7114_0_9_7_8_5_0_0_9_3_0_0_7493_0_2_0_1576828833_0_1576828831%7C9%23951_22_1576726592%7C4; delPer=0; H_PS_PSSID=1458_21104_30211_30284_26350; BDUSS=VA4dG9aTExqY0ZsQkVPYkk2a3Z-TTlseWEteW9-ZkFZOHZ6TGZoN2VyRXVIU1JlRUFBQUFBJCQAAAAAAAAAAAEAAAB45WVmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6Q~F0ukPxdd; BD_HOME=1'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line">res = requests.get(url = url , headers = headers)</span><br><span class="line">res.encoding = <span class="string">'urf-8'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'baidu_login.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res.text)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RequestsCookieJar对象处理cookie: 用cookie维持百度登陆</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line">cookies = <span class="string">'BIDUPSID=E01FE1A1E9555174ABC136FBFBFDE674; PSTM=1575031812; BD_UPN=12314753; BAIDUID=580A55392F38BF9168294CCFB5F408C8:FG=1; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; yjs_js_security_passport=fed4dfca16fcc236aa3827bce130a90fcb7407bd_1576809267_js; COOKIE_SESSION=7114_0_9_7_8_5_0_0_9_3_0_0_7493_0_2_0_1576828833_0_1576828831%7C9%23951_22_1576726592%7C4; delPer=0; H_PS_PSSID=1458_21104_30211_30284_26350; BDUSS=VA4dG9aTExqY0ZsQkVPYkk2a3Z-TTlseWEteW9-ZkFZOHZ6TGZoN2VyRXVIU1JlRUFBQUFBJCQAAAAAAAAAAAEAAAB45WVmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC6Q~F0ukPxdd; BD_HOME=1'</span></span><br><span class="line">jar = requests.cookies.RequestsCookieJar()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookies.split(<span class="string">';'</span>):</span><br><span class="line">    key,value = item.split(<span class="string">'='</span>,<span class="number">1</span>)</span><br><span class="line">    jar.set(key,value)</span><br><span class="line"></span><br><span class="line">res = requests.get(url = url , headers = headers , cookies = jar)</span><br><span class="line">res.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'baidu.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res.text)	 <span class="comment"># 响应数据中包含用户名信息, 说明cookie生效</span></span><br></pre></td></tr></table></figure>

<h2 id="1、3-会话维持"><a href="#1、3-会话维持" class="headerlink" title="1、3  会话维持"></a>1、3  会话维持</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HTTP无状态:</span></span><br><span class="line">	使用requests模块中的get()和post()方法请求网页时, 每一次请求都是独立的, 没有连续请求之间的状态保持. 假象, 如果你登陆了淘宝后向查看订单, 那么如果没有状态的维持就无法实现.</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 会话的维持: Session对象</span></span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Session</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.renren.com/ajaxLogin/login?1=1&amp;uniqueTimestamp=20191151116375'</span></span><br><span class="line">session = Session()</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'email'</span>: <span class="string">'17679962330'</span>,</span><br><span class="line">    <span class="string">'icode'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'origURL'</span>: <span class="string">'http://www.renren.com/home'</span>,</span><br><span class="line">    <span class="string">'domain'</span>: <span class="string">'renren.com'</span>,</span><br><span class="line">    <span class="string">'key_id'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'captcha_type'</span>: <span class="string">'web_login'</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'4f099e818abe7310b77aa1b5f45e5e4084e4af309d90750e1d88bae39e85c828'</span>,</span><br><span class="line">    <span class="string">'rkey'</span>: <span class="string">'080f2e6d6b76e31a7ebc070c15096350'</span>,</span><br><span class="line">    <span class="string">'f'</span>: <span class="string">'http%3A%2F%2Fwww.renren.com%2F973125645%2Fnewsfeed%2Fphoto'</span>,</span><br><span class="line">&#125;</span><br><span class="line">res = session.post(url=url, headers=headers, data=data)</span><br><span class="line">ret = session.get(url=<span class="string">'http://www.renren.com/972036549/profile'</span>,data=data)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'renren.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(ret.text)</span><br></pre></td></tr></table></figure>

<h2 id="1、4-SSL证书验证"><a href="#1、4-SSL证书验证" class="headerlink" title="1、4  SSL证书验证"></a>1、4  SSL证书验证</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.SSL证书验证</span></span><br><span class="line">requests提供了证书验证的功能. 当发起HTTP请求时, 模块会检查SSL证书. 但检查的行为可以用verify参数来控制.</span><br><span class="line">	verify = <span class="literal">False</span>  <span class="comment"># 不检查SSL证书</span></span><br><span class="line">	verify = <span class="literal">True</span>  <span class="comment"># 检查SSL证书</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2.异常</span></span><br><span class="line">如果使用requests模块的SSL验证, 验证不通过会抛出异常, 此时可以将verify参数设置为<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.https://www.tutumanhua.com的证书验证</span></span><br><span class="line"><span class="comment"># 会抛出异常	requests.exceptions.SSLError</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">'https://www.tutumanhua.com'</span>)</span><br><span class="line">print(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不抛异常, 但会出现警告</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">'https://www.tutumanhua.com'</span>, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止警告</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.packages <span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line">response = requests.get(url=<span class="string">'https://www.tutumanhua.com'</span>, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终版</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.tutumanhua.com'</span></span><br><span class="line">requests.packages.urllib3.disable_warnings() </span><br><span class="line">res = requests.get(url=url, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">print(res.status_code)</span><br></pre></td></tr></table></figure>

<h2 id="1、5-代理设置"><a href="#1、5-代理设置" class="headerlink" title="1、5  代理设置"></a>1、5  代理设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代理: 代理即代理ip</span></span><br><span class="line">代理ip是指在请求的过程中使用非本机ip进行请求, 避免大数据量频繁请求的过程中出现ip封禁, 限制数据的爬取.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理ip分类:</span></span><br><span class="line">	<span class="number">1.</span>透明代理ip: 请求时, 服务器知道请求的真实ip, 知道请求使用了代理</span><br><span class="line">	<span class="number">2.</span>匿名代理ip: 请求时, 服务器知道请求使用了代理, 但不知道请求的真实ip</span><br><span class="line">	<span class="number">3.</span>高匿代理ip: 请求时, 服务器不知道请求使用了代理, 也不知道请求的真实ip</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=ip&amp;rsv_pq=a834758700059ab8&amp;rsv_t=60b33hUYnp%2F0I7P%2BFsy%2Fe0GZ9wIALM9f5WL12gftyn1dJvP7j9kOrAvyK7I&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=tb&amp;rsv_sug3=3&amp;rsv_sug1=3&amp;rsv_sug7=101&amp;rsv_sug2=0&amp;prefixsug=ip&amp;rsp=2&amp;inputT=1808&amp;rsv_sug4=2550'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span> : <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'https'</span> : <span class="string">'http://122.5.109.231:9999'</span>	<span class="comment"># 不管键是https，还是Http,后面的值都是http</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url=url,headers=headers,proxies=proxies)</span><br><span class="line">res.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<h2 id="1、6-超时设置"><a href="#1、6-超时设置" class="headerlink" title="1、6  超时设置"></a>1、6  超时设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 超时设置:</span></span><br><span class="line">	由于网络状况的不同, 服务器配置差异以及服务器处理并发的能力不同, 有时会出现服务器的响应时间过长, 甚至无法获取响应而抛出异常. requests模块发送请求可以设置超时时间, 在超时时间内未得到响应, 便会抛出异常.</span><br><span class="line">    一方面, 减少了请求的阻塞时间, 一方面, 可以进行异常处理, 执行相应的操作.</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    res = requests.get(url=url, headers=headers,timeout=<span class="number">0.1</span>)</span><br><span class="line">    res.encoding = <span class="string">'utf-8'</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'baidu_1.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(res.text)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'爬取超时'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="1、7-构建Request对象"><a href="#1、7-构建Request对象" class="headerlink" title="1、7  构建Request对象"></a>1、7  构建Request对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.Prepared Request</span></span><br><span class="line">利用 Prepared Request 数据结构构件Request对象. 其构建及使用步骤如下:</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request, Session</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建Request对象</span></span><br><span class="line">url = <span class="string">'...'</span></span><br><span class="line">data = &#123;...</span><br><span class="line">&#125;</span><br><span class="line">params = &#123;...</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;...</span><br><span class="line">&#125;</span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建post请求:</span></span><br><span class="line">req_post = Request(method=<span class="string">'POST'</span>, url=url, headers=headers, data=data)</span><br><span class="line">req_obj_post = session.prepare_request(req_post)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建get请求:</span></span><br><span class="line">req_get = Request(method=<span class="string">'GET'</span>, url=url, headers=headers, params=params)</span><br><span class="line">req_obj_get = session.prepare_request(req_get)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用构建的请求对象, 向服务器发送请求</span></span><br><span class="line">res = session.send(req_obj_post)</span><br><span class="line">res = session.send(req_obj_get)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用:</span></span><br><span class="line">通过此方法, 我们可以构建一个独立的request对象, 当需要请求的url很多时, 我们可以为每一个url构建一个request对象, 将所有request对象置于队列中, 便于调度.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建request对象, 请求糗事百科获取页面</span></span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request, Session</span><br><span class="line">url = <span class="string">'https://www.qiushibaike.com/'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">session = Session()</span><br><span class="line">req_get = Request(url=url, headers=headers, method=<span class="string">'GET'</span>)</span><br><span class="line">req_get_obj = session.prepare_request(req_get)</span><br><span class="line">res = session.send(req_get_obj)</span><br><span class="line">res.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'qb_reqobj.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res.text)</span><br></pre></td></tr></table></figure>

<h2 id="2、urllib简单介绍"><a href="#2、urllib简单介绍" class="headerlink" title="2、urllib简单介绍"></a>2、urllib简单介绍</h2><p>　　1.urllib模块是Python的一个请求模块<br>　　2.Python2中是urllib和urllib2相结合实现请求的发送. Python3中同一为urllib库<br>　　3.urllib是Python内置的请求库, 其包含4个模块:<br>　　　　(1).request模块: 模拟发送请求<br>　　　　(2).error模块: 异常处理模块<br>　　　　(3).parse模块: 工具模块, 提供关于URL的处理方法, 如拆分, 解析, 合并等<br>　　　　(4).robotparser模块: 识别robots协议</p>
<h2 id="3-正则"><a href="#3-正则" class="headerlink" title="3.正则"></a>3.正则</h2><h2 id="3、1-元字符匹配"><a href="#3、1-元字符匹配" class="headerlink" title="3、1  元字符匹配"></a>3、1  元字符匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.     匹配任意字符，除了换行符</span><br><span class="line"></span><br><span class="line">[]    用来表示一组字符,单独列出：[abc] 匹配 <span class="string">'a'</span>，<span class="string">'b'</span>或<span class="string">'c'</span></span><br><span class="line"></span><br><span class="line">[^...]	匹配除了字符组中字符的所有字符</span><br><span class="line"></span><br><span class="line">\d    匹配任意数字，等价于 [<span class="number">0</span><span class="number">-9</span>].</span><br><span class="line"></span><br><span class="line">\D    匹配任意非数字</span><br><span class="line"></span><br><span class="line">\w    匹配字母数字及下划线</span><br><span class="line"></span><br><span class="line">\W    匹配非字母数字及下划线</span><br><span class="line"></span><br><span class="line">\s    匹配任意空白字符，等价于 [\t\n\r\f].</span><br><span class="line"></span><br><span class="line">\S    匹配任意非空字符</span><br></pre></td></tr></table></figure>

<h2 id="3、2-字符组-要求在一个位置匹配的字符可能出现很多种情况-各种情况组成一个组"><a href="#3、2-字符组-要求在一个位置匹配的字符可能出现很多种情况-各种情况组成一个组" class="headerlink" title="3、2  字符组: 要求在一个位置匹配的字符可能出现很多种情况, 各种情况组成一个组"></a>3、2  字符组: 要求在一个位置匹配的字符可能出现很多种情况, 各种情况组成一个组</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[<span class="number">0123456789</span>]: 匹配<span class="number">0</span>到<span class="number">9</span>任意字符</span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>]: 同上</span><br><span class="line">[a-z]: 匹配a到z的任意小写字母</span><br><span class="line">[A-Z]: 匹配A到Z的任意大写字母</span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>a-fA-F]: 以上三种的组合, 匹配<span class="number">0</span><span class="number">-9</span>任意数组或a到f之间任意字母, 不区分大小写</span><br><span class="line">自定义字符组:[a3h5]  ---&gt;  代表匹配a, 3, h, 5等字符</span><br></pre></td></tr></table></figure>

<h2 id="3、3-量词"><a href="#3、3-量词" class="headerlink" title="3、3  量词:"></a>3、3  量词:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">*  		重复零次或更多次</span><br><span class="line">+		重复一次或更多次</span><br><span class="line">?		重复零次或一次</span><br><span class="line">&#123;n&#125;		重复n次</span><br><span class="line">&#123;n,&#125;	重复n次或更多次</span><br><span class="line">&#123;n,m&#125;	重复n到m次</span><br></pre></td></tr></table></figure>

<h2 id="3、4-边界修饰符"><a href="#3、4-边界修饰符" class="headerlink" title="3、4  边界修饰符"></a>3、4  边界修饰符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">^		匹配开始</span><br><span class="line">$		匹配结尾</span><br></pre></td></tr></table></figure>

<h2 id="3、5-分组"><a href="#3、5-分组" class="headerlink" title="3、5  分组"></a>3、5  分组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在正则表达式中添加(), 就形成了一个分组, 在re模块中优先匹配显示分组内容</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">"&lt;a href='www.baidu.com'&gt;正则匹配实验&lt;/a&gt;"</span></span><br><span class="line">res = re.findall(<span class="string">"href='(.*)'&gt;"</span>, s)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h2 id="3、6-匹配模式"><a href="#3、6-匹配模式" class="headerlink" title="3、6  匹配模式"></a>3、6  匹配模式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.S  单行模式</span><br><span class="line">re.M  多行模式	</span><br><span class="line">re.I   忽略大小写</span><br></pre></td></tr></table></figure>

<h2 id="3、7-婪匹配与非贪婪匹配"><a href="#3、7-婪匹配与非贪婪匹配" class="headerlink" title="3、7  婪匹配与非贪婪匹配"></a>3、7  婪匹配与非贪婪匹配</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">贪婪匹配是指: 在使用量词:  * ,  +  等时, 尽可能多的匹配内容</span><br><span class="line">非贪婪匹配是指: 使用?对正则表达式进行修饰, 使量词的匹配尽可能少, 如+代表匹配1次或多次, 在?的修饰下, 只匹配1次.</span><br></pre></td></tr></table></figure>

<h2 id="3、8-re模块"><a href="#3、8-re模块" class="headerlink" title="3、8  re模块"></a>3、8  re模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>re.findall(<span class="string">'正则表达式'</span>, <span class="string">'待匹配字符串'</span>): 以列表形式返回所有满足匹配条件的结果, </span><br><span class="line"><span class="number">2.</span>re.search(<span class="string">'正则表达式'</span>, <span class="string">'带匹配字符串'</span>): 匹配到第一个就返回一个对象, 该对象使用group()进行取值, 如果未匹配到则返回<span class="literal">None</span></span><br><span class="line"><span class="number">3.</span>re.match(<span class="string">'正则表达式'</span>, <span class="string">'待匹配字符串'</span>): 从字符串开头进行匹配, 如果匹配成功返回一个对象,同样使用group()进行取值, 匹配不成功返回<span class="literal">None</span></span><br><span class="line"><span class="number">4.</span>re.compile(<span class="string">'正则表达式'</span>): 将正则表达式编译为对象, 但需要按该正则表达式匹配是可以在直接使用该对象调用以上方法即可.</span><br></pre></td></tr></table></figure>

<h2 id="3、9-利用正则表达式抓取图片"><a href="#3、9-利用正则表达式抓取图片" class="headerlink" title="3、9  利用正则表达式抓取图片"></a>3、9  利用正则表达式抓取图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求url, 抓取页面</span></span><br><span class="line">url = <span class="string">'http://www.win4000.com/zt/gaoqing.html'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url=url, headers=headers)</span><br><span class="line"><span class="comment"># 利用正则匹配页面中的img标签, 获取其src属性值</span></span><br><span class="line">ret = re.findall(<span class="string">r'&lt;ul class="clearfix"&gt;.*?&lt;/ul&gt;'</span>,res.text,re.S)[<span class="number">1</span>]</span><br><span class="line">url1 = re.findall(<span class="string">r'http://pic1.win4000.com/.*?\.jpg'</span>,ret)</span><br><span class="line"><span class="comment"># 遍历获取到的图片连接, 处理连接为完整的url, 再次请求抓取图片二进制流数据, 写入文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> url1:</span><br><span class="line">    content = requests.get(url=url,headers=headers).content</span><br><span class="line">    name = i.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./imgs/%name'</span> % name,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Requests</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB的使用</title>
    <url>/2020/05/17/Spider/MongoDB%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="1、MongoDB数据库操作"><a href="#1、MongoDB数据库操作" class="headerlink" title="1、MongoDB数据库操作"></a>1、MongoDB数据库操作</h2><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;常用操作:</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1.查看数据库</span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.创建并使用数据库</span><br><span class="line">use tst</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.查看当前工作的数据库</span><br><span class="line">db</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建表</span><br><span class="line">db.createCollection(&#39;表名&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 4.创建集合并插入一条数据</span><br><span class="line">db.goods.insert(&#123;&quot;name&quot;:&quot;辣条&quot;, &quot;price&quot;:0.5&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 5.查看所有表</span><br><span class="line">show tables</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 6.查询表中所有数据</span><br><span class="line">db.goods.find()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 格式化输出查询数据(可以按格式输出查询数据)</span><br><span class="line">db.goods.find().pretty()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 7.删除表操作</span><br><span class="line">db.goods.drop()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 8.删除数据库</span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加数据操作:</span></span><br><span class="line">db.tablename.insert(&#123;dict&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例: 增加数据操作:</span></span><br><span class="line">db.goods.insert(&#123;<span class="string">"name"</span>:<span class="string">"辣条"</span>, <span class="string">"price"</span>:<span class="number">0.5</span>&#125;)</span><br><span class="line">db.goods.insert(&#123;<span class="string">"name"</span>:<span class="string">"辣条"</span>, <span class="string">"price"</span>:<span class="number">1</span>&#125;)</span><br><span class="line">db.goods.insert(&#123;<span class="string">"name"</span>:<span class="string">"干脆面"</span>, <span class="string">"price"</span>:<span class="number">0.5</span>&#125;)</span><br><span class="line">db.goods.insertOne(&#123;<span class="string">"name"</span>:<span class="string">"单身狗粮"</span>, <span class="string">"price"</span>:<span class="number">4.5</span>&#125;)</span><br><span class="line">db.goods.insertMany([&#123;<span class="string">"name"</span>:<span class="string">"小洋人"</span>, <span class="string">"price"</span>:<span class="number">3.5</span>&#125;, &#123;<span class="string">"name"</span>:<span class="string">"麦香鸡块"</span>, <span class="string">"price"</span>:<span class="number">5.5</span>&#125;])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询数据操作:</span></span><br><span class="line">db.tablename.find(&#123;dict&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例:查询操作</span></span><br><span class="line">    <span class="comment"># 1.简单查询操作:</span></span><br><span class="line">    db.goods.find().limit(<span class="number">4</span>).sort(&#123;<span class="string">"price"</span>:<span class="number">1</span>&#125;)        // sort(<span class="string">"定位的键"</span>:+<span class="number">-1</span>):用于对查询结果进行排序, <span class="number">1</span>升序, <span class="number">-1</span>降序</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.条件查询:db.tablename.find(&#123;"定位的键":"值"&#125;)</span></span><br><span class="line">    db.goods.find(&#123;<span class="string">"name"</span>:<span class="string">"辣条"</span>&#125;)  // 等值查询</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.and 与 or</span></span><br><span class="line">    db.goods.find(&#123;<span class="string">"name"</span>:<span class="string">"辣条"</span>, <span class="string">"price"</span>:<span class="number">0.5</span>&#125;)  // <span class="keyword">and</span>查询:根据多个条件共同定位数据</span><br><span class="line">    db.goods.find(&#123;$<span class="keyword">or</span>:[&#123;<span class="string">"name"</span>:<span class="string">"辣条"</span>&#125;,&#123;<span class="string">"price"</span>:<span class="number">3.5</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.非等值查询:db.goods.find(&#123;"定位的键":&#123;$...:"值"&#125;)</span></span><br><span class="line">    db.goods.find(&#123;<span class="string">"price"</span>:&#123;$gt:<span class="number">0.5</span>&#125;&#125;)     // 大于: $gt   </span><br><span class="line"></span><br><span class="line">    db.goods.find(&#123;<span class="string">"price"</span>:&#123;$gte:<span class="number">4.5</span>&#125;&#125;)    // 大于等于: $gte</span><br><span class="line"></span><br><span class="line">    db.goods.find(&#123;<span class="string">"price"</span>:&#123;$lt:<span class="number">4.5</span>&#125;&#125;)     // 小于: $lt</span><br><span class="line"></span><br><span class="line">    db.goods.find(&#123;<span class="string">"price"</span>:&#123;$lte:<span class="number">4.5</span>&#125;&#125;)    // 小于等于: $lte</span><br><span class="line"></span><br><span class="line">    db.goods.find(&#123;<span class="string">"price"</span>:&#123;$ne:<span class="number">5.5</span>&#125;&#125;)    // 不等于: $ne</span><br><span class="line"></span><br><span class="line">    db.goods.find(&#123;<span class="string">"price"</span>:&#123;$lt:<span class="number">5.5</span>, $gt:<span class="number">0.5</span>&#125;&#125;)  //上下限范围查询</span><br><span class="line"></span><br><span class="line">    db.goods.find(&#123;$<span class="keyword">or</span>:[&#123;<span class="string">"price"</span>:&#123;$lt:<span class="number">3.5</span>&#125;&#125;, &#123;<span class="string">"price"</span>:&#123;$gt:<span class="number">4.5</span>&#125;&#125;]&#125;) // 非上下限范围查询</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新数据操作:</span></span><br><span class="line">db.table.update(&#123;定位字典&#125;, &#123;指定修改的键值&#125;)</span><br><span class="line"><span class="comment"># 示例:更新数据操作:</span></span><br><span class="line">	db.goods.update(&#123;<span class="string">"price"</span>:<span class="number">0.5</span>&#125;,&#123;$set:&#123;<span class="string">"price"</span>:<span class="number">5</span>&#125;&#125;)  </span><br><span class="line">        <span class="comment"># 参数中的第一个字典用于定位要修改的数据</span></span><br><span class="line">        <span class="comment"># 参数中的第二个字典是指定要更新已定位的数据</span></span><br><span class="line">        <span class="comment"># 第二个参数中的字典是指定要将哪个字段的修改为什么</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除数据操作:</span></span><br><span class="line">db.tablename.remove(&#123;定位字典&#125;)</span><br><span class="line"><span class="comment"># 示例:删除数据操作:</span></span><br><span class="line">db.goods.remove(&#123;<span class="string">"price"</span>:<span class="number">5</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="2、Python与mongo交互"><a href="#2、Python与mongo交互" class="headerlink" title="2、Python与mongo交互"></a>2、Python与mongo交互</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接MongoDB数据库</span></span><br><span class="line">conn = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建库</span></span><br><span class="line">db = conn.goods</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建集合</span></span><br><span class="line">table = db.snacks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据操作: 插入数据</span></span><br><span class="line">table.insert(dict)</span><br><span class="line">table.insert_one(dict)</span><br><span class="line">table.insert_many([dict1, dict2, dict3])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据操作: 查询数据</span></span><br><span class="line">table.find_one(&#123;dict&#125;)   <span class="comment"># 返回一个字典形式数据</span></span><br><span class="line">table.find()  <span class="comment"># 返回一个mongo对象, 需要使用for循环遍历取值</span></span><br><span class="line">table.find(&#123;dict&#125;)  <span class="comment"># 同上</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例:</span></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">conn = pymongo.MongoClient(<span class="string">"localhost"</span>, <span class="number">27017</span>)</span><br><span class="line">db = conn.tst</span><br><span class="line">table = db.goods</span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">table.insert(&#123;<span class="string">'name'</span>: <span class="string">"安慕希"</span>, <span class="string">"price"</span>:<span class="number">6</span>&#125;)</span><br><span class="line">table.insert_one(&#123;<span class="string">'name'</span>: <span class="string">"老干妈"</span>, <span class="string">"price"</span>:<span class="number">5.5</span>&#125;)</span><br><span class="line">table.insert_many([&#123;<span class="string">"name"</span>:<span class="string">"小浣熊"</span>, <span class="string">"price"</span>:<span class="number">1</span>&#125;, &#123;<span class="string">"name"</span>:<span class="string">"脉动"</span>, <span class="string">"price"</span>:<span class="number">4.5</span>&#125;])</span><br><span class="line">print(dir(table))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据:</span></span><br><span class="line">res_one = table.find_one(&#123;<span class="string">"name"</span>:<span class="string">"辣条"</span>&#125;)</span><br><span class="line">print(<span class="string">"find_one的查询结果:"</span>, res_one)</span><br><span class="line"></span><br><span class="line">res = table.find(&#123;<span class="string">"name"</span>:<span class="string">"辣条"</span>&#125;)  <span class="comment"># res = table.find()获得的查询结果类型及取值操作一样</span></span><br><span class="line">print(res)</span><br><span class="line">print(type(res))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 更新数据:</span></span><br><span class="line">table.update(&#123;<span class="string">"name"</span>:<span class="string">"单身狗粮"</span>&#125;,&#123;<span class="string">"$set"</span>:&#123;<span class="string">"name"</span>:<span class="string">"单身狗凉凉"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>BS4模块的使用</title>
    <url>/2020/05/17/Spider/bs4%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1、BS4库介绍及安装"><a href="#1、BS4库介绍及安装" class="headerlink" title="1、BS4库介绍及安装"></a>1、BS4库介绍及安装</h2><a id="more"></a>

<p>　　BeautifulSoup库介绍:<br>　　BeautifulSoup也是一个解析库<br>　　BS解析数据是依赖解析器的, BS支持的解析器有html.parser, lxml, xml, html5lib等, 其中lxml解析器解析速度快, 容错能力强.<br>　　BS现阶段应用的解析器多数是lxml<br>　　安装bs4：pip install bs4</p>
<h2 id="2、BS4编码流程"><a href="#2、BS4编码流程" class="headerlink" title="2、BS4编码流程"></a>2、BS4编码流程</h2><p>　　bs4 的编码流程:<br>　　from bs4 import BeautifulSoup<br>　　soup = BeautifulSoup(res.text, ‘lxml’)<br>　　tag = soup.select(“CSS选择器表达式”)   # 返回一个列表<br>　　tab = soup.find_all(name , attrs , text)</p>
<h2 id="3、选择器介绍"><a href="#3、选择器介绍" class="headerlink" title="3、选择器介绍"></a>3、选择器介绍</h2><p>　　选择器介绍：<br>　　　　1、节点选择器<br>　　　　2、方法选择器<br>　　　　3、CSS选择器</p>
<h2 id="3、1-节点选择器"><a href="#3、1-节点选择器" class="headerlink" title="3、1  节点选择器"></a>3、1  节点选择器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Title&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;a href="https://www.baidu.com"&gt;跳转到百度&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">ret = soup.select(<span class="string">'a'</span>)[<span class="number">0</span>]</span><br><span class="line">print(ret.string)	       <span class="comment"># 第一种方法---获取文本</span></span><br><span class="line">print(ret.get_text())	<span class="comment"># 第二种方法--获取文本</span></span><br><span class="line">print(ret[<span class="string">'href'</span>])		<span class="comment"># 获取链接</span></span><br></pre></td></tr></table></figure>

<h2 id="3、2-方法选择器"><a href="#3、2-方法选择器" class="headerlink" title="3、2  方法选择器"></a>3、2  方法选择器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">            &lt;h4&gt;BeautifulSoup练习&lt;/h4&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">        	这是一个div的直接子文本</span></span><br><span class="line"><span class="string">        	&lt;p&gt;这是一个段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">		&lt;a href="https://www.baidu.com"&gt;这是百度的跳转连接&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">            &lt;ul class="list" id="list-1"&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="element ele"&gt;第一个li标签&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="element"&gt;第二个li标签&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="element"&gt;第三个li标签&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">            &lt;ul class="list list-small"&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="element" name="english"&gt;one&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="element"&gt;two&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="element"&gt;123456789&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;测试多层级选择器&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment"># 方法选择器: find_all(name, attrs, text)</span></span><br><span class="line">ret1 = soup.find_all(name=<span class="string">'h4'</span>)[<span class="number">0</span>].string	<span class="comment"># find_all	name通过标签获取的是一个列表对象，[0]是取列表中的第一个元素，String是获取字符串文本</span></span><br><span class="line">print(ret1)	</span><br><span class="line">ret5 = soup.find(name=<span class="string">'h4'</span>).string		<span class="comment"># find	name通过标签获取的是一个字符串对象，string是获取字符串文本</span></span><br><span class="line">print(ret5)	</span><br><span class="line">ret2 = soup.find_all(attrs=&#123;<span class="string">'class'</span>: <span class="string">'element'</span>&#125;, limit=<span class="number">3</span>)	<span class="comment"># attrs是通过类对象获取对象，limit=3是只获取前三条</span></span><br><span class="line">print(ret2)</span><br><span class="line">ret3 = soup.find_all(text=<span class="string">'这是百度的跳转连接'</span>)	<span class="comment"># text是通过文本获取文本内容	(有点鸡肋)</span></span><br><span class="line">ret4 = soup.find_all(text=re.compile(<span class="string">r'\d+'</span>))	<span class="comment"># 正则表达式，获取数字文本</span></span><br><span class="line">print(ret4)</span><br></pre></td></tr></table></figure>

<h2 id="3、3-CSS选择器"><a href="#3、3-CSS选择器" class="headerlink" title="3、3  CSS选择器"></a>3、3  CSS选择器</h2><p>　　1.根据节点名及节点层次关系定位标签: 标签选择器 、类选择器、ID选择器、 层级选择器：单层级选择器、多层级选择器、嵌套选择</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup.select(<span class="string">'title'</span>)</span><br><span class="line">soup.select(<span class="string">'div &gt; ul &gt; li'</span>)   <span class="comment"># 单层级选择器</span></span><br><span class="line">soup.select(<span class="string">'div li'</span>)  <span class="comment"># 多层级选择器</span></span><br></pre></td></tr></table></figure>

<p>　　2.根据节点的class属性定位标签: class选择器(classical)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup.select(<span class="string">'.panel'</span>)</span><br></pre></td></tr></table></figure>

<p>　　3.根据id属性定位标签: id选择器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup.select(<span class="string">'#item'</span>)</span><br></pre></td></tr></table></figure>

<p>　　4.嵌套选择:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ul_list = soup.select(<span class="string">'ul'</span>)</span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> ul_list:</span><br><span class="line">  print(ul.select(<span class="string">'li'</span>))</span><br></pre></td></tr></table></figure>

<p>　　5.获取节点的文本或属性:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag_obj.string: 获取直接子文本--&gt;如果节点内有与直系文本平行的节点, 该方法拿到的是None</span><br><span class="line">tag_obj.get_text(): 获取子孙节点的所有文本</span><br><span class="line">tag_obj[<span class="string">'attribute'</span>]: 获取节点属性</span><br></pre></td></tr></table></figure>

<h2 id="练习示例"><a href="#练习示例" class="headerlink" title="练习示例:"></a>练习示例:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">            &lt;h4&gt;BeautifulSoup练习&lt;/h4&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="divtag"&gt;</span></span><br><span class="line"><span class="string">        	这是一个div的直接子文本</span></span><br><span class="line"><span class="string">        	&lt;p&gt;这是一个段落&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">		&lt;a href="https://www.baidu.com"&gt;这是百度的跳转连接&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">            &lt;ul class="list xxx" id="list-1"&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="element ele"&gt;第一个li标签&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="element"&gt;第二个li标签&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="element"&gt;第三个li标签&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">            &lt;ul class="list list-small"&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="element"&gt;one&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li class="element"&gt;two&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;测试多层级选择器&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;div class="element"&gt;我是div标签.....&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment"># 类选择器</span></span><br><span class="line">ret1 = soup.select(<span class="string">'.element'</span>)</span><br><span class="line">print(ret1)</span><br><span class="line"><span class="comment"># ID 选择器</span></span><br><span class="line">ret2 = soup.select(<span class="string">'#list-1'</span>)</span><br><span class="line">print(ret2)</span><br><span class="line"><span class="comment"># 多层级选择器: div &gt; ul &gt; li</span></span><br><span class="line">ret3 = soup.select(<span class="string">'.panel-body &gt; ul &gt; li'</span>)</span><br><span class="line">print(ret3)</span><br><span class="line"><span class="comment"># 单层级选择器</span></span><br><span class="line">ret4 = soup.select(<span class="string">'.panel-body li'</span>)</span><br><span class="line">print(ret4)</span><br><span class="line"><span class="comment"># 嵌套选择</span></span><br><span class="line">ul_list = soup.select(<span class="string">'.panel-body ul'</span>)</span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> ul_list:</span><br><span class="line">    xxx = ul.select(<span class="string">'li'</span>)</span><br><span class="line">    print(xxx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文本的: string及get_text()</span></span><br><span class="line">text_string = soup.select(<span class="string">'h4'</span>)[<span class="number">0</span>].string</span><br><span class="line">print(text_string)</span><br><span class="line">text_string_1 = soup.select(<span class="string">'.divtag'</span>)[<span class="number">0</span>].get_text().replace(soup.select(<span class="string">'.divtag p'</span>)[<span class="number">0</span>].string, <span class="string">""</span>).strip()</span><br><span class="line">print(text_string_1)</span><br><span class="line"><span class="comment"># 获取属性:</span></span><br><span class="line">ret5 = soup.select(<span class="string">'#list-1'</span>)[<span class="number">0</span>][<span class="string">'class'</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>BS4</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的购物车</title>
    <url>/2020/05/17/Django/%E7%AE%80%E5%8D%95%E7%9A%84%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
    <content><![CDATA[<p>　加入购物车，进入购物车，你感觉哪个简单？对，相对于加入购物车，进入购物车只需要一个简简单单的a标签就可以搞定了</p>
<a id="more"></a>
<p>今天要写的是一个保存到localStorage中的简单购物车逻辑</p>
<h2 id="点击购物车需要准备什么？"><a href="#点击购物车需要准备什么？" class="headerlink" title="点击购物车需要准备什么？"></a>点击购物车需要准备什么？</h2><p> 　　<strong>当我们点击购物车按钮时，需要实现的逻辑都有些什么呢？</strong></p>
<ol>
    <li>将需要的商品信息添加到购物车中(如：商品数量，商品名称，商品价格，商品图片等等)</li>
    <li>查看购物车中是否存在该商品：<span style="color:red">不存在</span>:则将此商品放入购物车中，默认添加数量为1;
        <span style="color:green">存在</span>:则将该商品的数量+1</li>
    <li>将商品转换成字符串(因为localStorage中只能保存字符串类型数据)</li>
    <li>将需要加入购物车的商品写入到localStorage中进行持久化存储</li>
</ol>

<p>　　<strong>我们将这些需要在点击加入购物车时需要实现的逻辑，全部放在绑定事件中</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加入购物车事件</span></span><br><span class="line">addcart() &#123;</span><br><span class="line">	<span class="keyword">let</span> find = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 遍历购物车</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.cart_list.length; i++) &#123;</span><br><span class="line">		<span class="comment">// 如果找到了</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.gid === <span class="keyword">this</span>.cart_list[i][<span class="string">'gid'</span>]) &#123;</span><br><span class="line">			<span class="comment">// 将该商品的数量+1</span></span><br><span class="line">			<span class="keyword">this</span>.cart_list[i][<span class="string">'num'</span>]++;</span><br><span class="line">			find = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 如果没找到</span></span><br><span class="line">	<span class="keyword">if</span> (find === <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">// 将该商品放入购物车列表</span></span><br><span class="line">		<span class="keyword">this</span>.cart_list.push(&#123; <span class="string">'name'</span>: <span class="keyword">this</span>.name, <span class="string">'gid'</span>: <span class="keyword">this</span>.gid, <span class="string">'price'</span>: <span class="keyword">this</span>.price, <span class="string">'num'</span>: <span class="number">1</span>, <span class="string">'img'</span>: <span class="keyword">this</span>.img &#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.cart_list)</span><br><span class="line">	<span class="comment">// 存入localStorage中</span></span><br><span class="line">	localStorage[<span class="string">'cart'</span>] = <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.cart_list)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="当做完这些之后需要注意什么？"><a href="#当做完这些之后需要注意什么？" class="headerlink" title="当做完这些之后需要注意什么？"></a>当做完这些之后需要注意什么？</h2><p>　　<strong>将购物车写入到localStorage中后，如果你将localStorage中的购物车手动删除，或者需要清除缓存来刷新页面时会产生什么呢？</strong><br>(就好比一个马蜂窝好好的在树上挂着，而你非要用竹竿去捅它下来一样，一发不可收拾)<br>当你刷新页面之后，控制台迎接而来的是一片红，为什么呢？因为我们做的购物车是存在localStorage中的，而我们展示购物车中商品是写在myheader公用组件中的，<br>所以，不管你在哪个页面，当你清除之后，就会报出很多异常</p>
<p>　　<strong>解决此问题，我们需要在mounted钩子函数中添加初始化购物车逻辑</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化购物车逻辑</span></span><br><span class="line">init_cart() &#123;</span><br><span class="line">	<span class="keyword">let</span> cart = <span class="built_in">JSON</span>.parse(localStorage[<span class="string">'cart'</span>])</span><br><span class="line">	<span class="keyword">if</span> (cart) &#123;</span><br><span class="line">		<span class="comment">// 将localstorage的数据给cart_list</span></span><br><span class="line">		<span class="keyword">this</span>.cart_list = <span class="built_in">JSON</span>.parse(localStorage[<span class="string">'cart'</span>])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Cart</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Redis的排行榜</title>
    <url>/2020/05/17/Python/%E5%9F%BA%E4%BA%8Eredis%E7%9A%84%E6%8E%92%E8%A1%8C%E6%A6%9C/</url>
    <content><![CDATA[<p>　　所谓排行榜，就是要将一组数据根据某种条件来进行排序，就好比游戏，可以根据经验值，等级来进行递减排行，电影，可以根据热度或者评分来进行排行<br>今天我们学习的内容就是做一个基于redis的商品点击量排行榜</p>
<a id="more"></a>

<h2 id="1、新的商品参与排名接口"><a href="#1、新的商品参与排名接口" class="headerlink" title="1、新的商品参与排名接口"></a>1、新的商品参与排名接口</h2><p>　　接口作用：<br>　　　　如果此商品是第一次被访问，那么此时该商品的访问次数，就默认从1开始<br>　　　　如果此商品非第一次被访问，那么此时该商品的访问次数会在原有的次数上面+1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入redis</span></span><br><span class="line">host = <span class="string">'localhost'</span></span><br><span class="line">port = <span class="number">6379</span></span><br><span class="line">r = redis.Redis(host=host, port=port)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新的商品参与排名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsClick</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 接收参数</span></span><br><span class="line">        gid = request.GET.get(<span class="string">'gid'</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 修改商品的点击数</span></span><br><span class="line">        r.zincrby(<span class="string">"good_rank"</span>,<span class="number">1</span>,int(gid))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"message"</span>:<span class="string">"访问+1"</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="1、2-前端调用参与排名接口"><a href="#1、2-前端调用参与排名接口" class="headerlink" title="1、2  前端调用参与排名接口"></a>1、2  前端调用参与排名接口</h2><p>　　新的商品参与排名接口，可以放在前端的商品详情页面(item.vue)的mounted钩子中，这样每次进入详情页，都可以为该商品增加一次访问量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取请求详情信息的商品id</span></span><br><span class="line">    <span class="keyword">this</span>.gid = <span class="keyword">this</span>.$route.query.gid;</span><br><span class="line">    <span class="comment">// 调用增加访问接口</span></span><br><span class="line">    <span class="keyword">this</span>.add_rank();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">// 访问一次增加一次访问数</span></span><br><span class="line">	add_rank() &#123;</span><br><span class="line">		<span class="keyword">this</span>.axios(&#123;</span><br><span class="line">			url: config[<span class="string">'baseurl'</span>] + <span class="string">'goodsclick/'</span>,</span><br><span class="line">			params: &#123;</span><br><span class="line">				gid: <span class="keyword">this</span>.gid</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).then(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"偷偷+1"</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、排行榜数据进行展示接口及定义工具方法"><a href="#2、排行榜数据进行展示接口及定义工具方法" class="headerlink" title="2、排行榜数据进行展示接口及定义工具方法"></a>2、排行榜数据进行展示接口及定义工具方法</h2><p>　　接口作用：<br>　　　　将获取到的数据返回，由前端获取到后进行展示<br>　　工具的作用：<br>　　　　该工具方法用来获取排行榜前N名的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工具方法，获取前N名的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_top_n</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment"># 获取redis中的数据</span></span><br><span class="line">    goods_click = r.zrange(<span class="string">"good_rank"</span>,<span class="number">0</span>,<span class="number">-1</span>,desc=<span class="literal">True</span>,withscores=<span class="literal">True</span>)[:num]</span><br><span class="line">    <span class="comment"># 获取mysql中数据</span></span><br><span class="line">    goods = Goods.objects.in_bulk([int(item[<span class="number">0</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> goods_click])</span><br><span class="line">    <span class="comment"># 合并操作</span></span><br><span class="line">    resp = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> goods_click:</span><br><span class="line">        <span class="comment"># 遍历列表</span></span><br><span class="line">        <span class="comment"># 捕获异常，防止mysql和redis数据不同步问题</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp.append(&#123;int(item[<span class="number">1</span>]): goods[int(item[<span class="number">0</span>])]&#125;)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品排行榜数据视图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodRank</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取排名前10的数据</span></span><br><span class="line">        get_resp = get_top_n(<span class="number">10</span>)</span><br><span class="line">        resp = []</span><br><span class="line">        <span class="comment"># 遍历进行序列化</span></span><br><span class="line">        <span class="keyword">for</span> dic <span class="keyword">in</span> get_resp:</span><br><span class="line">            <span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">                <span class="comment"># 序列化</span></span><br><span class="line">                data = GoodsSer(v).data</span><br><span class="line">                <span class="comment"># 将商品点击数附加到商品序列化数据中</span></span><br><span class="line">                data[<span class="string">'clicks'</span>] = k</span><br><span class="line">                resp.append(data)</span><br><span class="line">        <span class="comment"># 返回</span></span><br><span class="line">        <span class="keyword">return</span> Response(resp)</span><br></pre></td></tr></table></figure>

<h2 id="3、今天写商品排行榜遇到的bug"><a href="#3、今天写商品排行榜遇到的bug" class="headerlink" title="3、今天写商品排行榜遇到的bug"></a>3、今天写商品排行榜遇到的bug</h2><p>　　今天好像其它同学遇到了不同的问题，<br>有ORM框架报错的(卸载ORM框架后重新安装，问题解决)，<br>也有因为查找的商品不存在报错的(在工具方法的遍历中，添加一个捕获异常的功能，避免因为商品不存在而报错)<br>而我所遇到的问题是，获取到的排行榜，全部为同一商品，只是点击量不同，经与老师代码进行排除，发现问题出现在工具方法中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在工具方法中，向resp中添加元素时，我将goods的值固定成了一个商品</span></span><br><span class="line">resp.append(&#123;int(item[<span class="number">1</span>]): goods[int(<span class="number">1</span>)]&#125;)</span><br><span class="line"><span class="comment"># 正确为：：</span></span><br><span class="line">resp.append(&#123;int(item[<span class="number">1</span>]): goods[int(item[<span class="number">0</span>])]&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>排行榜</tag>
      </tags>
  </entry>
  <entry>
    <title>国际化语言操作</title>
    <url>/2020/05/17/Vue/%E5%9B%BD%E9%99%85%E5%8C%96%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>　　好记性不如一颗烂笔头，古人诚不欺我也<br>之前一直没有写笔记，从而课堂上有些bug都差不多忘记了，从今天开始，每天一记</p>
<a id="more"></a>

<p>首先还是要先将一些没有忘记的bug写下来</p>
<h2 id="1、国际化语言操作"><a href="#1、国际化语言操作" class="headerlink" title="1、国际化语言操作"></a>1、国际化语言操作</h2><p>　　这是一个可以查看当前浏览器默认所使用的语言种类<br>　　在网页中按F12，打开Console控制台，可以选择将内容清空，然后在控制台输入查询语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">window</span><span class="selector-class">.navigator</span><span class="selector-class">.language</span></span><br></pre></td></tr></table></figure>

<p>　　有了这个命令，你可以在写项目时先获取浏览器语言，让项目默认语言直接匹配浏览器语言，进行选择所要显示的语言</p>
<h2 id="1、1-做国际化语言操作时，首先要安装国际化组件"><a href="#1、1-做国际化语言操作时，首先要安装国际化组件" class="headerlink" title="1、1  做国际化语言操作时，首先要安装国际化组件"></a>1、1  做国际化语言操作时，首先要安装国际化组件</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">install</span> <span class="selector-tag">vue-i18n</span> <span class="selector-tag">--save</span></span><br></pre></td></tr></table></figure>

<h2 id="1、2-然后在main-js入口中导入使用"><a href="#1、2-然后在main-js入口中导入使用" class="headerlink" title="1、2  然后在main.js入口中导入使用"></a>1、2  然后在main.js入口中导入使用</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 引入国际化组件</span><br><span class="line">import VueI18n from 'vue-i18n';</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Vue</span><span class="selector-class">.use</span>(<span class="selector-tag">VueI18n</span>);</span><br><span class="line">// 调用语言包</span><br><span class="line">const i18n = new VueI18n(&#123;</span><br><span class="line">  //默认语言包(访问网页时先判断所使用的语言，然后将他写入到webStorage中，在入口直接进行获取)</span><br><span class="line">  <span class="selector-tag">locale</span>: <span class="selector-tag">localStorage</span><span class="selector-attr">[<span class="string">'locale'</span>]</span>,</span><br><span class="line">  // 默认使用中文</span><br><span class="line">  // locale: 'zh',</span><br><span class="line">  <span class="selector-tag">messages</span>: &#123;</span><br><span class="line">    'zh': require('./lang/zh'),</span><br><span class="line">    'en': require('./lang/en'),</span><br><span class="line">  &#125;,</span><br><span class="line">  silentTranslationWarn: true,  // 可以去掉Console控制台中的警告</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">new</span> <span class="selector-tag">Vue</span>(&#123;</span><br><span class="line">  // 装载语言包</span><br><span class="line">  <span class="selector-tag">i18n</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="1、3-然后分别创建zh-js-中文-语言包及en-js-英文-语言包-其它语言操作一样"><a href="#1、3-然后分别创建zh-js-中文-语言包及en-js-英文-语言包-其它语言操作一样" class="headerlink" title="1、3  然后分别创建zh.js(中文)语言包及en.js(英文)语言包(其它语言操作一样)"></a>1、3  然后分别创建zh.js(中文)语言包及en.js(英文)语言包(其它语言操作一样)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zh</span><span class="selector-class">.js</span> 文件</span><br><span class="line">export const m = &#123;</span><br><span class="line">  chinese: '中文',</span><br><span class="line">  english: '英文',</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">en</span><span class="selector-class">.js</span>  文件</span><br><span class="line">export const m = &#123;</span><br><span class="line">  chinese: 'Chinese',</span><br><span class="line">  english: 'English',</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1、4-在网页中引入使用格式"><a href="#1、4-在网页中引入使用格式" class="headerlink" title="1、4  在网页中引入使用格式"></a>1、4  在网页中引入使用格式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 国际化语言开关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h-switch</span> <span class="attr">v-model</span>=<span class="string">"lang"</span> @<span class="attr">change</span>=<span class="string">"lang_change"</span>&gt;</span>&#123;&#123; $t('m.chinese') &#125;&#125;/&#123;&#123; $t('m.english') &#125;&#125;<span class="tag">&lt;/<span class="name">h-switch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1、5-国际化语言所遇到的坑"><a href="#1、5-国际化语言所遇到的坑" class="headerlink" title="1、5  国际化语言所遇到的坑"></a>1、5  国际化语言所遇到的坑</h2><p>　　国际化语言js包的名称并不是可以随便取的，要根据语言种类来命名<br>就比如当时课堂创建中文js语言包时，命名为cn.js，这导致了语言切换时出现乱码的情况，当然，并不是所有都显示乱码，<br>个人理解：乱码原因可能是跟一些第三方组件产生语言冲突而导致的，就比如当时HeyUI中的分页器显示乱码，而其它地方并没有乱码，<br>也可能是个人未进行全面的实验，所以不知道吧，哈哈</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>　　现在做项目基本上都会涉及到国际化语言操作，所以，在写js语言包时，请务必查清楚各种语言的命名规范，以免出现乱码情况</p>
]]></content>
      <categories>
        <category>国际化语言操作</category>
      </categories>
      <tags>
        <tag>国际化语言操作</tag>
      </tags>
  </entry>
  <entry>
    <title>商品检索智能提示功能</title>
    <url>/2020/05/17/Django/%E5%95%86%E5%93%81%E6%A3%80%E7%B4%A2%E6%99%BA%E8%83%BD%E6%8F%90%E7%A4%BA%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>　　今天主要做的是商品的<strong>检索功能</strong>，其实检索功能你可以直接理解为<strong>搜索功能</strong>，而像我们在淘宝或者京东等等搜索需要购买的东西时，还有我们在百度搜索问题时，<br>都会根据你输入的内容，来为你推荐相关的商品或者问题，这个就是智能提示功能，这个功能是基于<strong>HeyUI</strong>第三方库<strong>AutoComplete 模糊匹配</strong>来实现的，<a href="https://www.heyui.top/component/data/plugin/autocomplete" target="_blank" rel="noopener">点击跳转</a>到HeyUI<br>查看效果</p>
<a id="more"></a>

<h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install fetch-jsonp --save</span><br></pre></td></tr></table></figure>

<h2 id="在Vue中引入fetch-jsonp模块"><a href="#在Vue中引入fetch-jsonp模块" class="headerlink" title="在Vue中引入fetch-jsonp模块"></a>在Vue中引入fetch-jsonp模块</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模糊查询模块</span></span><br><span class="line"><span class="keyword">import</span> jsonp <span class="keyword">from</span> <span class="string">'fetch-jsonp'</span>;</span><br><span class="line"><span class="keyword">const</span> loadData = <span class="function"><span class="keyword">function</span> (<span class="params">filter, callback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// this 为 option 配置</span></span><br><span class="line">        <span class="comment">// this.orgId 使用传递的参数获取数据，例：搜索某公司下的员工</span></span><br><span class="line">        jsonp(<span class="string">`https://suggest.taobao.com/sug?code=utf-8&amp;q=<span class="subst">$&#123;filter&#125;</span>`</span>)</span><br><span class="line">                .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">                .then(<span class="function">(<span class="params">d</span>) =&gt;</span> &#123;</span><br><span class="line">                        callback(d.result.map(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> r[<span class="number">0</span>];</span><br><span class="line">                        &#125;));</span><br><span class="line">        	&#125;);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="添加变量"><a href="#添加变量" class="headerlink" title="添加变量"></a>添加变量</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                        <span class="comment">// 模糊查询变量</span></span><br><span class="line">                        value: <span class="string">''</span>,</span><br><span class="line">                        param: &#123;</span><br><span class="line">                                orgId: <span class="number">1</span>, <span class="comment">// 自定义参数传递</span></span><br><span class="line">                                loadData,</span><br><span class="line">                                minWord: <span class="number">1</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">        <span class="comment">// 将数据传递给淘宝(关键词并更)</span></span><br><span class="line">        onChange(data, trigger) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data, trigger);</span><br><span class="line">                <span class="comment">// 跳转到search检索页面</span></span><br><span class="line">                <span class="keyword">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">'/search'</span>, <span class="attr">query</span>: &#123; <span class="attr">word</span>: data.value &#125; &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加智能提示标签"><a href="#添加智能提示标签" class="headerlink" title="添加智能提示标签"></a>添加智能提示标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AutoComplete</span> <span class="attr">:option</span>=<span class="string">"param"</span> <span class="attr">v-model</span>=<span class="string">"value"</span> @<span class="attr">change</span>=<span class="string">"onChange"</span> <span class="attr">type</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">AutoComplete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>　　<strong>更多关于AutoComplete 模糊匹配的参数、事件及方法，可参考<a href="https://www.heyui.top/component/data/plugin/autocomplete" target="_blank" rel="noopener">官方文档</a></strong></p>
<h2 id="今天所踩的坑"><a href="#今天所踩的坑" class="headerlink" title="今天所踩的坑"></a>今天所踩的坑</h2><p>　　1、在搜索结果展示页面，再次进行搜索时，会出现网页无反应的情况，这是this.$router.push()网页跳转的一个弊端，在当前页面跳转到当前页面时，<br>它不会再帮你请求，所以，我们需要一个监听属性来帮我们解决此问题(该问题解决)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 监听属性</span></span><br><span class="line">watch: &#123;</span><br><span class="line">        $route(to, <span class="keyword">from</span>) &#123;</span><br><span class="line">            <span class="comment">// 强刷页面</span></span><br><span class="line">            <span class="keyword">this</span>.$router.go()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>　　2、当你在智能提示框中输入搜索的内容，按Enter键之后，无法获取到输入的内容，此问题直接导致我认为获取的方式有问题，从而进行了多次调试，<br>可是不管我如何调试，都无法获取到值(很无奈)，在这时，我无意间的一个动作，让我发现了原因，<strong>输入的内容，是为了智能提示而存在，并不能做为搜索值被返回，</strong><br><strong>而只有选择智能提示中的选项，才会被当做搜索值返回</strong>(一句MMP来发泄一下)(该问题解决)</p>
<p>　　3、这是智能提示的一个bug，当然，或许会有人说，谁会闲的去这样操作，但是我就要说，就因为这个，它就是有问题的，就是有缺陷的，当你在智能提<br>示框中输入内容时，<strong>打字时不要用空格来生成文字，用鼠标来选择你要输出的字</strong>，你会发现，提示框会告诉你<strong>未搜索到相关数据</strong>，也或者会匹配到跟你输入<br>的内容完全不搭边的数据，所以说，此功能的bug还是挺多的，希望HeyUI官方可以做的越来越好吧，必定是免费的，哈哈</p>
]]></content>
      <categories>
        <category>商品检索智能提示</category>
      </categories>
      <tags>
        <tag>智能提示</tag>
        <tag>商品检索</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的自定义过滤器</title>
    <url>/2020/05/17/Vue/Vue%E4%B8%AD%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<p>　　现在很多页面显示的时间、金钱等等都需要转换格式后再进行展示，而如何进行转换呢？我想很多人都想到了—自定义过滤器</p>
<a id="more"></a>

<h2 id="１、自定义过滤器"><a href="#１、自定义过滤器" class="headerlink" title="１、自定义过滤器"></a>１、自定义过滤器</h2><p>　　今天课堂上，我们做了一个uid转换成username来展示的点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in commentlist"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引用过滤器--myfilter --&gt;</span></span><br><span class="line">        &#123;&#123; item.uid | myfilter &#125;&#125;:&#123;&#123; item.content &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、过滤器错误写法"><a href="#2、过滤器错误写法" class="headerlink" title="2、过滤器错误写法"></a>2、过滤器错误写法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  <span class="comment">// 自定用户义方法</span></span><br><span class="line">  user_filter(value) &#123;</span><br><span class="line">    <span class="comment">// 通过key(用户id)取用户名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.myuser[value]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="3、过滤器语法规范"><a href="#3、过滤器语法规范" class="headerlink" title="3、过滤器语法规范"></a>3、过滤器语法规范</h2><p>　　当过滤器return用this语法来写时，Console控制台会报出this is undefined，顾名思义，this未定义，因为过滤器中不支持this语法<br>　　这时，我们应该在mounted请求中，先声明一个变量来代替this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明变量</span></span><br><span class="line">  <span class="built_in">window</span>.that = <span class="keyword">this</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="4、过滤器正确写法"><a href="#4、过滤器正确写法" class="headerlink" title="4、过滤器正确写法"></a>4、过滤器正确写法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  <span class="comment">// 自定用户义方法</span></span><br><span class="line">  user_filter(value) &#123;</span><br><span class="line">    <span class="comment">// 通过key(用户id)取用户名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.that.myuser[value]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>过滤器</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS8查看监听端口</title>
    <url>/2020/05/17/CentOS/CentOS%208%E6%9F%A5%E7%9C%8B%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<h4 id="1、CentOS-8停用、启用、查看当前启用的端口"><a href="#1、CentOS-8停用、启用、查看当前启用的端口" class="headerlink" title="1、CentOS 8停用、启用、查看当前启用的端口"></a>1、CentOS 8停用、启用、查看当前启用的端口</h4><a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=5672/tcp --permanent   <span class="comment"># 开放5672端口</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --remove-port=5672/tcp --permanent  <span class="comment">#关闭5672端口</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --reload   <span class="comment"># 配置立即生效</span></span><br></pre></td></tr></table></figure>

<h4 id="2、查看防火墙所有开放的端口"><a href="#2、查看防火墙所有开放的端口" class="headerlink" title="2、查看防火墙所有开放的端口"></a>2、查看防火墙所有开放的端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>

<h4 id="3-、关闭防火墙"><a href="#3-、关闭防火墙" class="headerlink" title="3.、关闭防火墙"></a>3.、关闭防火墙</h4><p>如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<h4 id="4、查看防火墙状态"><a href="#4、查看防火墙状态" class="headerlink" title="4、查看防火墙状态"></a>4、查看防火墙状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure>

<h4 id="5、查看监听的端口"><a href="#5、查看监听的端口" class="headerlink" title="5、查看监听的端口"></a>5、查看监听的端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -lnpt</span><br></pre></td></tr></table></figure>

<p><strong>PS:centos7默认没有 netstat 命令，需要安装 net-tools 工具，yum install -y net-tools</strong></p>
<h4 id="6、检查端口被哪个进程占用"><a href="#6、检查端口被哪个进程占用" class="headerlink" title="6、检查端口被哪个进程占用"></a>6、检查端口被哪个进程占用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -lnpt |grep 5672</span><br></pre></td></tr></table></figure>

<h4 id="7、查看进程的详细信息"><a href="#7、查看进程的详细信息" class="headerlink" title="7、查看进程的详细信息"></a>7、查看进程的详细信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps 6832</span><br></pre></td></tr></table></figure>

<h4 id="8、中止进程"><a href="#8、中止进程" class="headerlink" title="8、中止进程"></a>8、中止进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 6832</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04配置mysql</title>
    <url>/2020/05/16/Ubuntu/Ubuntu18.04%E9%85%8D%E7%BD%AEmysql/</url>
    <content><![CDATA[<p>　　设置Ubuntu 18.04版本系统配置mysql</p>
<a id="more"></a>

<h2 id="1、安装mysql命令"><a href="#1、安装mysql命令" class="headerlink" title="1、安装mysql命令"></a>1、安装mysql命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure>

<h2 id="2、配置mysql"><a href="#2、配置mysql" class="headerlink" title="2、配置mysql"></a>2、配置mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>

<h2 id="3、检查mysql服务状态"><a href="#3、检查mysql服务状态" class="headerlink" title="3、检查mysql服务状态"></a>3、检查mysql服务状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status mysql.service</span><br></pre></td></tr></table></figure>

<h2 id="4、查看初始密码"><a href="#4、查看初始密码" class="headerlink" title="4、查看初始密码"></a>4、查看初始密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>

<h2 id="5、启动mysql报错-ERROR-1698-28000-Access-denied-for-user-‘root’-’localhost"><a href="#5、启动mysql报错-ERROR-1698-28000-Access-denied-for-user-‘root’-’localhost" class="headerlink" title="5、启动mysql报错 ERROR 1698 (28000): Access denied for user ‘root’@’localhost"></a>5、启动mysql报错 ERROR 1698 (28000): Access denied for user ‘root’@’localhost</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">skip-grant-tables	(跳过密码验证)</span><br></pre></td></tr></table></figure>

<p>保存:wq，退出。输入：service mysql restart，重新启动mysql<br>重新连接mysql，提示需要输入密码时，直接按回车键跳过<br>进入mysql之后，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use mysql; 然后敲回车</span><br><span class="line">update user <span class="built_in">set</span> authentication_string=password(“你的密码”) <span class="built_in">where</span> user=“root” 然后敲回车</span><br><span class="line">flush privileges 然后敲回车</span><br><span class="line">select user,plugin from user;	<span class="comment"># 看到root后面对应的是auth_socket</span></span><br><span class="line"><span class="comment"># 执行命令修改(改成%则代表设置成所有主机都可以连接)</span></span><br><span class="line">update user <span class="built_in">set</span> authentication_string=password(<span class="string">"xiaojian"</span>),plugin=<span class="string">'%'</span> <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line"><span class="comment"># 如果上面命令执行失败，可先执行</span></span><br><span class="line">update user <span class="built_in">set</span> authentication_string=password(<span class="string">"ln122920"</span>),plugin=<span class="string">'mysql_native_password'</span> <span class="built_in">where</span> user=<span class="string">'root'</span></span><br><span class="line"><span class="comment"># 再执行</span></span><br><span class="line">update user <span class="built_in">set</span> plugin=<span class="string">'mysql_native_password'</span> <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line"><span class="comment"># 再次查看</span></span><br><span class="line">select user,plugin from user	<span class="comment"># 如果改掉了，就成功了</span></span><br></pre></td></tr></table></figure>

<h2 id="6、退出mysql，重新进入配置文件"><a href="#6、退出mysql，重新进入配置文件" class="headerlink" title="6、退出mysql，重新进入配置文件"></a>6、退出mysql，重新进入配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="comment"># 将在第四步添加的内容删除掉或注释掉</span></span><br><span class="line">skip-grant-tables	(跳过密码验证)</span><br></pre></td></tr></table></figure>

<p>保存:wq，退出。</p>
<p><strong>再次启动mysql时，不会再报错误</strong></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04系统一些常见问题</title>
    <url>/2020/05/16/Ubuntu/Ubuntu18.04%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>　　Ubuntu 18.04版本系统的一些常见问题</p>
<a id="more"></a>

<h2 id="一、安装vim命令时的问题"><a href="#一、安装vim命令时的问题" class="headerlink" title="一、安装vim命令时的问题"></a>一、安装vim命令时的问题</h2><p><strong>提示找不到安装包，或安装包已被占用</strong></p>
<p>设置国内原、可解决次问题<a href="/2020/04/23/Ubuntu18.04设置国内源/">Ubuntu设置国内原</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04设置分辨率</title>
    <url>/2020/05/16/Ubuntu/Ubuntu18.04%E8%AE%BE%E7%BD%AE%E5%88%86%E8%BE%A8%E7%8E%87/</url>
    <content><![CDATA[<p>　　设置Ubuntu 18.04版本系统的分辨率为1920x1080</p>
<a id="more"></a>

<p>1、打开终端命令窗口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ctrl + Alt + T</span><br></pre></td></tr></table></figure>

<p>2、执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xrandr --newmode <span class="string">"1920x1080_60.00"</span> 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync</span><br><span class="line">sudo xrandr --addmode Virtual1 <span class="string">"1920x1080_60.00"</span>	<span class="comment"># Virtual1是Ubuntu系统的显示器名称</span></span><br><span class="line"><span class="comment"># 此时系统设置里已经有 1920*1080 的分辨率选项</span></span><br></pre></td></tr></table></figure>

<p>3、打开开机启动配置</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/<span class="keyword">profile</span></span><br></pre></td></tr></table></figure>

<p>　　按键 i 进入编辑模式, 按箭头下键把光标移动到文件最底部添加下面的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xrandr --newmode <span class="string">"1920x1080_60.00"</span> 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync</span><br><span class="line">xrandr --addmode Virtual1 <span class="string">"1920x1080_60.00"</span></span><br></pre></td></tr></table></figure>

<p>　　按键 Esc 然后输入 :wq 回车, 保存退出.</p>
<p>　　重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7服务器配置redis主从与哨兵</title>
    <url>/2020/05/11/CentOS/centos7%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEredis%E4%B8%BB%E4%BB%8E%E4%B8%8E%E5%93%A8%E5%85%B5/</url>
    <content><![CDATA[<h2 id="这次是配置redis主从"><a href="#这次是配置redis主从" class="headerlink" title="这次是配置redis主从"></a>这次是配置redis主从</h2><a id="more"></a>

<ol>
<li><p>主redis数据库配置方式省略,因为只是正常的配置redis外网访问的流程,  <del>并不是作者忘了</del></p>
</li>
<li><p>在完成上述操作之后,使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server info</span><br></pre></td></tr></table></figure>

<p>可以查看当前redis运行状况,replication中显示的role为当前数据库身份,主数据库显示master,即为启动配置主数据库成功</p>
</li>
<li><p>配置从数据库</p>
<ul>
<li><p>这里的配置不同于主数据库,并不需要太过于复杂</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected-mode no # 把保护模式设置为no，如果这里是yes，那么修改为no</span><br><span class="line">port 6379  #端口号6379保持不变</span><br><span class="line">daemonize no  #这里修改为no，表示redis服务可以后台运行</span><br><span class="line">slaveof 192.168.124.20 6379  #由于是从服务器，所以要配置其主服务器，配置格式：slaveof  主IP  主端口号</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置好之后,启动从数据库</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">redis-<span class="keyword">server</span> redis.conf</span><br><span class="line"><span class="meta"># 这里必须指定我们设定的conf文件进行启动,否则之前的修改将不生效</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>再次输入</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">redis-<span class="keyword">server</span> <span class="keyword">info</span></span><br></pre></td></tr></table></figure>

<p>查看,可看到显示role为slave</p>
</li>
</ul>
</li>
</ol>
<h3 id="设置哨兵集群的方式"><a href="#设置哨兵集群的方式" class="headerlink" title="设置哨兵集群的方式"></a>设置哨兵集群的方式</h3><ol>
<li><p>在redis根目录创建文件sentinel.conf</p>
<ul>
<li><pre><code># 当前Sentinel服务运行的端口
port 26379
# 保护模式 no
protected-mode no

# Sentinel去监视一个名为mymaster的主redis实例，
# 这个主实例的IP地址为本机地址127.0.0.1，端口号为6379，
# 而将这个主实例判断为失效至少需要2个Sentinel进程的同意，只要同意Sentinel的数量不达标，自动failover就不会执行
# 如果提供外网访问，实例的IP地址为服务器地址10.0.128.144。
sentinel myid ca7a3602308b20f77464a51bd29e26e48055fd1a

# down-after-milliseconds指定了Sentinel认为Redis实例已经失效所需的毫秒数。
# 当实例超过该时间没有返回PING，或者直接返回错误，那么Sentinel将这个实例标记为主观下线。
# 只有一个Sentinel进程将实例标记为主观下线并不一定会引起实例的自动故障迁移：只有在足够数量的Sentinel都将一个实例标记为主观下线之后，实例才会被标记为客观下线。
# 这时自动故障迁移才会执行
sentinel deny-scripts-reconfig yes

# parallel-syncs指定了在执行故障转移时，最多可以有多少个从Redis实例在同步新的主实例，
# 在从Redis实例较多的情况下这个数字越小，同步的时间越长，完成故障转移所需的时间就越长
sentinel monitor mymaster 120.26.175.79 6379 2

# 如果在failover-timeout该时间（ms）内未能完成failover操作，则认为该failover失败
sentinel down-after-milliseconds mymaster 5000
# Generated by CONFIG REWRITE
dir &quot;C:\\Users\\Administrator&quot;
sentinel failover-timeout mymaster 15000
sentinel config-epoch mymaster 0
sentinel leader-epoch mymaster 0
sentinel known-slave mymaster 115.59.41.123 6379
sentinel current-epoch 0

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2.</span> 使用此文件启动哨兵</span><br></pre></td></tr></table></figure>
redis-server sentinel.conf --sentinel</code></pre></li>
</ul>
</li>
<li><p>重复以上步骤,即可实现哨兵集群</p>
</li>
</ol>
<p>相比较起来, 部署还是比较简单的.</p>
<p>不过需要注意的是,  windows版本的redis仅仅只到3.2, redis官方并未继续编译后续版本的redis, 也就是说,如果你使用的主数据库为linux的高版本的话,可能会出现无法解析rdb文件的情况.</p>
<p>这种情况的话,推荐下载高版本的redis安装包.</p>
<p><a href="https://github.com/tporadowski/redis/releases" target="_blank" rel="noopener">高版本下载</a></p>
<p>非官方编译, 酌情下载.</p>
<p>诸君自行考量其中利弊,  我在这里就不多言了.</p>
<p>以上.</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7服务器配置汇总</title>
    <url>/2020/05/11/CentOS/centos7%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ol>
<li><p>构建centos7环境</p>
<p>服务器构建centos7环境,没啥好写的,毕竟只需要在控制台操作一下就可以自动进行系统重装.</p>
<a id="more"></a>

<p>这里要注意的是, 阿里云安装的centos7系统与正常你在自己虚拟机上安装的centos不同,在安装了图形化界面之后,使用init 5 和startX都是无法直接开启图形化界面的.</p>
<p>这里需要进入阿里云控制台中,在远程连接选项中选择VNC连接, 这样才能进行图形化界面操作.</p>
<p>值得一提的是,请务必记住你第一次进行VNC连接时生成的连接密码,它关系到你每次能否连接,如果你忘记了…..</p>
<p>还是重装系统吧</p>
</li>
<li><p>配置python环境</p>
<ol>
<li><p>这个的话,应该也没什么好说的吧,毕竟,centos本身自带了python环境(2.7)</p>
</li>
<li><p>如果有需要升级的话,可以参考下列操作</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">wget  https:<span class="comment">//www.python.org/ftp/python/3.7.1/Python-3.7.1.tgz </span></span><br><span class="line"><span class="meta"># 下载python 3.7.1 安装包</span></span><br><span class="line">tar -zxvf Python<span class="number">-3.7</span><span class="number">.1</span>.tgz  -C  /usr/local/</span><br><span class="line"><span class="meta"># 解压安装包</span></span><br><span class="line">cd Python<span class="number">-3.7</span><span class="number">.1</span></span><br><span class="line"><span class="meta"># 切换路径至python文件夹</span></span><br><span class="line">./configure --prefix=/usr/local/Python<span class="number">-3.7</span><span class="number">.1</span>  --enable-shared CFLAGS=-fPIC</span><br><span class="line"><span class="meta"># 配置编译</span></span><br><span class="line">make&amp;&amp;make install</span><br><span class="line"><span class="meta"># 编译源码,执行安装</span></span><br><span class="line">python <span class="number">3</span></span><br><span class="line"><span class="meta"># 查看是否安装成功</span></span><br></pre></td></tr></table></figure>

<p><img src="/fcg22450.github.io/img/online_course/centos_python.png" alt="安装成功的显示"></p>
</li>
</ol>
</li>
<li><p>配置mysql数据库 + 主从复制</p>
<p> 这里可以参考我的博客:    <a href="/fcg22450.github.io/2020/05/10/online_course/003/">Centos7 环境下配置mysql主从服务</a></p>
</li>
<li><p>配置redis数据库 + 主从复制 + 哨兵集群</p>
<p>这个问题我同样有另外一篇博客,就不在这里多说了:  <a href="/fcg22450.github.io/2020/05/11/online_course/005/">centos7服务器配置redis主从与哨兵集群</a></p>
</li>
<li><p>配置node环境</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v10.<span class="number">13.0</span>/<span class="keyword">node</span><span class="title">-v10</span>.<span class="number">13.0</span>-linux-x64.tar.xz</span><br><span class="line"><span class="comment"># 下载nodejs安装包</span></span><br><span class="line">tar xvf <span class="keyword">node</span><span class="title">-v10</span>.<span class="number">13.0</span>-linux-x64.tar.xz </span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">mv <span class="keyword">node</span><span class="title">-v10</span>.<span class="number">13.0</span>-linux-x64 <span class="keyword">node</span><span class="title">-v10</span>.<span class="number">13</span> </span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">cd <span class="keyword">node</span><span class="title">-v10</span>.<span class="number">13</span>/bin</span><br><span class="line">./<span class="keyword">node</span> <span class="title">-v</span></span><br><span class="line"><span class="comment"># 进入目录查看其版本</span></span><br></pre></td></tr></table></figure>

<p>进入etc/profile 修改环境变量,使node命令能在任意目录运行:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">vim</span> <span class="string">/etc/profile</span></span><br><span class="line"><span class="attr">//环境变量</span></span><br><span class="line"><span class="attr">NODE_HOME</span>=<span class="string">/你的安装路径/node-v10.13</span></span><br><span class="line"><span class="attr">PATH</span>=<span class="string">$NODE_HOME/bin:$PATH</span></span><br><span class="line"><span class="attr">export</span> <span class="string">NODE_HOME</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH</span></span><br></pre></td></tr></table></figure>

<p>重启服务器:  reboot</p>
</li>
</ol>
<p>以上.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7服务器配置主从</title>
    <url>/2020/05/10/CentOS/centos7%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E/</url>
    <content><![CDATA[<h2 id="Centos7-环境下配置mysql主从服务"><a href="#Centos7-环境下配置mysql主从服务" class="headerlink" title="Centos7 环境下配置mysql主从服务"></a>Centos7 环境下配置mysql主从服务</h2><a id="more"></a>

<ol>
<li><p>安装过程在这里不在赘述, 想要实现主从, 需要先配置好mysql的外网访问. 在配置号外网访问之后, 就可以开始着手设置主从复制了</p>
</li>
<li><p>首先在主数据库中创建一个同步账号,每个从数据库会使用一个mysql账号来连接主数据库,所以我们需要在主数据库中创建一个账号, 并授予该账号replication slave 权限, 这里可以为每一个从服务器创建一个账号,当然,也可以用同一个,  创建新账号使用 ‘create user’命令, 授予权限使用’grant’命令, </p>
<ol>
<li><p>创建一个账号:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &#39;repl&#39;@&#39;%&#39; identified by &#39;repl_Pass1&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>授予权限:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to &#39;repl&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<ol start="3">
<li><p>配置主数据库</p>
<ol>
<li><p>编辑my.cnf文件内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在[mysqld]下面添加一下内容</span></span><br><span class="line"><span class="attr">server-id</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">log_bin</span> = master-bin</span><br><span class="line"><span class="attr">log_bin_index</span> = master-bin.index</span><br><span class="line"><span class="comment"># binlog_do_db 为要复制的数据库</span></span><br><span class="line"><span class="attr">binlog_do_db</span> = test</span><br><span class="line"><span class="comment"># binlog_ignore_db 为忽略的数据库,可以写多条</span></span><br><span class="line"><span class="attr">binlog_ignore_db</span> = mysql</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<ol start="2">
<li>通常情况下,centos7的默认数据库配置文件为  /etc/my.cnf</li>
</ol>
<ol start="4">
<li><p>配置完成之后,重启数据库</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl restart mysqld</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进入数据库,查看主服务器状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>

<p><img src="/fcg22450.github.io/img/online_course/mysql_slave.png" alt="状态"></p>
<p>注意这里的file 和  position 两个字段的内容,将会在从服务器配置时用到.</p>
</li>
</ol>
<hr>
<p>从服务器配置:</p>
<ol>
<li><p>同样的,在数据库配置文件[mysqld]后面添加一下内容</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">server-id = 2</span><br><span class="line"># replicate-<span class="keyword">do</span>-<span class="keyword">db</span> 要同步的数据库名称</span><br><span class="line">replicate-<span class="keyword">do</span>-<span class="keyword">db</span>=<span class="keyword">test</span></span><br><span class="line"># replicate-wild-<span class="keyword">do</span>-<span class="keyword">table</span>  单独同步某一个表时使用</span><br><span class="line">replicate-wild-<span class="keyword">do</span>-<span class="keyword">table</span> =<span class="keyword">test</span>.<span class="keyword">test</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动从数据库</p>
</li>
<li><p>指定主库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change master to master_host&#x3D;&#39;120.26.175.79&#39;, master_port&#x3D;3306, master_user&#x3D;&#39;lab_admin&#39;, master_password&#x3D;&#39;lab123&#39;, master_log_file&#x3D;&#39;master-bin.000001&#39;, master_log_pos&#x3D;154;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动复制功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看从数据库状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show slave status \G;</span><br></pre></td></tr></table></figure>





</li>
</ol>
<p>以上配置完成之后,从服务器将会自动从主服务器上同步数据库</p>
<p>以上,就是mysql主从配置的操作</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7服务器配置主从之后的一些操作</title>
    <url>/2020/05/10/CentOS/centos7%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E4%B9%8B%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="今天配置主从-简直脑袋爆炸-网路上各种虚虚实实的攻略一个比一个扯淡-踩坑踩了一堆-在这里记录一下-免得下次遇到同样的情况导致无法处理"><a href="#今天配置主从-简直脑袋爆炸-网路上各种虚虚实实的攻略一个比一个扯淡-踩坑踩了一堆-在这里记录一下-免得下次遇到同样的情况导致无法处理" class="headerlink" title="今天配置主从,  简直脑袋爆炸,  网路上各种虚虚实实的攻略一个比一个扯淡,  踩坑踩了一堆,  在这里记录一下,  免得下次遇到同样的情况导致无法处理"></a>今天配置主从,  简直脑袋爆炸,  网路上各种虚虚实实的攻略一个比一个扯淡,  踩坑踩了一堆,  在这里记录一下,  免得下次遇到同样的情况导致无法处理</h2><a id="more"></a>

<ol>
<li><p>首先说说配置主从数据库的问题</p>
<ul>
<li><p>首先,主从数据库的版本必须一样,  实测确实如此,  虽然我也不确定最开始是不是我不熟练导致的就是了.</p>
</li>
<li><p>第二点, 不要用官网给的安装包,要用zip! zip! 虽然配置起来得手动,  但是说实话,  所有配置文件自己设定这一点就足够让人特意去费这番功夫了.主从需要在配置文件中进行修改,  我一开始装了一个安装包的mysql, 各种出错,最重要的是,修改了配置选项之后并不起作用,这一点拖了我一个小时,最终一气之下选择卸载,重新卸载了官网的zip安装包,解压后手动配置了my.ini文件,方才完成了从属服务器的配置.</p>
</li>
<li><p>第三点,启动之后报错,这里一共遇到了两种报错</p>
<ul>
<li><p>第一种:   Slave_SQL_Running: No</p>
<ul>
<li>这个属性和另外一个属性(Slave_IO_Running)一样重要,可以说,这两个中只要有一个值为no,就意味着你的从数据库挂了,就这么恐怖</li>
</ul>
</li>
<li><p>第二种:   Error executing row event: ‘Table ‘lab.django_migrations’ doesn’t exist’</p>
<ul>
<li>类似这种形式的报错</li>
<li>我一直以为是主数据库的问题,甚至想着要不要直接重置一下主数据库,但万万没想到问题居然会这样解决</li>
</ul>
</li>
<li><p>说说解决方案:</p>
<ul>
<li><p>网上搜索到的都是一个吊样,估计都是抄的同一篇文章,具体源头不可考据.</p>
</li>
<li><pre><code class="mysql">stop slave;  
SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1;
start slave;
show slave status\G  </code></pre>
</li>
<li><p>嗯,就这四条,乍一运行没啥卵用,但是在我翻遍网上的文章之后,一哥们的文章吸引了我的注意力<img src="/fcg22450.github.io/img/online_course/slave_code.png" alt="截图"></p>
</li>
<li><p><del>够扯淡,我喜欢</del><img src="https://www./fcg22450.github.io/images/meme/%E5%A4%9F%E6%89%AF%E6%B7%A1.png" alt="够扯淡"></p>
</li>
<li><p>综上所述,  那时候基本不抱希望的我试了试…..</p>
</li>
<li><p>然后…..</p>
</li>
<li><img src="https://www.f322.xyz/images/meme/what.png" alt="what">
</li>
<li><p>居然是真的??????????</p>
</li>
</ul>
</li>
<li><p>总之,多写几遍就解决了,  就这么简单</p>
</li>
</ul>
</li>
<li><p>还能说什么</p>
</li>
</ul>
</li>
<li><p>然后就是关于一些在数据库中会用到的命令</p>
<ol>
<li><del>你是不是以为我会写一堆</del><img src="/fcg22450.github.io/images/meme/%E6%83%B3%E9%83%BD%E4%B8%8D%E8%A6%81%E6%83%B3.png" alt="想都不要想"></li>
</ol>
</li>
</ol>
<p>当然,以上纯属扯淡,哈哈哈哈,<del>虽然我就是这么想的</del>,那么,本期的记录到此结束,拜拜~~ヾ(•ω•`)o.</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Datetime模块常用方法</title>
    <url>/2020/05/07/Python/Datetime%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>　　<strong>Datetime模块常用方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> dateutil.relativedelta <span class="keyword">import</span> relativedelta</span><br><span class="line"><span class="comment"># 当前时间</span></span><br><span class="line">print(datetime.datetime.now())</span><br><span class="line"><span class="comment"># 一个月后时间</span></span><br><span class="line">print(datetime.datetime.now() + relativedelta(months=+<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 一个月前时间</span></span><br><span class="line">print(datetime.datetime.now() - relativedelta(months=+<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Datetime</category>
      </categories>
      <tags>
        <tag>Datetime</tag>
      </tags>
  </entry>
  <entry>
    <title>支付宝沙箱支付</title>
    <url>/2020/04/29/Python/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<p>　　Python支付宝沙箱支付代码接口</p>
<a id="more"></a>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> python-alipay-sdk <span class="comment">--upgrade</span></span><br></pre></td></tr></table></figure>

<h2 id="请求支付页面"><a href="#请求支付页面" class="headerlink" title="请求支付页面"></a>请求支付页面</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 沙箱支付</span></span><br><span class="line"><span class="comment"># 进入支付页面</span></span><br><span class="line"><span class="comment"># 沙箱支付所需包</span></span><br><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alipay</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 随机生成订单号</span></span><br><span class="line">        order = datetime.datetime.now().strftime(<span class="string">"%Y%m%d%H%M%S"</span>) + str(random.randint(<span class="number">10</span>, <span class="number">99</span>))</span><br><span class="line">        <span class="comment"># 判断订单是否存在</span></span><br><span class="line">        order_id = Order.objects.filter(order=order).first()</span><br><span class="line">        <span class="keyword">if</span> order_id:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"code"</span>:<span class="number">405</span>,<span class="string">"message"</span>:<span class="string">"该订单已存在，请重新下单"</span>&#125;)</span><br><span class="line">        <span class="comment"># 获取支付价格</span></span><br><span class="line">        price = request.GET.get(<span class="string">"price"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 获取token</span></span><br><span class="line">        jwt_token = request.GET.get(<span class="string">"token"</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user_json = jwt_decode_handler(jwt_token)</span><br><span class="line">            <span class="comment"># 获取token中的uid</span></span><br><span class="line">            user_id = user_json[<span class="string">'user_id'</span>]</span><br><span class="line">            r.set(<span class="string">"payuid"</span>,user_id)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            r.set(<span class="string">"payuid"</span>,str())</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"code"</span>:<span class="number">405</span>,<span class="string">"message"</span>:<span class="string">"用户信息已失效，请重新登录"</span>&#125;)</span><br><span class="line">        <span class="comment"># 读取私钥及公钥</span></span><br><span class="line">        app_private_key_string = open(<span class="string">"pay/private.txt"</span>).read()</span><br><span class="line">        alipay_public_key_string = open(<span class="string">"pay/public.txt"</span>).read()</span><br><span class="line"></span><br><span class="line">        alipay = AliPay(</span><br><span class="line">            appid=<span class="string">"2016102400753303"</span>,</span><br><span class="line">            app_notify_url= <span class="literal">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">            app_private_key_string=app_private_key_string,</span><br><span class="line">            alipay_public_key_string=alipay_public_key_string,</span><br><span class="line">            <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span></span><br><span class="line">            sign_type=<span class="string">"RSA2"</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">            debug=<span class="literal">True</span>  <span class="comment"># 默认False</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span></span><br><span class="line">        order_str = alipay.api_alipay_trade_page_pay(</span><br><span class="line">            subject=<span class="string">"实验楼消费"</span>,</span><br><span class="line">            notify_url=<span class="literal">None</span>,</span><br><span class="line">            out_trade_no=order,      <span class="comment"># 订单号</span></span><br><span class="line">            total_amount=price,         <span class="comment"># 订单价格</span></span><br><span class="line">            return_url=<span class="string">"http://127.0.0.1:8000/get_alipy/"</span></span><br><span class="line">        )</span><br><span class="line">	<span class="comment"># 拼接支付宝支付页面网址url</span></span><br><span class="line">        request_url = <span class="string">'https://openapi.alipaydev.com/gateway.do?'</span> + order_str</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">"code"</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="string">"msg"</span>: <span class="string">"请求成功，跳转支付页面"</span>,</span><br><span class="line">            <span class="string">"data"</span>: request_url</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="获取回调网址-returnURL-中的参数"><a href="#获取回调网址-returnURL-中的参数" class="headerlink" title="获取回调网址(returnURL)中的参数"></a>获取回调网址(returnURL)中的参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 支付回调(获取回调网址中的参数)</span></span><br><span class="line"><span class="comment"># 使用悲观锁修改数据</span></span><br><span class="line"><span class="comment"># 悲观锁包</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Get_Alipy</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        user = request.query_params</span><br><span class="line">        <span class="comment"># 获取支付用户id</span></span><br><span class="line">        uid = r.get(<span class="string">"payuid"</span>)</span><br><span class="line">        <span class="comment"># 获取订单号及价格  并将单位换算成分</span></span><br><span class="line">        price = int(float(user[<span class="string">"total_amount"</span>])*<span class="number">100</span>)</span><br><span class="line">        order = user[<span class="string">"out_trade_no"</span>]</span><br><span class="line">        <span class="comment"># 订单表中生成订单</span></span><br><span class="line">        Order.objects.create(uid=int(uid),order=order,price=price)</span><br><span class="line">        <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">            save =transaction.savepoint()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 获取该价格在会员中的等级</span></span><br><span class="line">                price = VIP.objects.filter(price=price).first()</span><br><span class="line">                <span class="comment"># 修改该用户的会员等级</span></span><br><span class="line">                user = User.objects.select_for_update().get(id=int(uid))</span><br><span class="line">                <span class="comment"># 修改用户的vip等级</span></span><br><span class="line">                user.vid = price.id</span><br><span class="line">                <span class="comment"># 修改后进行保存</span></span><br><span class="line">                user.save()</span><br><span class="line">                <span class="comment"># 提交所有修改</span></span><br><span class="line">                transaction.savepoint_commit(save)</span><br><span class="line">                <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'http://127.0.0.1:8080/vip'</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="comment"># 失败全部回滚</span></span><br><span class="line">                transaction.savepoint_rollback(save)</span><br><span class="line">        r.delete(<span class="string">"payuid"</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"code"</span>:<span class="number">500</span>,<span class="string">"message"</span>:<span class="string">"修改失败"</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="向支付宝发起确认支付结果请求"><a href="#向支付宝发起确认支付结果请求" class="headerlink" title="向支付宝发起确认支付结果请求"></a>向支付宝发起确认支付结果请求</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向支付宝确认支付结果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Get_Alipy</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 订单号</span></span><br><span class="line">        order = request.GET.get(<span class="string">"order"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 获取token</span></span><br><span class="line">        jwt_token = request.GET.get(<span class="string">"token"</span>, <span class="literal">None</span>)</span><br><span class="line">        user_json = jwt_decode_handler(jwt_token)</span><br><span class="line">        <span class="comment"># 获取token中的uid</span></span><br><span class="line">        user_id = user_json.get(<span class="string">"user_id"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否登录</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_id:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"code"</span>: <span class="number">405</span>, <span class="string">"message"</span>: <span class="string">"用户信息已失效，请重新登录"</span>&#125;)</span><br><span class="line">            <span class="comment"># 查询订单是否存在，或订单是否已经支付过</span></span><br><span class="line">        order_id = Order.objects.filter(order=order, uid=int(user_id)).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> order_id <span class="keyword">or</span> order_id.is_succeed == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"code"</span>: <span class="number">405</span>, <span class="string">"message"</span>: <span class="string">"订单不存在或已付款，请刷新后查看"</span>&#125;)</span><br><span class="line"></span><br><span class="line">        alipay = AliPay(</span><br><span class="line">            appid=<span class="string">"2016102400753303"</span>,</span><br><span class="line">            app_notify_url=<span class="literal">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">            app_private_key_string=app_private_key_string,</span><br><span class="line">            alipay_public_key_string=alipay_public_key_string,</span><br><span class="line">            <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span></span><br><span class="line">            sign_type=<span class="string">"RSA2"</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">            debug=<span class="literal">True</span>  <span class="comment"># 默认False</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 支付宝交易查询接口：alipay.api_alipay_trade_query(订单号)</span></span><br><span class="line">        response = alipay.api_alipay_trade_query(order)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> response.get(<span class="string">"code"</span>) != <span class="string">"10000"</span> <span class="keyword">or</span> response.get(<span class="string">"trade_status"</span>) != <span class="string">"TRADE_SUCCESS"</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"code"</span>: <span class="number">405</span>, <span class="string">"message"</span>: <span class="string">"开通失败"</span>&#125;)</span><br><span class="line">        order_id = Order.objects.filter(order=order, uid=int(user_id)).first()</span><br><span class="line">        <span class="comment"># 将支付状态修改为已支付</span></span><br><span class="line"></span><br><span class="line">        order_id.is_succeed = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 查询开通的会员级别</span></span><br><span class="line">        vip = VIP.objects.filter(grade=order_id.behoof).first()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改对应用户的vip级别</span></span><br><span class="line">        user = User.objects.get(id=int(user_id))</span><br><span class="line">        user.vid = vip.id</span><br><span class="line"></span><br><span class="line">        user.vip_start_time = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">        order_id.save()</span><br><span class="line">        user.save()</span><br><span class="line">        <span class="comment"># 提交所有修改</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"code"</span>: <span class="number">200</span>, <span class="string">"message"</span>: <span class="string">"恭喜您，会员开通成功"</span>&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>沙箱支付</category>
      </categories>
      <tags>
        <tag>支付宝</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu命令大全</title>
    <url>/2020/04/23/Ubuntu/Ubuntu%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p>cd .. // 返回上一级目录</p>
<a id="more"></a>

<p>cd - // 返回上一次目录</p>
<p>cd或cd ~ // 返回家目录</p>
<p>cd / // 进入根目录</p>
<p>pwd // 显示当前目录</p>
<p>ls // 显示当前目录文件</p>
<p>ls localrepo/ // 显示指定目录的文件</p>
<p>ll // 查看目录文件的的详细信息</p>
<p>la // 查看全部包括隐藏的目录文件</p>
<p>tree // 查看当前目录文件树</p>
<p>tree mydir // 查看指定目录的文件树</p>
<p>touch hello.py // 创建空文件</p>
<p>mkdir mydir // 创建文件夹</p>
<p>mkdir -p a/b/c // 创建层级目录</p>
<p>mkdir -p a/{b,c}/{d,e} // 同一级创建多个文件夹</p>
<p>cp hello.py ~/hello2.py // 拷贝文件</p>
<p>cp hello.py -i hello2.py // 拷贝文件，如果有同名文件询问是否覆盖</p>
<p>cp hello.py -f hello2.py // 拷贝文件，如果有同名文件强制覆盖</p>
<p>cp hello.py -n hello2.py // 拷贝文件，如果有同名文件不覆盖</p>
<p>mv hello2.py hellocp.py // 重命名文件</p>
<p>mv hello.py ~/Desktop // 移动文件</p>
<p>rm hellocp.py // 删除文件</p>
<p>rm -rf localrepo/ // 递归删除目录</p>
<p>find ~/Desktop/ -name ‘*.py’ // 在指定目录中查找文件</p>
<p>whereis python // 查找可执行程序</p>
<p>which python // 查看当前使用的是哪个目录中的python</p>
<p>ln -s /usr/bin/python ./mypylink // 创建可执行程序的软链接</p>
<p>alias rrm=’rm -rf’ // 给命令起别名，需要root权限(不建议使用)</p>
<p>history // 查看命令历史</p>
<p>clear // 清屏(快捷键Ctrl+l)</p>
<p><strong>@命令速查</strong></p>
<p>rm –help // 查看rm命令帮助</p>
<p>man rm // 查看rm命令的手册解释</p>
<p>info rm // 查看rm命令详细信息</p>
<p><strong>@更多查找</strong></p>
<p>find ~/ -name ‘*.py’ -exec rm {} ;    查找家目录下所有的py文件并删除，{}与exec结合匹配所有文件</p>
<p>find ~/ -name ‘*.py’ -exec chown wife {} ;        查找家目录下所有py文件并将所有权转让给wife用户</p>
<p>find ~/ -name ‘*.py’ -exec cat {} ;&gt; record.txt    查找文件并将全部内容拼接并写入文件中</p>
<p>find ~/ -name ‘*.py’ -exec cp {} mydir ;        查找文件并拷贝到指定目录</p>
<p>grep ‘def.*’ a.py    在a.py中查找指定内容</p>
<p>grep ‘def.*’ a.py b.py c.py    在多个文件中寻找指定内容</p>
<p>grep -v ‘def.*’ a.py    在a.py中查找指定内容以外的内容</p>
<p>grep -i “HELLO” a.py    在a.py中查找指定内容并忽略大小写</p>
<p>grep -E “[1-9]+” a.py    在a.py中查找正则表达式匹配的内容（匹配1到多个数字）</p>
<p>grep -F “[1-9]+” a.py    在a.py中查找纯文本内容（严格匹配字符串”[1-9]+”）</p>
<p>grep -e “def.*” -e “class.*” a.py    在a.py中查找多个内容</p>
<p>grep “text” ./ -r -n    在当前目录下递归查找内容</p>
<p><strong>@系统管理</strong></p>
<p>poweroff    关机</p>
<p>reboot    重启</p>
<p>shutdown -h 12:00    定时关机</p>
<p>shutdown -h now        立刻关机</p>
<p>shutdown -c            取消定时关机</p>
<p>#结合1,查看所有CPU平均负载/每个CPU的具体负载</p>
<p>#结合M/P/T,按内存占用/CPU占用/运行时间的降序，查看进程信息</p>
<p>top                    显示所有系统任务</p>
<p>free -m             查看内存占用，以M为单位</p>
<p>uname -a            打印操作系统信息</p>
<p>uptime -p            查看系统运行时间</p>
<p>echo $PATH            查看环境变量</p>
<p>export PATH=$PATH:/home/sirouyang/Desktop/    追加环境变量</p>
<p>lsof | head -n 10    查看进程打开的文件（一切皆文件，数据文件、网络连接、硬件设备）</p>
<p>lscpu                查看CPU信息</p>
<p>time lsof        统计命令执行时间</p>
<p>cal/date            查看日历和时间</p>
<p>date +%y-%m-%d-%H-%M-%S    格式化地查看时间</p>
<p># 0-6:0停机-1单用户安全模式-2多用户安全模式-3多用户网络模式-4系统保留级别-5图形界面-6重启</p>
<p>runlevel        显示当前运行级别</p>
<p>init 6            切换运行级别</p>
<p><strong>@软件安装</strong></p>
<p>//方式一：通过包管理工具apt进行管理</p>
<p>sudo apt update // 更新软件源</p>
<p>sudo apt search xxx//查找xxx软件包</p>
<p>sudo apt install net-tools //安装net-tools</p>
<p>sudo apt remove –purge net-tools //彻底卸载net-tools</p>
<p>//方式二：编译源码</p>
<p>wget “http://………..xxx.tar.gz” //下载源码包</p>
<p>tar -zxvf xxx.tar.gz //解压源码包</p>
<p>make clean    清除编译的垃圾</p>
<p>make        执行编译</p>
<p>make install    安装</p>
<p>make uninstall    卸载</p>
<p>可选：./configure    如果源码包中自带配置程序则执行之</p>
<p>可选：sudo apt search libxxx //如果编译失败通常会提示缺少xxx依赖，此时应该搜索并安装该依赖</p>
<p>可选：sudo apt install libxxx-dev //安装检索到的依赖</p>
<p><strong>@文本命令</strong></p>
<p>cat hello.py // 查看文件</p>
<p>gedit hello.py // 使用gedit查看文件</p>
<p>head -n 10 hello.py // 查看前10行</p>
<p>tail -n 10 hello.py // 查看后10行</p>
<p>less hello.py // 一次查看少量内容，PageUp和PageDown键翻页</p>
<p>vim hello.py // 使用vim打开文件</p>
<p><strong>@管道与重定向</strong></p>
<p>sort hello.py | uniq -c // 排序后统计次数</p>
<p>sort hello.py | uniq -d // 排序后找出重复的行</p>
<p>cat /proc/cpuinfo | grep -c processor // 显示CPU核心数</p>
<p>echo ‘newline’ &gt; hello.py // 将结果写入文件（覆盖）</p>
<p>echo ‘newline’ &gt;&gt; hello.py // 将结果追加到文件</p>
<p>cat &lt; ~/proc/cpuinfo //将指定的文件作为cat的输入</p>
<p><strong>@压缩和解压</strong></p>
<p>tar -cvf /home/abc.tar /home/abc  只打包，不压缩（c=创建压缩包,v=打印信息,f=指定文件名）</p>
<p>tar -zcvf /home/abc.tar.gz /home/abc  打包，并用gzip压缩</p>
<p>tar -jcvf /home/abc.tar.bz2 /home/abc  打包，并用bzip2压缩</p>
<p>tar -xvf abc.tar 解压普通tar包(x=解压缩)</p>
<p>tar -zxvf abc.tar.gz 解压gz压缩包</p>
<p>tar -jxvf abc.tar.bz2 解压bz2压缩包</p>
<p>zip -r xxx.zip abc/* fuck/* temp/* 递归压缩多个文件夹到xxx.zip</p>
<p>unzip xxx.zip #解压zip压缩包</p>
<p><strong>@磁盘管理</strong></p>
<p>df -h /                    查看磁盘使用情况</p>
<p>sudo du -h ~            查看用户目录的磁盘使用情况</p>
<p>du -sh                    当前目录的总体占用情况</p>
<p>du abc.tar.gz abc.tar    查看文件和目录的磁盘占用</p>
<p>dd if=/dev/zero of=temp.txt bs=1K count=1024    写入一个充满0的文件，每块1K，共1024块，总大小1M</p>
<p>time dd if=/dev/zero of=temp.txt bs=1M count=1024    测试写入1G文件的时间（以此衡量磁盘的读写效率）</p>
<p><strong>@登录日志</strong></p>
<p>last 查看用户近期登陆情况</p>
<p>last -2 最近登陆的两个用户</p>
<p>last -2 root 查看root用户最近两次登陆情况</p>
<p>id    显示用户及其群组信息</p>
<p>groups    查看当前用户所加入的组</p>
<p>whoami    显示当前用户名称</p>
<p><strong>@用户与权限</strong></p>
<p>groups // 查看所属的工作组</p>
<p>whoami // 显示当前用户名称</p>
<p>sudo useradd -m wife // 新建wife用户，-m=自动创建家目录</p>
<p>sudo useradd -d /home/myson -m son //创建son用户，指定其家目录为/home/myson</p>
<p>sudo useradd -g guests -G root,adm -m him //创建him用户，属于group组，其次也属于adm,root组</p>
<p>sudo useradd -G guests,sudo -m -s /bin/bash mywife // 新增一个用户,-m=自动创建家目录,-s指定bash</p>
<p>userdel rose 删除rose 账号</p>
<p>userdel -r rose 删除用户及相关目录下的文件（/etc/passwd, /etc/shadow, /etc/group等）</p>
<p>usermod -s /bin/ksh -d /home/z –g developer him // 修改him用户的shell、家目录、所属组等信息</p>
<p>sudo passwd // 修改自己的密码</p>
<p>sudo passwd mywife // 修改mywife的密码</p>
<p>sudo su mywife // 切换用户</p>
<p>sudo su // 切换到root用户</p>
<p>sudo groupadd guests // 添加guests组</p>
<p>sudo groupadd -g 101 group1 //添加组group1，识别号为101</p>
<p>groupdel group1 //删除组</p>
<p>groupmod –g 10000 -n group3 group2 //将组group2的标识号改为10000，组名修改为group3</p>
<p>gpasswd -a u1 g1 将u1 加入到 g1 组</p>
<p>gpasswd -d u1 g1 将u1 退出 g1 组</p>
<p>gpasswd -A u1 g1 将g1 组的管理员指派给u1</p>
<p>chmod 421 hello.py // 设置自己、用户组、其他人的权限分别为只读、只写、只执行</p>
<p>chmod a+r,u+wx,g+x,o-wx hello.py // 详细修改全部用户、拥有者、用户组、其他人的权限</p>
<p>/etc/passwd文件说明：</p>
<p>是用户管理工作涉及的最重要的一个文件</p>
<p>内容包含7个字段，例如 him❌200:50:Sam san:/usr/sam:/bin/sh</p>
<p>含义分别为 用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p>
<p><strong>@网络管理</strong></p>
<p>sudo apt install net-tools 安装网络工具</p>
<p>ifconfig // 查看网卡状态</p>
<p>ping 192.168.59.129    // 检查网络是否连通</p>
<p>wget “<a href="http://download.redis.io/releases/redis-4.0.9.tar.gz&quot;" target="_blank" rel="noopener">http://download.redis.io/releases/redis-4.0.9.tar.gz&quot;</a> // 下载redis</p>
<p>sudo apt install traceroute 安装路径追踪工具</p>
<p>traceroute -m 100 <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a>        追踪路由信息，最大100跳</p>
<p>netstat -t        列出所有TCP端口</p>
<p>netstat -r        显示路由表</p>
<p>netstat -i        显示接口（网卡）列表</p>
<p>netstat -tpnl    查看已连接的TCP端口和程序名</p>
<p>netstat -anp | grep 3306 -c        查看MySQL的连接数</p>
<p><strong>@远程登录</strong></p>
<p>//安装并启动ssh服务</p>
<p>sudo apt install openssh-server 安装openssh-server</p>
<p>sudo ps -ef | grep ssh 查看SSH服务是否启动，还可以netstat -tl | grep 22或systemctl status ssh</p>
<p>sudo systemctl start ssh 如果没有启动则启动SSH服务</p>
<p>//访问远程主机（前提：对方开启了ssh服务，且你知道对方的密码，或对方持有你的ssh公钥）</p>
<p>ssh <a href="mailto:root@127.0.0.1">root@127.0.0.1</a> 访问远程主机</p>
<p>exit 退出远程访问</p>
<p>//执行远程拷贝</p>
<p>scp -r <a href="mailto:sirouyang@192.168.158.129">sirouyang@192.168.158.129</a>:/abc /home/wife/Desktop/        从远程主机拷贝内容到本地</p>
<p>scp -r /abc <a href="mailto:sirouyang@192.168.158.129">sirouyang@192.168.158.129</a>:/home/sirouyang/Desktop/    从本地拷贝内容弄到远程主机（对方没有本地的公钥时需要密码认证）</p>
<p># ssh公钥交换过程：远程主机持有本地的公钥时，ssh以及scp可以免密执行</p>
<p>ssh-keygen -t rsa    生成ssh秘钥对</p>
<p>scp ~/.ssh/id_rsa.pub <a href="mailto:sirouyang@192.168.158.129">sirouyang@192.168.158.129</a>:/home/sirouyang/.ssh/    上传公钥给远程主机</p>
<p>ssh <a href="mailto:sirouyang@192.168.158.129">sirouyang@192.168.158.129</a>    ssh登录远程主机</p>
<p>cat Desktop/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys    操作远程主机添加公钥认证（今后远程对本地ssh免密）</p>
<p>//一站式让远程持有自己的公钥</p>
<p>ssh-copy-id <a href="mailto:sirouyang@192.168.158.128">sirouyang@192.168.158.128</a>    让远程持有自己的公钥（对方不必添加公钥到authorized_keys）</p>
<p>如果远程持有自己的公钥后依然无法免密登录，需要修改配置文件，请参考： <a href="https://blog.csdn.net/b_x_p/article/details/78534423" target="_blank" rel="noopener">https://blog.csdn.net/b_x_p/article/details/78534423</a></p>
<p><strong>@进程管理</strong></p>
<p>ps -ef // 查看所有进程（包括登录的其它用户的进程）</p>
<p>ps -aux //查看所有进程（仅当前用户的进程）</p>
<p>ps -ef | grep redis    // 查找redis进程</p>
<p>kill -9 77157    // 强行杀死指定pid的进程</p>
<p>kill -15 77157    // 终止指定进程</p>
<p><strong>@服务管理</strong></p>
<p>#chkconfig服务管理</p>
<p>apt-get install sysv-rc-conf    安装chkconfig服务</p>
<p>cp /usr/sbin/sysv-rc-conf /usr/sbin/chkconfig    重命名一下可执行程序</p>
<p>chkconfig –list            查看所有服务的开机启动状态</p>
<p>chkconfig –list mysqld        查看mysql的开机启动状态</p>
<p>chkconfig mysqld on            设置mysql开机启动</p>
<p>chkconfig mysqld off        禁止mysql开机启动</p>
<p>sudo apt install firewalld    安装firewalld</p>
<p>firewall-cmd –state        查看防火墙状态</p>
<p>#原生的service服务管理</p>
<p>service mysql start            启动mysql</p>
<p>service mysql stop            停止mysql</p>
<p>service mysql restart        重启mysql</p>
<p>/etc/init.d/mysql start        启动mysql</p>
<p>/etc/init.d/mysql stop        停止mysql</p>
<p>/etc/init.d/mysql restart    重启mysql</p>
<p>#systemctl服务管理（推荐方式）</p>
<p>systemctl status firewalld        查看服务状态</p>
<p>systemctl start firewalld         启动服务</p>
<p>systemctl stop firewalld         停止服务</p>
<p>systemctl restart firewalld     重启服务</p>
<p>systemctl is-enabled firewalld     查看是否开机启动</p>
<p>systemctl enable firewalld        设置服务开机自启</p>
<p>systemctl disable firewalld     禁止服务开机自启</p>
<p><strong>@其它命令</strong></p>
<p>ls -i /usr/bin/python //查看文件的inode</p>
<p>ln /usr/bin/python ./phln // 创建硬链接（共享文件入口）(硬链接不能跨磁盘)</p>
<p>source ~/.bashrc // 使修改后的bashrc生效</p>
<p><strong>@一键安装Ubuntu常用库</strong></p>
<p>sudo apt install man gcc make sudo lsof ssh openssl tree vim dnsutils iputils‑ping net‑</p>
<p>tools psmisc sysstat curl telnet traceroute wget libbz2‑dev libpcre3 libpcre3‑dev</p>
<p>libreadline‑dev libsqlite3‑dev libssl‑dev zlib1g‑dev git mysql‑server mysql‑client zip</p>
<p>p7zip golang-go libncurses5-dev libmysqlclient-dev</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04设置国内源</title>
    <url>/2020/04/23/Ubuntu/Ubuntu18.04%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    <content><![CDATA[<p>　　Ubuntu本身的源使用的是国内的源，下载速度比较慢，不像CentOS一样yum安装的时候对镜像站点进项选择， </p>
<a id="more"></a>

<p>　　所以选择了更换成国内的源。<br>　　以下内容整合自网络</p>
<h2 id="备份-etc-apt-sources-list文件"><a href="#备份-etc-apt-sources-list文件" class="headerlink" title="备份/etc/apt/sources.list文件"></a>备份/etc/apt/sources.list文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sourses.list.backup</span><br></pre></td></tr></table></figure>

<h2 id="新建-etc-apt-sources-list文件并添加以下内容"><a href="#新建-etc-apt-sources-list文件并添加以下内容" class="headerlink" title="新建/etc/apt/sources.list文件并添加以下内容"></a>新建/etc/apt/sources.list文件并添加以下内容</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 新建sources.<span class="type">list</span></span><br><span class="line"><span class="section">touch</span> /etc/apt/sources.<span class="type">list</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开sources.list文件</span></span><br><span class="line"><span class="comment"># 如果没有安装vim命令，可以手动添加</span></span><br><span class="line">sudo gedit /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 添加完成后保存，然后关闭</span></span><br><span class="line"><span class="comment"># 如果已经安装了vim命令，可以直接执行以下命令</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 输入i，进入编辑，添加一下代码：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#163源</span></span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">添加后按Esc退出编辑模式</span><br><span class="line">输入：:wq    <span class="comment"># 保存退出</span></span><br></pre></td></tr></table></figure>

<h2 id="更改完成之后执行以下命令"><a href="#更改完成之后执行以下命令" class="headerlink" title="更改完成之后执行以下命令"></a>更改完成之后执行以下命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure>

<h2 id="其他的一些apt命令"><a href="#其他的一些apt命令" class="headerlink" title="其他的一些apt命令"></a>其他的一些apt命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update  更新源</span><br><span class="line">sudo apt-get install package 安装包</span><br><span class="line">sudo apt-get remove package 删除包</span><br><span class="line">sudo apt-cache search package 搜索软件包</span><br><span class="line">sudo apt-cache show package  获取包的相关信息，如说明、大小、版本等</span><br><span class="line">sudo apt-get install package --reinstall  重新安装包</span><br><span class="line">sudo apt-get -f install  修复安装</span><br><span class="line">sudo apt-get remove package --purge 删除包，包括配置文件等</span><br><span class="line">sudo apt-get build-dep package 安装相关的编译环境</span><br><span class="line">sudo apt-get upgrade 更新已安装的包</span><br><span class="line">sudo apt-get dist-upgrade 升级系统</span><br><span class="line">sudo apt-cache depends package 了解使用该包依赖那些包</span><br><span class="line">sudo apt-cache rdepends package 查看该包被哪些包依赖</span><br><span class="line">sudo apt-get <span class="built_in">source</span> package  下载该包的源代码</span><br><span class="line">sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</span><br><span class="line">sudo apt-get check 检查是否有损坏的依赖</span><br></pre></td></tr></table></figure>

<h2 id="其他几个国内的源："><a href="#其他几个国内的源：" class="headerlink" title="其他几个国内的源："></a>其他几个国内的源：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#中科大源</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#阿里云源</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">#清华源</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>axios封装</title>
    <url>/2020/04/21/Vue/axios%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>　　封装请求的方式有多种多样，目的是可以管理vue项目中axios请求的路由。</p>
<a id="more"></a>

<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 在下面目录中创建文件</span><br><span class="line">components/axios_api/http.js</span><br></pre></td></tr></table></figure>

<h2 id="Vue-axios封装"><a href="#Vue-axios封装" class="headerlink" title="Vue-axios封装"></a>Vue-axios封装</h2><p>　　<strong>封装到文件：components/axios_api/http.js中</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">axios.defaults.baseURL=<span class="string">"http://127.0.0.1:8000/"</span></span><br><span class="line">axios.defaults.timeout = <span class="number">10000</span>;</span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/json'</span>;</span><br><span class="line">axios.defaults.headers.put[<span class="string">'Content-Type'</span>] = <span class="string">'application/json'</span>;</span><br><span class="line"></span><br><span class="line">axios.interceptors.request.use(    </span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="comment">// 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了</span></span><br><span class="line">        <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span><br><span class="line">        <span class="keyword">const</span> token = sessionStorage.getItem(<span class="string">"jwt_token"</span>)        </span><br><span class="line">        token &amp;&amp; (config.headers.Authorization = token)        </span><br><span class="line">        <span class="keyword">return</span> config;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    error =&gt; &#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.error(error);    </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios.interceptors.response.use(    </span><br><span class="line">    <span class="comment">// 请求成功</span></span><br><span class="line">    res =&gt; res.status === <span class="number">200</span> ? <span class="built_in">Promise</span>.resolve(res) : <span class="built_in">Promise</span>.reject(res),    </span><br><span class="line">    <span class="comment">// 请求失败</span></span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; response &#125; = error;</span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">            <span class="comment">// 请求已发出，但是不在2xx的范围 </span></span><br><span class="line">            errorHandle(response.status, response.data.message);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 处理断网的情况</span></span><br><span class="line">            <span class="comment">// eg:请求超时或断网时，更新state的network状态</span></span><br><span class="line">            <span class="comment">// network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏</span></span><br><span class="line">            <span class="comment">// 关于断网组件中的刷新重新获取数据，会在断网组件中说明</span></span><br><span class="line">            store.commit(<span class="string">'changeNetwork'</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">axios_get</span>(<span class="params">url,params</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">        (resolve,reject)=&gt;&#123;</span><br><span class="line">            axios.get(url,&#123;<span class="attr">params</span>:params&#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"封装信息的的res"</span>,res)</span><br><span class="line">                resolve(res.data)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                reject(err.data)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">axios_post</span>(<span class="params">url,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">        (resolve,reject)=&gt;&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">            axios.post(url,<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">            .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"封装信息的的res"</span>,res)</span><br><span class="line">                resolve(res.data)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                reject(err.data)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">axios_put</span>(<span class="params">url,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">        (resolve,reject)=&gt;&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">            axios.put(url,<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">            .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"封装信息的的res"</span>,res)</span><br><span class="line">                resolve(res.data)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                reject(err.data)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">axios_delete</span>(<span class="params">url,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">        (resolve,reject)=&gt;&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">            axios.delete(url,&#123;<span class="attr">params</span>:data&#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"封装信息的的res"</span>,res)</span><br><span class="line">                resolve(res.data)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                reject(err.data)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="导出使用："><a href="#导出使用：" class="headerlink" title="导出使用："></a>导出使用：</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;axios_get,axios_post,axios_delete,axios_put&#125; <span class="keyword">from</span> <span class="string">'./http.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> jwt_send_get = <span class="function"><span class="params">p</span>  =&gt;</span> axios_get(<span class="string">"/appjwt/index01/"</span>,p)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>axios</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置密钥</title>
    <url>/2020/04/21/Git/git%E9%85%8D%E7%BD%AE%E5%AF%86%E9%92%A5/</url>
    <content><![CDATA[<p>1.本地安装好git；</p>
<p>2.桌面右键 Git Bash Here 打开git命令行；</p>
<a id="more"></a>

<p>3.ssh-keygen -t rsa -C “<a href="mailto:XXXXX@XXX.com">XXXXX@XXX.com</a>“   （你的邮箱,全部按enter）；</p>
<p>4.cd ~/.ssh   （如果没有执行第三步，则不会有这个文件夹）；</p>
<p>5.cat id_rsa.pub     在命令行打开这个文件，会直接输出密钥；</p>
<p>6.复制，打开github   ，点自己头像 &gt;&gt; settings &gt;&gt; SSH and GPG keys &gt;&gt;New SSH key </p>
<p>7.titile  随便写。  key里    粘贴第六步的内容；完成。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2020/04/21/Git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="1-强制推送（慎用，除非你认为其他冲突等可以丢弃-或者不是很重要）"><a href="#1-强制推送（慎用，除非你认为其他冲突等可以丢弃-或者不是很重要）" class="headerlink" title="1.强制推送（慎用，除非你认为其他冲突等可以丢弃 或者不是很重要）"></a>1.强制推送（慎用，除非你认为其他冲突等可以丢弃 或者不是很重要）</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git push <span class="comment">-- force</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-创建文件等小命令"><a href="#2-创建文件等小命令" class="headerlink" title="2.创建文件等小命令"></a>2.创建文件等小命令</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">touch a <span class="comment">// 创建一个a文件</span></span><br><span class="line">echo 1234 &gt;&gt; a <span class="comment">// 把1234这个内容放入a文件</span></span><br><span class="line"><span class="keyword">cat</span> a <span class="comment">// 打开a文件 读取出a文件中的内容</span></span><br><span class="line"><span class="keyword">mkdir</span> <span class="keyword">test</span> <span class="comment">// 创建test文件夹</span></span><br><span class="line"><span class="keyword">rm</span> 文件名 <span class="comment">// 删除文件</span></span><br><span class="line"><span class="keyword">pwd</span> <span class="comment">// 打印当前工作路径</span></span><br></pre></td></tr></table></figure>

<h3 id="3-安装git的时候-都会安装git-bash和git-GUI-我们完全也可以使用git-GUI来提交版本-与sourcetree等功能相同"><a href="#3-安装git的时候-都会安装git-bash和git-GUI-我们完全也可以使用git-GUI来提交版本-与sourcetree等功能相同" class="headerlink" title="3.安装git的时候 都会安装git bash和git GUI 我们完全也可以使用git GUI来提交版本 与sourcetree等功能相同"></a>3.安装git的时候 都会安装git bash和git GUI 我们完全也可以使用git GUI来提交版本 与sourcetree等功能相同</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">gitk <span class="comment">// 用git命令快速打开git GUI</span></span><br></pre></td></tr></table></figure>

<h3 id="4-文件信息"><a href="#4-文件信息" class="headerlink" title="4.文件信息"></a>4.文件信息</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> <span class="string">//</span> 查看当前路径下面的所有文件名</span><br><span class="line"><span class="keyword">ls</span> 文件夹名 <span class="string">//</span> 查看对应文件夹中的内容</span><br><span class="line"><span class="keyword">ls</span> -l <span class="string">//</span> 拉出最近git提交记录以及对应修改的文件名</span><br><span class="line"><span class="keyword">ls</span> -l -a <span class="string">//</span> 拉出最近git提交记录以及对应修改的文件名，隐藏的文件也会显示</span><br></pre></td></tr></table></figure>

<h3 id="5-cd快速切换路径"><a href="#5-cd快速切换路径" class="headerlink" title="5.cd快速切换路径"></a>5.cd快速切换路径</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~ <span class="string">//</span> 将工作路径快速切换到root</span><br><span class="line"><span class="keyword">cd</span> - <span class="string">//</span> 将工作路径切换到上一状态</span><br><span class="line"><span class="keyword">cd</span> <span class="string">../</span> <span class="string">//</span> 切回到上一个工作路径</span><br><span class="line"><span class="keyword">cd</span> 文件夹名 <span class="string">//</span> 进入某个目录</span><br><span class="line"><span class="keyword">cd</span> / <span class="string">//</span> 进入根目录</span><br></pre></td></tr></table></figure>

<h3 id="6-vim模式"><a href="#6-vim模式" class="headerlink" title="6.vim模式"></a>6.vim模式</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">vim 文件名 <span class="string">//</span> 新建一个文件</span><br><span class="line">i 插入内容</span><br><span class="line">按下esc <span class="function">:wq</span> 保存并退出</span><br><span class="line">按下esc <span class="function">:q</span> 直接退出</span><br><span class="line">vim 模式下 文件中<span class="comment">#号开头的为注释</span></span><br><span class="line"><span class="string">.project</span> 忽略<span class="string">.project</span>文件</span><br><span class="line">*<span class="string">.obj</span> 或者 *<span class="string">.exe</span> 忽略一类文件 例如以<span class="string">.obj</span> <span class="string">.exe</span> 结尾的文件</span><br><span class="line">git check-ignore -v <span class="string">.project</span> 查看ignore中<span class="string">.project</span>的位置</span><br></pre></td></tr></table></figure>

<h3 id="7-常用git-命令"><a href="#7-常用git-命令" class="headerlink" title="7.常用git 命令"></a>7.常用git 命令</h3><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">git init <span class="comment">// 初始化 在工作路径上创建主分支</span></span><br><span class="line">git clone 地址 <span class="comment">// 克隆远程仓库</span></span><br><span class="line">git clone -b 分支名 地址 <span class="comment">// 克隆分支的代码到本地</span></span><br><span class="line">git status <span class="comment">// 查看状态</span></span><br><span class="line">git <span class="keyword">add</span> 文件名 <span class="comment">// 将某个文件存入暂存区</span></span><br><span class="line">git <span class="keyword">add</span> b c <span class="comment">//把b和c存入暂存区</span></span><br><span class="line">git <span class="keyword">add</span> . <span class="comment">// 将所有文件提交到暂存区</span></span><br><span class="line">git <span class="keyword">add</span> -p 文件名 <span class="comment">// 一个文件分多次提交</span></span><br><span class="line">git stash -u -k <span class="comment">// 提交部分文件内容 到仓库 例如本地有3个文件 a b c 只想提交a b到远程仓库 git add a b 然后 git stash -u -k 再然后git commit -m "备注信息" 然后再push push之后 git stash pop 把之前放入堆栈的c拿出来 继续下一波操作</span></span><br><span class="line">git commit -m <span class="string">"提交的备注信息"</span>  <span class="comment">// 提交到仓库</span></span><br><span class="line">若已经有若干文件放入仓库，再次提交可以不用git <span class="keyword">add</span>和git commit -m <span class="string">"备注信息"</span> 这<span class="number">2</span>步， 直接用</span><br><span class="line">git commit -am <span class="string">"备注信息"</span> <span class="comment">// 将内容放至仓库 也可用git commit -a -m "备注信息"</span></span><br><span class="line"></span><br><span class="line">* git commit中的备注信息尽量完善 养成良好提交习惯 例如 git commit -m <span class="string">"变更(范围)：变更的内容"</span></span><br></pre></td></tr></table></figure>

<h3 id="8-存储密码凭证-设置别名-获取config信息以及配置"><a href="#8-存储密码凭证-设置别名-获取config信息以及配置" class="headerlink" title="8.存储密码凭证 设置别名 获取config信息以及配置"></a>8.存储密码凭证 设置别名 获取config信息以及配置</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">config</span> --list <span class="comment">// 获取config信息</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> core<span class="variable">.safecrlf</span> false <span class="comment">// 去掉git add 命令后 出现的一堆CR LF提示信息</span></span><br><span class="line">其中CR是回车的意思 LF是换行</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> credential<span class="variable">.helper</span> wincred <span class="comment">// 存储凭证 (可用于输入一次用户密码后，不再输入 有时我们已经用SSH key 绑定关联好了 但是每次git提交的时候 还是需要你输入用户名密码 在这个时候 敲入这个命令 将凭证存储起来 用户名密码就不需要再次输入了)</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> <span class="keyword">alias</span><span class="variable">.ci</span> commit <span class="comment">// 将commit命令设置别名ci git commit命令将由git ci来代替</span></span><br></pre></td></tr></table></figure>

<h3 id="9-查看git常用命令"><a href="#9-查看git常用命令" class="headerlink" title="9.查看git常用命令"></a>9.查看git常用命令</h3><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">helper</span> -a <span class="comment">// 查看全部git子命令</span></span><br></pre></td></tr></table></figure>

<h3 id="10-逐行查看文件的修改历史"><a href="#10-逐行查看文件的修改历史" class="headerlink" title="10.逐行查看文件的修改历史"></a>10.逐行查看文件的修改历史</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">git blame 文件名 <span class="comment">// 查看该文件的修改历史</span></span><br><span class="line">git blame -L <span class="number">100</span>,<span class="number">10</span> 文件名 <span class="comment">// 从100行开始，到110行 逐行查看文件的修改历史</span></span><br></pre></td></tr></table></figure>

<h3 id="11-清除"><a href="#11-清除" class="headerlink" title="11.清除"></a>11.清除</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">git clean -n <span class="comment">// 列出打算清除的档案(首先会对工作区的内容进行提示)</span></span><br><span class="line">git clean -f <span class="comment">// 真正的删除</span></span><br><span class="line">git clean -x -f <span class="comment">// 连.gitignore中忽略的档案也删除</span></span><br><span class="line">git status -sb (sb是 <span class="keyword">short</span> branch) <span class="comment">// 简洁的输出git status中的信息</span></span><br></pre></td></tr></table></figure>

<h3 id="12-删除放入暂存区文件的方法（已commit后）"><a href="#12-删除放入暂存区文件的方法（已commit后）" class="headerlink" title="12.删除放入暂存区文件的方法（已commit后）"></a>12.删除放入暂存区文件的方法（已commit后）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git rm 文件名 // 将该文件从<span class="keyword">commit</span>后撤回到<span class="keyword">add</span>后</span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>^ <span class="comment">--hard // 删除后 可以用git rm 文件名再回撤一步</span></span><br></pre></td></tr></table></figure>

<h3 id="13-查看提交内容"><a href="#13-查看提交内容" class="headerlink" title="13.查看提交内容"></a>13.查看提交内容</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">git hi <span class="number">-5</span> <span class="comment">// 查看前5条内容</span></span><br><span class="line">git hi --grep hello <span class="comment">// 过滤提交信息里有hello字眼的内容</span></span><br></pre></td></tr></table></figure>

<h3 id="14-修改文件名以及移动"><a href="#14-修改文件名以及移动" class="headerlink" title="14.修改文件名以及移动"></a>14.修改文件名以及移动</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git mv <span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="comment">// 把a文件名字改成b 并且直接放入git add后的暂存区</span></span><br><span class="line">git mv <span class="selector-tag">b</span> ./demos/ <span class="comment">// 把b文件移动到demos文件夹下</span></span><br></pre></td></tr></table></figure>

<h3 id="15-对比工作区，暂存区，仓库的差异"><a href="#15-对比工作区，暂存区，仓库的差异" class="headerlink" title="15.对比工作区，暂存区，仓库的差异"></a>15.对比工作区，暂存区，仓库的差异</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">git diff <span class="comment">// 查看变更 工作区与暂存区的差异比对</span></span><br><span class="line">git diff --cached <span class="comment">// 暂存区与提交版本的差异</span></span><br><span class="line">git diff HEAD <span class="comment">// 工作区与仓库中最后一次提交版本的差别</span></span><br><span class="line">git diff 版本哈希值 版本哈希值 <span class="comment">// 查看这2个版本哈希之间的区别</span></span><br><span class="line">或者 git diff HEAD~数字 HEAD~数字</span><br><span class="line"></span><br><span class="line">git tag tt HEAD~<span class="number">4</span> 给倒数第<span class="number">5</span>次提交打一个tag tag名字是tt</span><br><span class="line">git diff tt 就是倒数第<span class="number">5</span>个版本与第一个版本之间的差异</span><br><span class="line">git diff --cached tt 暂存区与倒数第<span class="number">5</span>个版本之间的比对</span><br></pre></td></tr></table></figure>

<h3 id="16-查看提交信息"><a href="#16-查看提交信息" class="headerlink" title="16.查看提交信息"></a>16.查看提交信息</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">show</span> <span class="keyword">HEAD</span> // 查看最后一次提交修改的详细信息 也可以用git <span class="keyword">show</span> 哈希值 查看对应的内容</span><br><span class="line">git <span class="keyword">show</span> <span class="keyword">HEAD</span>^ // 查看倒数第二次的提交修改详细信息</span><br><span class="line">git <span class="keyword">show</span> <span class="keyword">HEAD</span>^^ 或者git <span class="keyword">show</span> <span class="keyword">HEAD</span>~<span class="number">2</span> 查看前<span class="number">2</span>次变更</span><br><span class="line">git <span class="keyword">show</span> <span class="keyword">HEAD</span> 或 git <span class="keyword">show</span> 哈希值 或者git <span class="keyword">show</span> tag(标签名) 都可以查看最近一次提交的详细信息</span><br></pre></td></tr></table></figure>

<h3 id="17-查看信息"><a href="#17-查看信息" class="headerlink" title="17.查看信息"></a>17.查看信息</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment">--pretty=format:'%h %ad | %s%d [%an]' --graph --date=short</span></span><br><span class="line">// 获取git <span class="built_in">log</span>里的树形详细信息 包括hasg 日期 提交信息 提交人等</span><br><span class="line">git <span class="built_in">log</span> <span class="comment">--oneline //拉出所有提交信息 q是退出</span></span><br><span class="line">git <span class="built_in">log</span> <span class="number">-5</span><span class="comment"> // 查看前5次的提交记录</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">--oneline -5 // 打印出的日志里面只有哈希值和修改的内容备注</span></span><br><span class="line">git <span class="built_in">log</span> 文件名<span class="comment"> // 查看该文件的提交</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">--grep // 想过滤看到的内容   过滤日志</span></span><br><span class="line">git <span class="built_in">log</span> -n<span class="comment"> // 查看近期提交的n条信息内容</span></span><br><span class="line">git <span class="built_in">log</span> -p<span class="comment"> // 查看详细提交记录</span></span><br></pre></td></tr></table></figure>

<h3 id="18-变基操作，改写历史提交-把多次提交合并起来"><a href="#18-变基操作，改写历史提交-把多次提交合并起来" class="headerlink" title="18.变基操作，改写历史提交 把多次提交合并起来"></a>18.变基操作，改写历史提交 把多次提交合并起来</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~<span class="number">3</span> 变基之后的哈希值与之前的不同 证明变基是重新做的提交 把多次提交合并成了几次提交</span><br></pre></td></tr></table></figure>

<h3 id="19-回撤操作"><a href="#19-回撤操作" class="headerlink" title="19.回撤操作"></a>19.回撤操作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">commit</span> <span class="comment">--amend -m "提交信息" // 回撤上一次提交并与本次工作区一起提交</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>~<span class="number">2</span> <span class="comment">--hard // 回撤2步</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--files // 从仓库回撤到暂存区</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span> // 回撤暂存区内容到工作目录</span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span> <span class="comment">--soft 回撤提交到暂存区</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span> <span class="comment">--hard // 回撤提交 放弃变更 (慎用)</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span>^  // 回撤仓库最后一次提交</span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard commitid // 回撤到该次提交id的位置</span></span><br><span class="line"></span><br><span class="line">git push -f -u origin 分支名 所有内容都回撤完了 将回撤后的操作强制推送到远程分支</span><br></pre></td></tr></table></figure>

<h3 id="20-标签操作"><a href="#20-标签操作" class="headerlink" title="20.标签操作"></a>20.标签操作</h3><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">tag</span> <span class="comment">// 查看列出所有打过的标签名</span></span><br><span class="line">git <span class="built_in">tag</span> <span class="params">-d</span> 标签名 <span class="comment">// 删除对应标签</span></span><br><span class="line">git <span class="built_in">tag</span> 标签名字 <span class="comment">// 在当前仓库打个标签</span></span><br><span class="line">git <span class="built_in">tag</span> foo <span class="params">-m</span> <span class="string">"message"</span> <span class="comment">// 在当前提交上，打标签foo 并给message信息注释</span></span><br><span class="line">git <span class="built_in">tag</span> 标签名 哈希值 <span class="params">-m</span> <span class="string">"message"</span> <span class="comment">// 在某个哈希值上打标签并且写上标签的信息</span></span><br><span class="line">git <span class="built_in">tag</span> foo HEAD~<span class="number">4</span> <span class="comment">// 在当前提交之前的第4个版本上 打标签foo</span></span><br><span class="line">git push origin -<span class="params">-tags</span> <span class="comment">// 把所有打好的标签推送到远程仓库</span></span><br><span class="line">git push origin 标签名 <span class="comment">// 把指定标签推送到远程仓库</span></span><br><span class="line">git stash <span class="comment">// 把暂存区的内容 暂时放在其他中 使暂存区变空</span></span><br><span class="line">git stash <span class="built_in">list</span> <span class="comment">// 查看stash了哪些存储</span></span><br><span class="line">git stash pop <span class="comment">// 将stash中的内容恢复到当前目录，将缓存堆栈中的对应stash删除</span></span><br><span class="line">git stash apply <span class="comment">// 将stash中的内容恢复到当前目录，不会将缓存堆栈中的对应stash删除</span></span><br><span class="line">git stash clear <span class="comment">// 删除所有缓存的stash</span></span><br><span class="line">git pull -<span class="params">-tags</span> <span class="comment">// 把远程仓库的标签也拉取下来</span></span><br><span class="line">git push origin :refs/tags/远程标签名 <span class="comment">// 删除远程仓库的标签</span></span><br></pre></td></tr></table></figure>

<h3 id="21-分支"><a href="#21-分支" class="headerlink" title="21.分支"></a>21.分支</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">git branch 分支名 <span class="comment">// 新建分支</span></span><br><span class="line">git branch <span class="comment">// 查看当前所有分支</span></span><br><span class="line">git checkout 分支名 <span class="comment">// 检出分支</span></span><br><span class="line">git checkout -b 分支名 <span class="comment">// 创建并切换分支</span></span><br><span class="line">git checkout commitId 文件名（文件路径下的文件名） 还原这个文件到对应的commitId的版本</span><br><span class="line">（例如src<span class="regexp">/page/</span>attendance<span class="regexp">/attendanceSum.vue我想把它还原到2个版本之前 首先git log src/</span>page<span class="regexp">/attendance/</span>attendanceSum.vue找到对应想要还原的版本</span><br><span class="line">复制版本提交的commitID 然后执行git checkout commitID src<span class="regexp">/page/</span>attendance/attendanceSum.vue</span><br><span class="line">这样就把attendanceSum.vue这个单个文件 还原到了对应版本）</span><br><span class="line">git branch -v <span class="comment">// 查看分支以及提交hash值和commit信息</span></span><br><span class="line">git merge 分支名 <span class="comment">// 把该分支的内容合并到现有分支上</span></span><br><span class="line">git branch -d 分支名 <span class="comment">// 删除分支</span></span><br><span class="line">git branch -D 分支名 <span class="comment">// 强制删除 若没有其他分支合并就删除 d会提示 D不会</span></span><br><span class="line">git branch -m 旧分支名 新分支名 <span class="comment">// 修改分支名</span></span><br><span class="line">git branch -M 旧分支名 新分支名 <span class="comment">// 修改分支名 M强制修改 若与其他分支有冲突也会创建(慎用)</span></span><br><span class="line">git branch -r <span class="comment">// 列出远程分支(远程所有分支名)</span></span><br><span class="line">git branch -a <span class="comment">// 查看远程分支(列出远程分支以及本地分支名)</span></span><br><span class="line">git fetch <span class="comment">// 更新remote索引</span></span><br><span class="line">git push -u origin 分支名 <span class="comment">// 将本地分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown语法</title>
    <url>/2020/04/21/Other/MarkDown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="欢迎使用Markdown编辑器"><a href="#欢迎使用Markdown编辑器" class="headerlink" title="欢迎使用Markdown编辑器"></a>欢迎使用Markdown编辑器</h1><p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p>
<a id="more"></a>

<h2 id="新的改变"><a href="#新的改变" class="headerlink" title="新的改变"></a>新的改变</h2><p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p>
<ol>
<li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li>
<li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li>
<li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li>
<li>全新的 <strong>KaTeX数学公式</strong> 语法；</li>
<li>增加了支持<strong>甘特图的mermaid语法<a href="[mermaid语法说明](https://mermaidjs.github.io/)">^1</a></strong> 功能；</li>
<li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li>
<li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li>
<li>增加了 <strong>检查列表</strong> 功能。</li>
</ol>
<h2 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h2><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd><br>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd><br>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p>
<h2 id="合理的创建标题，有助于目录的生成"><a href="#合理的创建标题，有助于目录的生成" class="headerlink" title="合理的创建标题，有助于目录的生成"></a>合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p>
<h2 id="如何改变文本的样式"><a href="#如何改变文本的样式" class="headerlink" title="如何改变文本的样式"></a>如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p>
<p><strong>加粗文本</strong> <strong>加粗文本</strong></p>
<p>==标记文本==</p>
<p><del>删除文本</del></p>
<blockquote>
<p>引用文本</p>
</blockquote>
<p>H<del>2</del>O is是液体。</p>
<p>2^10^ 运算结果是 1024.</p>
<h2 id="插入链接与图片"><a href="#插入链接与图片" class="headerlink" title="插入链接与图片"></a>插入链接与图片</h2><p>链接: <a href="https://www.csdn.net/" target="_blank" rel="noopener">link</a>.</p>
<p>图片:<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</span>)</span><br></pre></td></tr></table></figure>



<p>带尺寸的图片: </p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" style="zoom:30%">

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30</span>)</span><br></pre></td></tr></table></figure>



<p>居中的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" style="align-center:center"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</span>)</span><br></pre></td></tr></table></figure>



<p>居中并且带尺寸的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" style="align-center:center;zoom:30%"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30</span>)</span><br></pre></td></tr></table></figure>



<p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p>
<h2 id="如何插入一段漂亮的代码片"><a href="#如何插入一段漂亮的代码片" class="headerlink" title="如何插入一段漂亮的代码片"></a>如何插入一段漂亮的代码片</h2><p>去<a href="https://mp.csdn.net/console/configBlog" target="_blank" rel="noopener">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// An highlighted block</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="生成一个适合你的列表"><a href="#生成一个适合你的列表" class="headerlink" title="生成一个适合你的列表"></a>生成一个适合你的列表</h2><ul>
<li>项目<ul>
<li>项目<ul>
<li>项目</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>项目1</li>
<li>项目2</li>
<li>项目3</li>
</ol>
<ul>
<li><input disabled="" type="checkbox"> 计划任务</li>
<li><input checked="" disabled="" type="checkbox"> 完成任务</li>
</ul>
<h2 id="创建一个表格"><a href="#创建一个表格" class="headerlink" title="创建一个表格"></a>创建一个表格</h2><p>一个简单的表格是这么创建的：<br>| 项目 | Value |<br>| —- | —– |<br>| 电脑 | $1600 |<br>| 手机 | $12   |<br>| 导管 | $1    |</p>
<h3 id="设定内容居中、居左、居右"><a href="#设定内容居中、居左、居右" class="headerlink" title="设定内容居中、居左、居右"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右<br>|     第一列     |         第二列 | 第三列         |<br>| :————: | ————-: | :————- |<br>| 第一列文本居中 | 第二列文本居右 | 第三列文本居左 |</p>
<h3 id="SmartyPants"><a href="#SmartyPants" class="headerlink" title="SmartyPants"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：<br>|    TYPE   |ASCII                          |HTML<br>|—————-|——————————-|—————————–|<br>|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |’Isn’t this fun?’            |<br>|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |”Isn’t this fun?”            |<br>|Dashes          |<code>-- is en-dash, --- is em-dash</code>|– is en-dash, — is em-dash|</p>
<h2 id="创建一个自定义列表"><a href="#创建一个自定义列表" class="headerlink" title="创建一个自定义列表"></a>创建一个自定义列表</h2><dl><dt>Markdown</dt><dd>Text-to-HTML conversion tool</dd></dl><dl><dt>Authors<br>:  John</dt><dd>Luke</dd></dl><h2 id="如何创建一个注脚"><a href="#如何创建一个注脚" class="headerlink" title="如何创建一个注脚"></a>如何创建一个注脚</h2><p>一个具有注脚的文本。<a href="注脚的解释">^2</a></p>
<h2 id="注释也是必不可少的"><a href="#注释也是必不可少的" class="headerlink" title="注释也是必不可少的"></a>注释也是必不可少的</h2><p>Markdown将文本转换为 HTML。</p>
<p>*[HTML]:   超文本标记语言</p>
<h2 id="KaTeX数学公式"><a href="#KaTeX数学公式" class="headerlink" title="KaTeX数学公式"></a>KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/" target="_blank" rel="noopener">KaTeX</a>:</p>
<p>Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分</p>
<p>$$<br>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt,.<br>$$</p>
<blockquote>
<p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">here</a>.</p>
</blockquote>
<h2 id="新的甘特图功能，丰富你的文章"><a href="#新的甘特图功能，丰富你的文章" class="headerlink" title="新的甘特图功能，丰富你的文章"></a>新的甘特图功能，丰富你的文章</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section 现有任务</span><br><span class="line">        已完成               :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        进行中               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        计划一               :         des3, after des2, 5d</span><br><span class="line">        计划二               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure>
<ul>
<li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">这儿</a>,</li>
</ul>
<h2 id="UML-图表"><a href="#UML-图表" class="headerlink" title="UML 图表"></a>UML 图表</h2><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">Mermaid</a>. 例如下面产生的一个序列图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?</span><br><span class="line">李四--&gt;&gt;王五: 你最近怎么样，王五？</span><br><span class="line">李四--x 张三: 我很好，谢谢!</span><br><span class="line">李四-x 王五: 我很好，谢谢!</span><br><span class="line">Note right of 王五: 李四想了很长时间, 文字太长了&lt;br&#x2F;&gt;不适合放在一行.</span><br><span class="line"></span><br><span class="line">李四--&gt;&gt;张三: 打量着王五...</span><br><span class="line">张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</span><br></pre></td></tr></table></figure>

<p>这将产生一个流程图。:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[长方形] -- 链接 --&gt; B((圆))</span><br><span class="line">A --&gt; C(圆角长方形)</span><br><span class="line">B --&gt; D&#123;菱形&#125;</span><br><span class="line">C --&gt; D</span><br></pre></td></tr></table></figure>

<ul>
<li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">这儿</a>,</li>
</ul>
<h2 id="FLowchart流程图"><a href="#FLowchart流程图" class="headerlink" title="FLowchart流程图"></a>FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flowchat</span><br><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line">op&#x3D;&gt;operation: 我的操作</span><br><span class="line">cond&#x3D;&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>

<ul>
<li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">这儿</a>.</li>
</ul>
<h2 id="导出与导入"><a href="#导出与导入" class="headerlink" title="导出与导入"></a>导出与导入</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p>
<h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p>
]]></content>
      <categories>
        <category>MarkDown语法</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>文明上网实现正常访问google网站</title>
    <url>/2020/04/02/Google/%E6%96%87%E6%98%8E%E4%B8%8A%E7%BD%91%E5%AE%9E%E7%8E%B0%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AEgoogle%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>　　国内文明上网，实现正常访问Google网站</p>
<a id="more"></a>
<p>　　你们知道在国内为什么无法访问Google网站么？有兴趣的小伙伴可以百度搜索一下，我这里就不多说了<br>我们都知道，Google是搜索引擎界的大哥大，而我们在国内却无法使用，是不是感觉非常遗憾？在这里，我来告诉大家，<br>在国内，同样可以正常访问Google旗下的所有网站的方法：</p>
<h2 id="安装Chrome浏览器以及下载插件"><a href="#安装Chrome浏览器以及下载插件" class="headerlink" title="安装Chrome浏览器以及下载插件"></a>安装Chrome浏览器以及下载插件</h2><p>　　1、Chrome浏览器自行安装，这里不多说<br>　　2、其次，访问网站：<a href="https://chrome.zzzmh.cn/index" target="_blank" rel="noopener">https://chrome.zzzmh.cn/index</a><br>　　　　2.1、在网站首页右侧，点击：谷歌上网助手<span style="color:red">(图一)</span><br>　　　　2.2、点击后进入页面，在右侧有小贴士提示：<br>　　　　　　　请注意：本页面的版本原作者已停止更新，请点击跳转新版本 谷歌上网助手 Ghelper Beta<span style="color:red">(图二)</span><br>　　　　2.3、点击进入最新版本下载页面进行下载<span style="color:red">(图三)</span></p>
<h2 id="如图："><a href="#如图：" class="headerlink" title="如图："></a>如图：</h2><img src="https://gitee.com/tian_yu_ting/blog_img/raw/master/Google1.png" style="zoom:43%">

<p align="center" style="color:blue">图一</p>
<img src="https://gitee.com/tian_yu_ting/blog_img/raw/master/Google2.png" style="zoom:50%">

<p align="center" style="color:blue">图二</p>
<img src="https://gitee.com/tian_yu_ting/blog_img/raw/master/Google3.png" style="zoom:50%">

<p align="center" style="color:blue">图三</p>

<h2 id="解压插件并进行安装使用"><a href="#解压插件并进行安装使用" class="headerlink" title="解压插件并进行安装使用"></a>解压插件并进行安装使用</h2><p>　　1、将下载好的插件进行解压<span style="color:red">(图四)</span>，目标文件：<span style="color:red">Ghelper Beta_2.1.2_chrome.zzzmh.cn.crx</span><br>　　2、将目标文件拖到Chrome浏览器的插件管理中，进行安装<span style="color:red">(图五)</span>;注意：需打开Chrome浏览器右上角的开发者模式<span style="color:red">(图六)</span><br>　　3、当插件拖进去安装时，会出现提示框<span style="color:red">(图七)</span>，然后这里选择点击添加扩展程序，到这里，该插件基本上已经OK了<br>　　4、安装好之后，点击浏览器网址输入框右侧新安装的插件图标<span style="color:red">(图八)</span>，这里需要注册登录，不需要购买VIP哦<br>　　5、到这里就结束了，你现在就可以正常的访问Google旗下的网址了，而且你会发现，Chrome浏览器访问网页的速度变快了很多</p>
<h2 id="如图"><a href="#如图" class="headerlink" title="如图:"></a>如图:</h2><img src="https://gitee.com/tian_yu_ting/blog_img/raw/master/Google4.png" style="zoom:70%">

<p align="center" style="color:blue">图四</p>
<img src="https://gitee.com/tian_yu_ting/blog_img/raw/master/Google5.png" style="zoom:50%">

<p align="center" style="color:blue">图五</p>
<img src="https://gitee.com/tian_yu_ting/blog_img/raw/master/Google6.png" style="zoom:64%">

<p align="center" style="color:blue">图六</p>
<img src="https://gitee.com/tian_yu_ting/blog_img/raw/master/Google7.png" style="zoom:109%">

<p align="center" style="color:blue">图七</p>
<img src="https://gitee.com/tian_yu_ting/blog_img/raw/master/Google8.png" style="zoom:102%">

<p align="center" style="color:blue">图八</p>
## 总结

<p>　　Chrome是一款非常好用的浏览器，它可以安装多种插件，已满足用户的各种需求，更多功能需要自行慢慢研究探索哦</p>
]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>七牛云文件上传</title>
    <url>/2020/03/31/Vue/%E4%B8%83%E7%89%9B%E4%BA%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>‘’’</p>
<h2 id="七牛云密钥接口"><a href="#七牛云密钥接口" class="headerlink" title="七牛云密钥接口"></a>七牛云密钥接口</h2><a id="more"></a>
<h2 id="获取七牛云仓库密钥"><a href="#获取七牛云仓库密钥" class="headerlink" title="获取七牛云仓库密钥"></a>获取七牛云仓库密钥</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> qiniu <span class="keyword">import</span> Auth</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QiNiu</span><span class="params">(APIView)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    </span><br><span class="line">    	<span class="comment"># 生命一个密钥对象</span></span><br><span class="line">    	<span class="comment"># Auth(access_key,secret_key)</span></span><br><span class="line">    	q = Auth(<span class="string">'FrZcNsgzftewSOxOugEoFgQq93VQhHDv_UMAJ0P2'</span>,<span class="string">'30fYKbfMJEHaa9iBgvWHK0JdUyX_CMEtelS_RwXx'</span>)</span><br><span class="line">    	<span class="comment"># 生成令牌</span></span><br><span class="line">    	token = q.upload_token(<span class="string">'my-data-for-fcg'</span>,expires=<span class="number">30000</span>)</span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">return</span> Response(&#123;<span class="string">'uptoken'</span>:token&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="从后端获取七牛云令牌"><a href="#从后端获取七牛云令牌" class="headerlink" title="从后端获取七牛云令牌"></a>从后端获取七牛云令牌</h2><h2 id="令牌获取函数"><a href="#令牌获取函数" class="headerlink" title="令牌获取函数"></a>令牌获取函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">get_token()&#123;</span><br><span class="line">    <span class="keyword">this</span>.axios.get(<span class="string">'http://127.0.0.1:8000/uptoken/'</span>).then(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result.data)</span><br><span class="line">        <span class="keyword">this</span>.uptoken = result.data.uptoken;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>‘’’</p>
<p>‘’’</p>
<h2 id="将文件上传到七牛云仓库-并返回对应的连接和进度"><a href="#将文件上传到七牛云仓库-并返回对应的连接和进度" class="headerlink" title="将文件上传到七牛云仓库,并返回对应的连接和进度"></a>将文件上传到七牛云仓库,并返回对应的连接和进度</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上传七牛云</span></span><br><span class="line">upload_qiniu:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//声明文件对象</span></span><br><span class="line">    <span class="keyword">let</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//声明参数类型</span></span><br><span class="line">    <span class="keyword">let</span> param = <span class="keyword">new</span> FormData();</span><br><span class="line">    <span class="comment">//添加文件</span></span><br><span class="line">    param.append(<span class="string">'file'</span>,file);</span><br><span class="line">    param.append(<span class="string">'token'</span>,<span class="keyword">this</span>.uptoken);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.uptoken)</span><br><span class="line">    <span class="built_in">console</span>.log(file)</span><br><span class="line">    <span class="built_in">console</span>.log(param)</span><br><span class="line">    <span class="comment">//定制axios请求</span></span><br><span class="line">    <span class="keyword">const</span> axios_qiniu = <span class="keyword">this</span>.axios.create(&#123;<span class="attr">withCredentials</span>:<span class="literal">false</span>&#125;);</span><br><span class="line">    axios_qiniu(&#123;</span><br><span class="line"></span><br><span class="line">        method:<span class="string">'POST'</span>,</span><br><span class="line">        url:<span class="string">'http://up-z1.qiniu.com/'</span>,</span><br><span class="line">        data:param,</span><br><span class="line">        timeout:<span class="number">30000</span>,</span><br><span class="line">        <span class="comment">//上传进度捕捉,</span></span><br><span class="line">        onUploadProgress:<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 计算上传进度</span></span><br><span class="line">            <span class="comment">// loaded 已经上传的数据</span></span><br><span class="line">            <span class="comment">// total  全部的数据总量</span></span><br><span class="line">            <span class="keyword">let</span> complate = (e.loaded / e.total);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(complate &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.imageload = (complate * <span class="number">100</span>).toFixed(<span class="number">2</span>) + <span class="string">'%'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(result.data);</span><br><span class="line">        <span class="keyword">this</span>.url = <span class="string">'http://q68ml0e0k.bkt.clouddn.com/'</span> + result.data.key;</span><br><span class="line">        <span class="keyword">this</span>.imageload = <span class="string">'100%'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>QiNiu</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义购物车系统</title>
    <url>/2020/03/30/Vue/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B4%AD%E7%89%A9%E8%BD%A6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="七牛云文件上传"><a href="#七牛云文件上传" class="headerlink" title="七牛云文件上传"></a>七牛云文件上传</h2><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 将商品添加到购物车</span></span><br><span class="line">add_cart()&#123;</span><br><span class="line">    <span class="keyword">let</span> find = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 遍历购物车</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,l=<span class="keyword">this</span>.cartlist.length;i++)&#123;</span><br><span class="line">        <span class="comment">// 如果找到了</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.id == <span class="keyword">this</span>.cartlist[i][<span class="string">'id'</span>])&#123;</span><br><span class="line">            <span class="comment">// 将该商品的数量+1</span></span><br><span class="line">            <span class="keyword">this</span>.cartlist[i][<span class="string">'num'</span>]++;</span><br><span class="line">            find = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没找到</span></span><br><span class="line">    <span class="keyword">if</span>(find == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 将该商品放入购物车列表</span></span><br><span class="line">        <span class="keyword">this</span>.cartlist.push(&#123;</span><br><span class="line">            name:<span class="keyword">this</span>.name,</span><br><span class="line">            id: <span class="keyword">this</span>.id,</span><br><span class="line">            price: <span class="keyword">this</span>.price,</span><br><span class="line">            num: <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.cartlist)</span><br><span class="line">	<span class="comment">// 将购物车信息存储到LocalStorage</span></span><br><span class="line">	LocalStorage.setItem(<span class="string">'cart'</span>, <span class="built_in">JSON</span>.Stringify(<span class="keyword">this</span>.cartlist))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化购物车逻辑</span></span><br><span class="line"><span class="comment">// 此条需运行</span></span><br><span class="line">init_cart()&#123;</span><br><span class="line">    <span class="keyword">this</span>.cartlist = LocalStorage.getItem(<span class="string">'cart)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算购物车总数</span></span><br><span class="line"></span><br><span class="line">totalcount()&#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,l = <span class="keyword">this</span>.cartlist.length;i &lt; l;i++)&#123;</span><br><span class="line">        total += <span class="keyword">this</span>.cartlist[i].num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算商品价格</span></span><br><span class="line">totalprice()&#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,l=<span class="keyword">this</span>.cartlist.length;i &lt; l;i++)&#123;</span><br><span class="line">        total += (<span class="keyword">this</span>.cartlist[i].num + <span class="keyword">this</span>.cartlist[i].price)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Cart</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo主题如何将文章置顶</title>
    <url>/2020/03/15/Hexo/Hexo%E4%B8%BB%E9%A2%98%E5%A6%82%E4%BD%95%E5%B0%86%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/</url>
    <content><![CDATA[<p>　　想将写好的一些文章置顶，但是hexo好像默认不提供这个功能，希望以后的版本会有。</p>
<a id="more"></a>
<p>这里简单写一下实现hexo文章置顶功能</p>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>　　找到node_modules/hexo-generator-index/lib/generator.js这个文件。<br>　　在代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br></pre></td></tr></table></figure>

<p>　　下面添加以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 如果两篇文章top都有定义</span></span><br><span class="line">		<span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 如果top值一样则按照文章日期降序排</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; 		<span class="comment">// 否则按照top值降序排</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; 		<span class="comment">// 如果只有一篇文章top有定义，那么将有top的排在前面</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">            <span class="keyword">const</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line"></span><br><span class="line">            posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">                                <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">                                <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">                                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">            <span class="keyword">const</span> path = config.index_generator.path || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> pagination(path, posts, &#123;</span><br><span class="line">                perPage: config.index_generator.per_page,</span><br><span class="line">                layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">                format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    __index: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章名</span><br><span class="line">date: 文章发布时间</span><br><span class="line">tags: 文章标签</span><br><span class="line">top: 100(文章置顶)</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>　　迁移时，切莫忘记备份node_modules/hexo-generator-index/lib/generator.js这个文件</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何创建vue脚手架</title>
    <url>/2020/03/13/Vue/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAvue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<p>　　这是一篇教你如何设置国内源来快速安装Vue脚手架的教程</p>
<a id="more"></a>

<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>　　首先设置国内源，这样你的下载速度会非常快：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">npm set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>　　查看源：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm<span class="built_in"> config </span>list</span><br></pre></td></tr></table></figure>

<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>　　首先要卸载原有的vue版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall vue-cli -g</span><br></pre></td></tr></table></figure>

<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>　　安装vue：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @vue/cli -g</span><br></pre></td></tr></table></figure>

<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>　　创建项目前要先执行命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br></pre></td></tr></table></figure>

<p>　　执行完后再执行命令：(文件名自己取)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">vue init webpack 文件名</span><br></pre></td></tr></table></figure>


<p>　　安装过程中一次提示如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">project name（项目名称）	  <span class="comment"># 按回车</span></span><br><span class="line">project description（项目描述）	 <span class="comment"># 按回车</span></span><br><span class="line">author（作者）	 <span class="comment"># 按回车</span></span><br><span class="line">vue build（解释器）	 <span class="comment"># 按回车</span></span><br><span class="line">Install vue-router(路由) 		<span class="comment"># 按y按回车</span></span><br><span class="line">use aslantto lint your code(代码检查) 	<span class="comment"># 按n按回车</span></span><br><span class="line"><span class="built_in">set</span> up unit tests(测试模块) 	<span class="comment"># 按n按回车</span></span><br><span class="line">setup e2e tests with night watch(是否安装e2e) 	<span class="comment"># 按n按回车</span></span><br><span class="line">should we run ’npm install’(是否选择npm方式)	<span class="comment"># 选第一个，按回车</span></span><br></pre></td></tr></table></figure>

<h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>　　运行完之后：<br>    　　cd 到项目中，可以安装一些常用的包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install axios --save</span><br><span class="line">npm install style-loader —-save</span><br><span class="line">npm install heyui --save</span><br><span class="line">npm install js-md5 --save</span><br></pre></td></tr></table></figure>

<p>　　安装完之后可以直接启动：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>　　退出服务：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">ctrl + <span class="keyword">c</span></span><br></pre></td></tr></table></figure>

<h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>　　　　如果出现任何关于node依赖的问题导致服务无法启动，执行npm install无法解决的，则安装rimraf,然后进入项目目录下，<br>　　执行rimraf node_modules 删除后，重新执行 npm install 安装依赖<br>　　安装rimraf：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> rimraf -g</span><br></pre></td></tr></table></figure>

<p>　　删除node_modules：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rimraf node_modules</span></span><br></pre></td></tr></table></figure>

<p>　　重新安装node_modules：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitee取消输入用户名及密码</title>
    <url>/2020/03/13/Git/gitee%E5%8F%96%E6%B6%88%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%8F%8A%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>　　每次提交项目时，都会被要求输入用户名及密码，那么，我们应该如何跳过这一步骤呢？</p>
<a id="more"></a>
<p>本篇文章为您揭晓…</p>
<h2 id="第一步、查看通信方式"><a href="#第一步、查看通信方式" class="headerlink" title="第一步、查看通信方式"></a>第一步、查看通信方式</h2><p>　　在你的本地仓库中,打开命令窗口,执行以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>　　如果是：<br>　　　　origin  <a href="https://gitee.com/fortunamajor/um.git" target="_blank" rel="noopener">https://gitee.com/fortunamajor/um.git</a> (fetch)<br>　　　　origin  <a href="https://gitee.com/fortunamajor/um.git" target="_blank" rel="noopener">https://gitee.com/fortunamajor/um.git</a> (push)<br>　　则证明是https 通信，这样每次都会提示输入用户名和密码，然后我们将其修改为ssh绑定gitee仓库服务端</p>
<h2 id="第二步、通过以下命令删除原有origin的通信方式"><a href="#第二步、通过以下命令删除原有origin的通信方式" class="headerlink" title="第二步、通过以下命令删除原有origin的通信方式"></a>第二步、通过以下命令删除原有origin的通信方式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>

<h2 id="第三步、重新add-，通过ssh绑定gitee仓库服务端"><a href="#第三步、重新add-，通过ssh绑定gitee仓库服务端" class="headerlink" title="第三步、重新add ，通过ssh绑定gitee仓库服务端"></a>第三步、重新add ，通过ssh绑定gitee仓库服务端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@gitee.com:USERNAME/UM.git</span><br></pre></td></tr></table></figure>

<p>　　username填写gitee户名，um.git 填写仓库名.git<br>　　若怕输错，也可以去仓库里【克隆/下载】的地方，直接复制SSH路由</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/2020/03/13/Hexo/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>　　Hexo是一款非常流行且好用的个人博客模板，下面我们一起来看一下Hexo的常用命令是什么吧……</p>
<a id="more"></a>

<h2 id="常见命令："><a href="#常见命令：" class="headerlink" title="常见命令："></a>常见命令：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> 			<span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> 		<span class="comment">#新建页面</span></span><br><span class="line">hexo generate 				<span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server 					<span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy 					<span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  					<span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  					<span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>

<h2 id="缩写："><a href="#缩写：" class="headerlink" title="缩写："></a>缩写：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="组合命令："><a href="#组合命令：" class="headerlink" title="组合命令："></a>组合命令：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure>

<h2 id="写博客："><a href="#写博客：" class="headerlink" title="写博客："></a>写博客：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">定位到我们的hexo根目录，执行命令：</span><br><span class="line">	hexo new <span class="string">'my-first-blog'</span></span><br><span class="line">hexo会帮我们在`_posts`下生成相关md文件：</span><br><span class="line"><span class="comment"># 命令窗口中：</span></span><br><span class="line">F:\blog\hexo&gt;hexo new <span class="string">"my-first-blog"</span></span><br><span class="line">INFO  Created: F:\blog\hexo\<span class="built_in">source</span>\_posts\hexo常用命令-1.md</span><br></pre></td></tr></table></figure>

<p>　　我们只需要打开这个文件就可以开始写博客了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认生成如下内容：</span></span><br><span class="line">---</span><br><span class="line">title: my-first-blog</span><br><span class="line">date: 2013-12-02 15:30:16 </span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>　　当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般完整格式如下：</span></span><br><span class="line">---</span><br><span class="line">title: postName <span class="comment">#文章页面上的显示名称，一般是中文</span></span><br><span class="line">date: 2013-12-02 15:30:16 <span class="comment">#文章生成时间，一般不改，当然也可以任意修改</span></span><br><span class="line">categories: 默认分类 <span class="comment">#分类</span></span><br><span class="line">tags: [tag1,tag2,tag3] <span class="comment">#文章标签，可空，多标签请用格式，注意:后面有个空格</span></span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub访问及clone缓慢的方法</title>
    <url>/2020/03/12/Git/GitHub%E8%AE%BF%E9%97%AE%E5%8F%8Aclone%E7%BC%93%E6%85%A2%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>　　你们在访问GitHub网站时有没有出现加载缓慢，甚至加载失败的情况呢？</p>
<a id="more"></a>
<p>那么，这种情况该如何杜绝呢？请继续往下阅读……</p>
<h2 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h2><p>　　点击访问网址：<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a><br>　　在该网址中搜索：<br>　　　　github.global.ssl.fastly.net<br>　　　　github.com<br>　　得到相应的ip地址<span style="color:red">(如图一，图二)</span></p>
<h2 id="如图"><a href="#如图" class="headerlink" title="如图:"></a>如图:</h2><img src="http://q72tcv6j6.bkt.clouddn.com/GitHub%E8%AE%BF%E9%97%AE%E5%8F%8Aclone%E7%BC%93%E6%85%A2%E7%9A%84%E6%96%B9%E6%B3%951.png" style="zoom:67%;" />

<p style="color:blue;text-align:center">图一</p>
<img src="http://q72tcv6j6.bkt.clouddn.com/GitHub%E8%AE%BF%E9%97%AE%E5%8F%8Aclone%E7%BC%93%E6%85%A2%E7%9A%84%E6%96%B9%E6%B3%952.png" style="zoom:67%;" />

<p style="color:blue;text-align:center">图二</p>
第二步：
---

<p>　　找到个人电脑中的hosts文件，此文件在每个电脑上的路径基本上是一致的：C:\Windows\System32\drivers\etc<br>　　打开后将获取到的ip地址及网址添加到posts文件的最下面，保存后退出<br>　　例如：<br>　　　　151.101.185.194 github.global-ssl.fastly.net<br>　　　　192.30.253.112 github.com<br>　　注意：<br>　　　　因此文件在系统目录中，所以无法直接保存，可将posts文件复制到桌面进行修改<br>　　　　修改完成后粘贴到C:\Windows\System32\drivers\etc目录中进行取代之前的posts文件</p>
<h2 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h2><p>　　当第二步完成后，我们需要更新DNS<br>　　Winodws系统的做法：打开CMD，输入ipconfig /flushdns<br>　　Linux的做法：在终端输入sudo /etc/init.d/networking restart</p>
<h2 id="另："><a href="#另：" class="headerlink" title="另："></a>另：</h2><p>　　如果添加上面两条ip后无任何作用，可复制以下内容添加到posts文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">151.101.44.249 github.global.ssl.fastly.net</span><br><span class="line">192.30.253.113 github.com</span><br><span class="line">103.245.222.133 assets-cdn.github.com</span><br><span class="line">23.235.47.133 assets-cdn.github.com</span><br><span class="line">203.208.39.104 assets-cdn.github.com</span><br><span class="line">204.232.175.78 documentcloud.github.com</span><br><span class="line">204.232.175.94 gist.github.com</span><br><span class="line">107.21.116.220 help.github.com</span><br><span class="line">207.97.227.252 nodeload.github.com</span><br><span class="line">199.27.76.130 raw.github.com</span><br><span class="line">107.22.3.110 status.github.com</span><br><span class="line">204.232.175.78 training.github.com</span><br><span class="line">207.97.227.243 www.github.com</span><br><span class="line">185.31.16.184 github.global.ssl.fastly.net</span><br><span class="line">185.31.18.133 avatars0.githubusercontent.com</span><br><span class="line">185.31.19.133 avatars1.githubusercontent.com</span><br></pre></td></tr></table></figure>

<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>　　只要脑子不滑坡，办法总比困难多，祝各位机友越学越年轻，都能有自己满意的成果<br>　　如果感觉麻烦，或者不想修改电脑C盘中的文件，则可以参考我的另一篇文章来实现快速访问<a href="https://www.onlyyu.cn/2020/04/02/07/" target="_blank" rel="noopener">点击这里阅读</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云旗下ecs云服务器配置使用详情</title>
    <url>/2019/12/23/CentOS/%E9%98%BF%E9%87%8C%E4%BA%91%E6%97%97%E4%B8%8Becs%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E8%AF%A6%E6%83%85/</url>
    <content><![CDATA[<h2 id="前段时间-与朋友在阿里云平台上一起购买了一台云服务器"><a href="#前段时间-与朋友在阿里云平台上一起购买了一台云服务器" class="headerlink" title="前段时间,与朋友在阿里云平台上一起购买了一台云服务器"></a>前段时间,与朋友在阿里云平台上一起购买了一台云服务器</h2><h2 id="原定计划是安装ubuntu系统来使用-方便配置-后面因为我们两个侧重点都在python上-于是选择了本身自带python环境的centos系统-在这个过程中-遇到了各种各样的问题"><a href="#原定计划是安装ubuntu系统来使用-方便配置-后面因为我们两个侧重点都在python上-于是选择了本身自带python环境的centos系统-在这个过程中-遇到了各种各样的问题" class="headerlink" title="原定计划是安装ubuntu系统来使用,方便配置,后面因为我们两个侧重点都在python上,于是选择了本身自带python环境的centos系统,在这个过程中,遇到了各种各样的问题"></a>原定计划是安装ubuntu系统来使用,方便配置,后面因为我们两个侧重点都在python上,于是选择了本身自带python环境的centos系统,在这个过程中,遇到了各种各样的问题</h2><a id="more"></a>

<h2 id="我本身是负责服务器搭建这一块儿的-服务器这边的各种问题基本都是我一个人在折腾-到今天-基本已经完成架构-前后端项目也已经在服务器上跑了起来-于是腾出手来-把之前遇到的一些问题进行一下汇总"><a href="#我本身是负责服务器搭建这一块儿的-服务器这边的各种问题基本都是我一个人在折腾-到今天-基本已经完成架构-前后端项目也已经在服务器上跑了起来-于是腾出手来-把之前遇到的一些问题进行一下汇总" class="headerlink" title="我本身是负责服务器搭建这一块儿的,服务器这边的各种问题基本都是我一个人在折腾,到今天,基本已经完成架构,前后端项目也已经在服务器上跑了起来,于是腾出手来,把之前遇到的一些问题进行一下汇总"></a>我本身是负责服务器搭建这一块儿的,服务器这边的各种问题基本都是我一个人在折腾,到今天,基本已经完成架构,前后端项目也已经在服务器上跑了起来,于是腾出手来,把之前遇到的一些问题进行一下汇总</h2><h2 id="看到这篇文章的朋友如果有什么疑问-可以给作者发私信"><a href="#看到这篇文章的朋友如果有什么疑问-可以给作者发私信" class="headerlink" title="看到这篇文章的朋友如果有什么疑问,可以给作者发私信"></a>看到这篇文章的朋友如果有什么疑问,可以给作者发私信</h2><ol>
<li><h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><p>下载redis安装包</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget hhhttp:<span class="regexp">//</span>downloac.redis.io<span class="regexp">/releases/</span>redis-<span class="number">4.0</span>.<span class="number">6</span>.tar.gz</span><br></pre></td></tr></table></figure>

<p>解压压缩包</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">redis-4</span><span class="selector-class">.0</span><span class="selector-class">.6</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure>

<p>yum 安装gcc依赖</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> gcc</span><br></pre></td></tr></table></figure>

<p>跳转到redis解压目录下</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">cd redis<span class="number">-4.0</span><span class="number">.6</span></span><br></pre></td></tr></table></figure>

<p>编译安装</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span> MAKKOC=libc</span><br><span class="line"><span class="meta"># 将/usr/local/redis-4.0.6/src目录下的文件添加到/usr/local/bin 目录</span></span><br><span class="line">cd src &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 将原本绑定的ip127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>修改为<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"># 关闭保护模式</span><br><span class="line"><span class="keyword">protected</span>-mode yes 修改为no</span><br></pre></td></tr></table></figure>

<p>在服务器安全策略中开放6379端口</p>
</li>
<li><h1 id="阿里云服务器的图形界面"><a href="#阿里云服务器的图形界面" class="headerlink" title="阿里云服务器的图形界面"></a>阿里云服务器的图形界面</h1><p>​    阿里云的centos服务器,在安装图形界面之后,其实依然是无法访问的,我之前纠结于这个问题,直    到最后发现了这个问题.</p>
<p>​    在阿里云的远程连接,其实还有这个另外一个vnc选项,通过这个选项进行连接的话,将会自动帮你配置好图形化界面,而相反的是,如果你在默认的远程连接窗口进行图形化界面的配置的话,将会百分百的失败,失去响应</p>
<p>​    切记,在第一次进行vnc连接的时候,将会有一个远程连接密码生成</p>
<p>​    这个密码将会是固定的,一定要把他记下来,否则的话你将无法连接这个图形界面</p>
<h4 id="切记"><a href="#切记" class="headerlink" title="切记!!!"></a>切记!!!</h4></li>
<li><h1 id="Centos7本身的python环境问题"><a href="#Centos7本身的python环境问题" class="headerlink" title="Centos7本身的python环境问题"></a>Centos7本身的python环境问题</h1><p>centos7本身内置了一个2.7的python环境,在当前的版本下,很多功能都无法使用,所以推荐重新安装一个新版的python环境,否则你将会在使用过程中遇到诸如: python版本过低,无法安装包/pip版本过低,无法安装包/包已废弃…..等等情况,所以新人的话推荐还是稳妥一点,换一个自己顺手的版本</p>
</li>
<li><h1 id="部署Vue"><a href="#部署Vue" class="headerlink" title="部署Vue"></a>部署Vue</h1><p>Vue的部署比较简单,只需要将config/index.js中的关于ip和端口的配置修改即可,host修改为0.0.0.0,</p>
<p>端口的话可以随意设定,当然,设定完记得在服务器安全策略中开放对应的端口,以免出现端口无法访问的情况</p>
</li>
<li><h1 id="部署Django"><a href="#部署Django" class="headerlink" title="部署Django"></a>部署Django</h1><p>Django的部署,需要在settings设置中添加</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ALLOWED_HOSTS</span> = [<span class="string">'*'</span>]</span><br></pre></td></tr></table></figure>

<p>即允许任何ip访问,部署时使用 python manage.py runserver 0.0.0.0:8000 的形式进行启动</p>
</li>
</ol>
<p>​    </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 8安装nodejs</title>
    <url>/2019/06/08/CentOS/CentOS8%E5%AE%89%E8%A3%85node/</url>
    <content><![CDATA[<p>curl -sL <a href="https://rpm.nodesource.com/setup_10.x" target="_blank" rel="noopener">https://rpm.nodesource.com/setup_10.x</a> | bash -</p>
<p>yum install -y nodejs</p>
<p>[root@localhost /]# node -v<br>v10.9.0<br>[root@localhost /]# npm -v<br>6.2.0</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu配置数据库踩坑记录</title>
    <url>/2019/06/08/Ubuntu/Ububtu%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><a id="more"></a>
<p>ubuntu环境下安装MySQL数据库:</p>
<ul>
<li>sudo apt-get install mysql-server</li>
<li>sudo apt install  mysql-client</li>
<li>sudo apt install libmysqlclient-dev</li>
</ul>
<p>检查是否安装成功:</p>
<ul>
<li>sudo netstat -tap | grep mysql</li>
</ul>
<p>配置远程数据库访问权限:</p>
<ul>
<li>sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</li>
<li>修改该文件配置项</li>
<li>bind-address = 127.0.0.1</li>
<li>将此行数值修改为0.0.0.0</li>
</ul>
<p>进入mysql数据库:</p>
<ul>
<li>grant all on <em>.</em> to root@’%’ identified by ‘你的密码’ with grant option;</li>
<li>flush privileges;</li>
</ul>
<p>重启数据库:</p>
<ul>
<li>sudo service mysql restart</li>
</ul>
<p>完全删除数据库:</p>
<ul>
<li><pre><code>sudo apt-get remove mysql-*
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
dpkg -l |grep ^rc|awk &apos;{print $2}&apos; |sudo xargs dpkg -P</code></pre></li>
</ul>
<p>user = debian-sys-maint</p>
<p>password = NIbvCi0MJMQKWqmI</p>
<p>查看默认账户名和密码:</p>
<ul>
<li>sudo vi /etc/mysql/debian.cnf</li>
</ul>
<p>将密码修改:</p>
<ul>
<li>update user set authentication_string=password(‘000000’) where user=’root’ and host=’localhost’;</li>
<li>update mysql.user set plugin=’mysql_native_password’;</li>
<li>flush privileges</li>
</ul>
<hr>
<p>PS: </p>
<p>​        以上数据库修改之后,在进行远程仓库访问的时候,如果输入的命令为:</p>
<p>mysql -h ip地址 -p 3306 -u root -p</p>
<p>enter password:</p>
<p>​        当出现以上情况时,将会出现错误:</p>
<p>mysql: [Warning] Using a password on the command line interface can be insecure.<br>ERROR 1049 (42000): Unknown database ‘3306’</p>
<p>​        这个原因是因为密码password的缩写和端口port的缩写发生冲突,导致系统无法识别对应的密码</p>
<p>​        将命令改为:  mysql -h ip地址 -u root -p</p>
<p>enter password:</p>
<p>​        省略port 端口,</p>
<p>​        即可完成访问</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>进程线程协程</title>
    <url>/2019/05/27/Spider/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="异步多进程爬虫实现"><a href="#异步多进程爬虫实现" class="headerlink" title="异步多进程爬虫实现:"></a>异步多进程爬虫实现:</h2><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line">pool = Pool(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 准备网址列表</span></span><br><span class="line">url_list = [<span class="string">'www.baidu.com'</span>,<span class="string">'www.baidu.com'</span>,<span class="string">'www.baidu.com'</span>]</span><br><span class="line"><span class="comment"># 创建操作函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_requests</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 函数返回获取到的网页源码的数据</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url).text</span><br><span class="line"><span class="comment"># 将返回的页面源码数据接收</span></span><br><span class="line">request_text_list = pool.map(get_requests,url_list)</span><br></pre></td></tr></table></figure>





<h2 id="单线程多任务异步协程"><a href="#单线程多任务异步协程" class="headerlink" title="单线程多任务异步协程:"></a>单线程多任务异步协程:</h2><h3 id="正常协程实现"><a href="#正常协程实现" class="headerlink" title="正常协程实现:"></a>正常协程实现:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单协程写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> func(url):</span><br><span class="line">    print(<span class="string">'start'</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'stop'</span>)</span><br><span class="line">    </span><br><span class="line">f = func(url)</span><br><span class="line">task = asynic.ensure_future(f)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until+complete(task)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多重协程写法</span></span><br><span class="line"><span class="comment"># 多线程时,需要设置线程挂起,参考下列代码</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> func(url):</span><br><span class="line">    print(<span class="string">'start'</span>)</span><br><span class="line">    <span class="comment"># 在需要进行挂起的位置进行线程等待声明,即await</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'stop'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">urls = [</span><br><span class="line">	<span class="string">'www.baidu.com'</span>,  </span><br><span class="line">	<span class="string">'www.baidu.com'</span>, </span><br><span class="line">	<span class="string">'www.baidu.com'</span>, </span><br><span class="line">	<span class="string">'www.baidu.com'</span>, </span><br><span class="line">	<span class="string">'www.baidu.com'</span>      </span><br><span class="line">]</span><br><span class="line">tasks = []</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    f = func(url)</span><br><span class="line">    task = asynic.ensure_future(f)</span><br><span class="line">    <span class="comment"># 在创建好新的写成之后,将其添加到协程列表中</span></span><br><span class="line">    tasks.append(task)</span><br><span class="line"><span class="comment"># 创建事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 将协程列表注册到事件循环中去</span></span><br><span class="line"><span class="comment"># 在注册列表类型时，需要甚至线程挂起，所以需要使用asyncio。wait进行特殊声明</span></span><br><span class="line">loop.run_until+complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>



<h3 id="在使用协程进行网页爬取的时候，是无法使用await挂起的，也就是说，requests并不支持挂起："><a href="#在使用协程进行网页爬取的时候，是无法使用await挂起的，也就是说，requests并不支持挂起：" class="headerlink" title="在使用协程进行网页爬取的时候，是无法使用await挂起的，也就是说，requests并不支持挂起："></a>在使用协程进行网页爬取的时候，是无法使用await挂起的，也就是说，requests并不支持挂起：</h3><h3 id="在这个时候，需要使用支持await的请求模块。"><a href="#在这个时候，需要使用支持await的请求模块。" class="headerlink" title="在这个时候，需要使用支持await的请求模块。"></a>在这个时候，需要使用支持await的请求模块。</h3><h3 id="也就是aiohttp。"><a href="#也就是aiohttp。" class="headerlink" title="也就是aiohttp。"></a>也就是aiohttp。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 构建aiohttp请求</span></span><br><span class="line">    <span class="comment"># 每一次请求都需要对</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> a:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> <span class="keyword">await</span> a.get(url=url) <span class="keyword">as</span> response:</span><br><span class="line">            result = <span class="keyword">await</span> response.text()</span><br><span class="line">            print(result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">'https://www.baidu.com'</span>,</span><br><span class="line">    <span class="string">'https://www.baidu.com'</span>,</span><br><span class="line">    <span class="string">'https://www.baidu.com'</span></span><br><span class="line">]</span><br><span class="line">tasks = []</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    f = func(url)</span><br><span class="line">    task = asyncio.ensure_future(f)</span><br><span class="line">    tasks.append(task)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>

<p>在aiohttp中，和requests一样有get和post请求</p>
<p>这些请求的参数基本相同，</p>
<p>唯一不同的地方在于代理IP</p>
<p>在requests中，代理IP的类型是一个字典类型的数据，</p>
<p>但是在这里，代理IP的类型是一个字符串</p>
<p>同时参数名为proxy</p>
<h2 id="在通常情况下-不要使用asyncio"><a href="#在通常情况下-不要使用asyncio" class="headerlink" title="在通常情况下,不要使用asyncio!!!"></a>在通常情况下,不要使用asyncio!!!</h2><h2 id="在通常情况下-不要使用asyncio-1"><a href="#在通常情况下-不要使用asyncio-1" class="headerlink" title="在通常情况下,不要使用asyncio!!!"></a>在通常情况下,不要使用asyncio!!!</h2><h2 id="在通常情况下-不要使用asyncio-2"><a href="#在通常情况下-不要使用asyncio-2" class="headerlink" title="在通常情况下,不要使用asyncio!!!"></a>在通常情况下,不要使用asyncio!!!</h2><h3 id="在没有足够充足的代理与完善的伪装的时候-一定不要使用asyncio"><a href="#在没有足够充足的代理与完善的伪装的时候-一定不要使用asyncio" class="headerlink" title="在没有足够充足的代理与完善的伪装的时候,一定不要使用asyncio!"></a>在没有足够充足的代理与完善的伪装的时候,一定不要使用asyncio!</h3><h3 id="协程的恐怖性能足以让任何网站的程序发现-即使没有发现-过于高频的访问也足以击溃网站了"><a href="#协程的恐怖性能足以让任何网站的程序发现-即使没有发现-过于高频的访问也足以击溃网站了" class="headerlink" title="协程的恐怖性能足以让任何网站的程序发现,即使没有发现,过于高频的访问也足以击溃网站了!"></a>协程的恐怖性能足以让任何网站的程序发现,即使没有发现,过于高频的访问也足以击溃网站了!</h3>]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式爬虫实现原理与运行机制</title>
    <url>/2019/05/16/Spider/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="分布式爬虫"><a href="#分布式爬虫" class="headerlink" title="分布式爬虫"></a>分布式爬虫</h2><a id="more"></a>
<h2 id="什么是分布式爬虫"><a href="#什么是分布式爬虫" class="headerlink" title="什么是分布式爬虫:"></a>什么是分布式爬虫:</h2><ul>
<li><h5 id="基于多台电脑组建一个分布式机群-然后让集群中的每一台电脑执行同一组程序-然后让他们对同一个网站的数据进行分布爬取"><a href="#基于多台电脑组建一个分布式机群-然后让集群中的每一台电脑执行同一组程序-然后让他们对同一个网站的数据进行分布爬取" class="headerlink" title="基于多台电脑组建一个分布式机群,然后让集群中的每一台电脑执行同一组程序,然后让他们对同一个网站的数据进行分布爬取"></a>基于多台电脑组建一个分布式机群,然后让集群中的每一台电脑执行同一组程序,然后让他们对同一个网站的数据进行分布爬取</h5></li>
</ul>
<h2 id="使用分布式爬虫的目的"><a href="#使用分布式爬虫的目的" class="headerlink" title="使用分布式爬虫的目的:"></a>使用分布式爬虫的目的:</h2><ul>
<li><h5 id="提升数据爬取效率"><a href="#提升数据爬取效率" class="headerlink" title="提升数据爬取效率"></a>提升数据爬取效率</h5></li>
</ul>
<h2 id="如何实现分布式爬取"><a href="#如何实现分布式爬取" class="headerlink" title="如何实现分布式爬取:"></a>如何实现分布式爬取:</h2><ul>
<li><h5 id="基于-scrapy-redis-的形式实现分布式爬虫"><a href="#基于-scrapy-redis-的形式实现分布式爬虫" class="headerlink" title="基于 scrapy + redis  的形式实现分布式爬虫"></a>基于 scrapy + redis  的形式实现分布式爬虫</h5><ul>
<li><h5 id="scrapy结合scrapy-radis组件实现分布式"><a href="#scrapy结合scrapy-radis组件实现分布式" class="headerlink" title="scrapy结合scrapy-radis组件实现分布式"></a>scrapy结合scrapy-radis组件实现分布式</h5></li>
</ul>
</li>
</ul>
<h2 id="原生的scrapy是无法实现分布式爬虫的"><a href="#原生的scrapy是无法实现分布式爬虫的" class="headerlink" title="原生的scrapy是无法实现分布式爬虫的"></a>原生的scrapy是无法实现分布式爬虫的</h2><ul>
<li><h5 id="调度器无法实现共享-从而导致出现重复请求"><a href="#调度器无法实现共享-从而导致出现重复请求" class="headerlink" title="调度器无法实现共享,从而导致出现重复请求"></a>调度器无法实现共享,从而导致出现重复请求</h5></li>
<li><h5 id="管道无法实现共享-不利于数据汇总"><a href="#管道无法实现共享-不利于数据汇总" class="headerlink" title="管道无法实现共享,不利于数据汇总"></a>管道无法实现共享,不利于数据汇总</h5></li>
</ul>
<h2 id="scrapy-redis组件的作用"><a href="#scrapy-redis组件的作用" class="headerlink" title="scrapy-redis组件的作用:"></a>scrapy-redis组件的作用:</h2><ul>
<li><h5 id="提供可以被共享的调度器和管道"><a href="#提供可以被共享的调度器和管道" class="headerlink" title="提供可以被共享的调度器和管道"></a>提供可以被共享的调度器和管道</h5></li>
</ul>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置:"></a>环境配置:</h2><ul>
<li><h5 id="安装redis数据库"><a href="#安装redis数据库" class="headerlink" title="安装redis数据库"></a>安装redis数据库</h5></li>
<li><h5 id="pip-install-scrapy-redis"><a href="#pip-install-scrapy-redis" class="headerlink" title="pip install scrapy_redis"></a>pip install scrapy_redis</h5></li>
</ul>
<h2 id="编码流程"><a href="#编码流程" class="headerlink" title="编码流程:"></a>编码流程:</h2><ul>
<li><h5 id="创建一个工程"><a href="#创建一个工程" class="headerlink" title="创建一个工程"></a>创建一个工程</h5></li>
<li><h5 id="创建一个爬虫文件"><a href="#创建一个爬虫文件" class="headerlink" title="创建一个爬虫文件"></a>创建一个爬虫文件</h5><ul>
<li><h6 id="spider-和-CrawlSpider-都可以使用"><a href="#spider-和-CrawlSpider-都可以使用" class="headerlink" title="spider 和 CrawlSpider 都可以使用"></a>spider 和 CrawlSpider 都可以使用</h6></li>
<li><h6 id="修改爬虫文件"><a href="#修改爬虫文件" class="headerlink" title="修改爬虫文件"></a>修改爬虫文件</h6><ul>
<li><p>导入组件</p>
<ul>
<li><pre><code class="python"><span class="keyword">from</span> scrapy_redis.spider <span class="keyword">import</span> RedisSpider,RedisCrawlSpider
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 将创建好的爬虫文件类的父类修改为新导入的scrapy_redis的子类</span><br><span class="line"></span><br><span class="line">  - 将start_url替换掉,换成redis_key</span><br><span class="line"></span><br><span class="line">- ###### 修改settings</span><br><span class="line"></span><br><span class="line">  - 指定管道</span><br><span class="line"></span><br><span class="line">    - ```python</span><br><span class="line">      # 开启可被共享的管道</span><br><span class="line">      ITEM_PIPELINES = &#123;</span><br><span class="line">          <span class="string">'scrapy_redis.pipelines.RedisPipeline'</span>: <span class="number">300</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>指定调度器</p>
<ul>
<li><pre><code class="python"><span class="comment"># 指定使用可被共享的调度器</span>
<span class="comment"># 增加了一个去重容器类的配置,作用使用 Redis的set集合来存储请求的指纹数据,从而实现请求去重的持久化</span>
<span class="comment"># 对重复的请求对象去重</span>
DUPEFILTER_CLASS = <span class="string">'scrapy_redis.dupefilter.RFPDupeFilter'</span>
<span class="comment"># 使用scrapy_redis组件自己的调度器</span>
SCHEDULER = <span class="string">'scrapy_redis.scheduler.Scheduler'</span>
<span class="comment"># 配置调度器是否持久化,也就是说在爬虫运行结束之后要不要清除Redis中请求队列和去重指纹的set</span>
<span class="comment"># 这样实际上已经实现了增量式,也就是说,再次运行的时候,将不会将已经获取过的数据重复的获取,</span>
<span class="comment"># 增量式的概念就是:</span>
    <span class="comment"># 在创建爬虫之后,每次运行都会进行对比,紧紧对网站的更新内容进行爬取,而不会进行重复数据的重复获取,减少内存占用,同时也更加合理</span>
SCHEDULER_PERSIST = <span class="literal">True</span>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 置定redis服务</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    # REDIS_HOST = 'redis 服务器地址'</span><br><span class="line">    REDIS_HOST = '<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>'</span><br><span class="line">    REDIS_PORT = <span class="number">6379</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>redis配置文件redis.windows.conf</p>
<ul>
<li>bind 127.0.0.1<ul>
<li>将这行代码注释掉</li>
<li>接触127.0.0.1绑定,使其他电脑可以访问本机redis</li>
</ul>
</li>
<li>protected-mode yes<ul>
<li>将yes改为no,关闭redis数据保护,关闭后允许其他电脑修改本机redis 数据库</li>
</ul>
</li>
</ul>
</li>
<li><p>携带配置文件启动redis服务</p>
<ul>
<li>redis-server ./redis.windows.conf</li>
</ul>
</li>
<li><p>启动redis客户端</p>
</li>
<li><p>运行爬虫文件</p>
<ul>
<li>cd ./spiders</li>
<li>scrapy runspider spiderName.py</li>
</ul>
</li>
<li><p>向调度器放入起始的     <strong>url</strong>     </p>
<ul>
<li>队列的位置<ul>
<li>队列存储在队列中</li>
<li>lpush key value</li>
<li>按照爬虫中设定好的目标redis队列名称放入起始url</li>
<li>当你把起始url放入之后,将会自动开始爬取</li>
</ul>
</li>
</ul>
</li>
<li><p>爬虫文件运行之后将会把获取到的数据自动存储到redis中</p>
</li>
<li><p>数据存储到 spiderName:items, response存储到 spiderName:response</p>
</li>
<li><p>注意,在进行分布式的时候,redis 的ip地址必须保持精确,也就是说,想要做分布式最好使用一个内网连接机群</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>百度AI项目解析与使用</title>
    <url>/2019/05/12/Spider/%E7%99%BE%E5%BA%A6AI%E9%A1%B9%E7%9B%AE%E8%A7%A3%E6%9E%90%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="百度AI"><a href="#百度AI" class="headerlink" title="百度AI"></a>百度AI</h2><a id="more"></a>
<p>百度ai是开放性的库,在其中实现了包括文本识别,语言识别,声音识别,指纹识别,虹膜识别等各式各样基于人工智能AI的识别方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipNlp</span><br><span class="line"></span><br><span class="line"><span class="string">""" 你的 APPID AK SK """</span></span><br><span class="line">APP_ID = <span class="string">'18141048'</span></span><br><span class="line">API_KEY = <span class="string">'CPKSpk7Up1aATfxAaP9xln1O'</span></span><br><span class="line">SECRET_KEY = <span class="string">'miR2GGKYfx214xEGUO0i83cgFmD3T1Z3'</span></span><br><span class="line"></span><br><span class="line">client = AipNlp(APP_ID, API_KEY, SECRET_KEY)</span><br></pre></td></tr></table></figure>

<p>它的库是开放的,使用方法同样是开放的,所以我们在进行时使用的时候,可以直接调用对应的aip库中的识别方法,就可以将我们的数据分门别类地识别出来,</p>
<h2 id="提取关键字分类"><a href="#提取关键字分类" class="headerlink" title="提取关键字分类"></a>提取关键字分类</h2><ul>
<li><pre><code class="python">client.topic(title, content);
<span class="comment"># 文章分类,从标题与内容中提取关键字进行分类</span>
<span class="comment"># title,content都是必填</span>
<span class="comment"># 项判断词义相似度</span>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  client.wordSimEmbedding(word1, word2);</span><br><span class="line">  <span class="comment"># 判断两个对象的相似度</span></span><br><span class="line">  <span class="comment"># 这个结果判断的其实是两个对象的词义的相似度</span></span><br><span class="line">  <span class="comment"># 返回结果为:</span></span><br><span class="line">  <span class="string">'''</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">      "score": 0.456862,</span></span><br><span class="line"><span class="string">      # score 为该对象的相似度,</span></span><br><span class="line"><span class="string">      "words": &#123;</span></span><br><span class="line"><span class="string">        "word_1": "北京",</span></span><br><span class="line"><span class="string">        "word_2": "上海"</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">  &#125;'''</span></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h2 id="判断文本相似度"><a href="#判断文本相似度" class="headerlink" title="判断文本相似度"></a>判断文本相似度</h2><ul>
<li><pre><code class="python">text1 = <span class="string">"浙富股份"</span>

text2 = <span class="string">"万事通自考网"</span>

<span class="string">""" 调用短文本相似度 """</span>
client.simnet(text1, text2);

<span class="string">""" 如果有可选参数 """</span>
options = {}
options[<span class="string">"model"</span>] = <span class="string">"CNN"</span>

<span class="string">""" 带参数调用短文本相似度 """</span>
client.simnet(text1, text2, options)

<span class="string">'''</span>
<span class="string"># 这个结果匹配的是文本的相似度,也就是说,并不在乎其中的意义,比较的是其中的内容</span>
<span class="string">{</span>
<span class="string">    "log_id": 12345,</span>
<span class="string">    "texts":{</span>
<span class="string">        "text_1":"浙富股份",</span>
<span class="string">        "text_2":"万事通自考网"</span>
<span class="string">    },</span>
<span class="string">    "score":0.3300237655639648 //相似度结果</span>
<span class="string">},</span>
<span class="string">'''</span>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- <span class="meta">### 抽取关键字</span></span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  title = <span class="string">"iphone手机出现“白苹果”原因及解决办法，用苹果手机的可以看下"</span></span><br><span class="line">  </span><br><span class="line">  content = <span class="string">"如果下面的方法还是没有解决你的问题建议来我们门店看下成都市锦江区红星路三段99号银石广场24层01室。"</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">""</span><span class="string">" 调用文章标签 "</span><span class="string">""</span></span><br><span class="line">  client.keyword(title, content)<span class="comment">;</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta"># 提取标题与文章中的关键字信息,也就说文字节点,这一点能够方便我们更快的定位想要的信息,以及进行更加精确的信息分类</span></span><br><span class="line">  <span class="string">'''</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">"log_id"</span>: <span class="number">4457308639853058292</span>,</span><br><span class="line">      <span class="string">"items"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="string">"score"</span>: <span class="number">0.997762</span>,</span><br><span class="line">              <span class="string">"tag"</span>: <span class="string">"iphone"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="string">"score"</span>: <span class="number">0.861775</span>,</span><br><span class="line">              <span class="string">"tag"</span>: <span class="string">"手机"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="string">"score"</span>: <span class="number">0.845657</span>,</span><br><span class="line">              <span class="string">"tag"</span>: <span class="string">"苹果"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="string">"score"</span>: <span class="number">0.83649</span>,</span><br><span class="line">              <span class="string">"tag"</span>: <span class="string">"苹果公司"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="string">"score"</span>: <span class="number">0.797243</span>,</span><br><span class="line">              <span class="string">"tag"</span>: <span class="string">"数码"</span></span><br><span class="line">          &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="string">'''</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><h3 id="错别字纠正"><a href="#错别字纠正" class="headerlink" title="错别字纠正"></a>错别字纠正</h3></li>
<li><pre><code class="python">text = <span class="string">"百度是一家人工只能公司"</span>

<span class="string">""" 调用文本纠错 """</span>
client.ecnet(text);
<span class="comment"># 返回结果将会把错误信息与正确的信息封装到item中,并返回,根据这些信息可以将原来的数据进行修正,减少错别字</span>
<span class="string">'''</span>
<span class="string">{</span>
<span class="string">    "log_id": 6770395607901559829,</span>
<span class="string">    "item": {</span>
<span class="string">        "vec_fragment": [</span>
<span class="string">            {</span>
<span class="string">                "ori_frag": "只能",</span>
<span class="string">                "begin_pos": 21,</span>
<span class="string">                "correct_frag": "智能",</span>
<span class="string">                "end_pos": 27</span>
<span class="string">            }</span>
<span class="string">        ],</span>
<span class="string">        "score": 0.875169,</span>
<span class="string">        "correct_query": "百度是一家人工智能公司"</span>
<span class="string">    },</span>
<span class="string">    "text": "百度是一家人工只能公司"</span>
<span class="string">}</span>
<span class="string">'''</span>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- <span class="comment">### 文字情绪识别</span></span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  text = <span class="string">"本来今天高高兴兴"</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">""" 调用对话情绪识别接口 """</span></span><br><span class="line">  client.emotion(text);</span><br><span class="line">  </span><br><span class="line">  <span class="string">""" 如果有可选参数 """</span></span><br><span class="line">  options = &#123;&#125;</span><br><span class="line">  options[<span class="string">"scene"</span>] = <span class="string">"talk"</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">""" 带参数调用对话情绪识别接口 """</span></span><br><span class="line">  client.emotion(text, options)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># neutral      非强烈负面情绪</span></span><br><span class="line">  <span class="comment"># pessimistic  强烈负面情绪</span></span><br><span class="line">  <span class="string">'''</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">      "log_id": 4258005459150262970,</span></span><br><span class="line"><span class="string">      "text": "本来今天高高兴兴",</span></span><br><span class="line"><span class="string">      "items": [</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">              "prob": 0.998619,</span></span><br><span class="line"><span class="string">              </span></span><br><span class="line"><span class="string">              "label": "neutral"</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">              "prob": 0.00138141,</span></span><br><span class="line"><span class="string">              "label": "pessimistic"</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  '''</span></span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>百度AI</tag>
      </tags>
  </entry>
  <entry>
    <title>redis概览</title>
    <url>/2019/05/02/Redis/redis%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<h2 id="redis数据库安装与使用"><a href="#redis数据库安装与使用" class="headerlink" title="redis数据库安装与使用:"></a>redis数据库安装与使用:</h2><a id="more"></a>
<ul>
<li>前往github下载要使用的版本的压缩包</li>
<li>解压缩文件</li>
<li>cd到安装目录</li>
<li>运行redis-server</li>
<li>将安装目录添加到系统环境变量中</li>
<li>运行redis-server</li>
<li>再次打开一个cmd窗口,输入redis-cli即可进入redis环境</li>
<li>keys *   查看当前所有数据</li>
<li>端口: 127.0.0.1:6379</li>
</ul>
<h2 id="redis数据类型"><a href="#redis数据类型" class="headerlink" title="redis数据类型:"></a>redis数据类型:</h2><ul>
<li>list<ul>
<li>llen<ul>
<li>获取列表长度</li>
</ul>
</li>
<li>lpush<ul>
<li>在表头添加数据</li>
</ul>
</li>
<li>rpush<ul>
<li>在表尾添加数据</li>
</ul>
</li>
<li>lpop <ul>
<li>从表头弹出数据</li>
</ul>
</li>
<li>rpop<ul>
<li>从表尾弹出数据</li>
</ul>
</li>
<li>rpoplpush<ul>
<li>从表尾弹出数据并添加到表头</li>
</ul>
</li>
<li>lrange listName num num  <ul>
<li>从xx到xx的所有数据,支持负数</li>
</ul>
</li>
<li>lindex listName num<ul>
<li>指定下标获取对应的值</li>
</ul>
</li>
<li>linsert key    (before) value newvalue<ul>
<li>在某个值之前添加另一个新的数值</li>
</ul>
</li>
<li>linsert key    (after) value newvalue<ul>
<li>在某个值之后添加另一个新的值</li>
</ul>
</li>
<li>lrem key  n  value <ul>
<li>删除某个值,n为次数</li>
<li>当n &gt; 0,则删除n个对应的值,且删除顺序从左往右</li>
<li>当n &lt; 0,删除n个对应的值,且删除顺序从右往左</li>
<li>当n = 0,则删除所有符合条件的数据</li>
</ul>
</li>
</ul>
</li>
<li>string<ul>
<li>二进制安全的键值对,以key:value的形式存在,也就是说,可以存储二进制文件</li>
<li>string单个大小最大为512M</li>
</ul>
</li>
<li>set<ul>
<li>set设定键值对</li>
<li>get根据键获取对应的值</li>
<li>append 在键对应的值后面追加新的数据,同时具备set的概念,如果追加的目标是一个不存在的键,将会自动创建出来</li>
<li>strlen 获取键对应的字符串的长度</li>
<li>setnx 对一个键进行赋值,如果该键存在,则不会有任何效果,如果该键并不存在,则进行创建并赋值</li>
<li>incr 对键对应的值进行+1操作,前提是这个值是纯粹的数字</li>
<li>decr 对键对应的值进行-1操作,前提是这个值不是纯数字</li>
<li>incrby keysName num 对键所对应的值进行加法操作,</li>
<li>decrby  keysName num 对键所对应的值进行减法操作</li>
</ul>
</li>
<li>hash</li>
<li>zset</li>
</ul>
<h2 id="redis基础操作"><a href="#redis基础操作" class="headerlink" title="redis基础操作:"></a>redis基础操作:</h2><ul>
<li>keys * <ul>
<li>查看所有的数据</li>
</ul>
</li>
<li>exists name<ul>
<li>查看符合该名称的数据总量</li>
</ul>
</li>
<li>del name<ul>
<li>删除目标数据</li>
</ul>
</li>
<li>expire name succes<ul>
<li>为一个数据设置过期时间,时间单位默认为秒,需输入数字</li>
</ul>
</li>
<li>ttl name<ul>
<li>查看该对象还有多久过期</li>
</ul>
</li>
<li>dbsize<ul>
<li>查看当前正在使用的库中的数据的数量</li>
</ul>
</li>
<li>Flushdb<ul>
<li>清空当前的库</li>
</ul>
</li>
<li>Flushall<ul>
<li>清空所有的库</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>基于crawlSpider进行的全栈数据爬取</title>
    <url>/2019/04/27/Spider/crawlSpider%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="基于crawlSpider进行的全栈数据爬取"><a href="#基于crawlSpider进行的全栈数据爬取" class="headerlink" title="基于crawlSpider进行的全栈数据爬取"></a>基于crawlSpider进行的全栈数据爬取</h2><a id="more"></a>
<h2 id="crawlspider是爬虫类中spider的一个子类"><a href="#crawlspider是爬虫类中spider的一个子类" class="headerlink" title="crawlspider是爬虫类中spider的一个子类"></a>crawlspider是爬虫类中spider的一个子类</h2><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><p>创建一个基于crawlspider的爬虫文件</p>
<ul>
<li>​    scrapy genspider -t crawl spiderName <a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a><ul>
<li>使用指令创建一个基于crawlSpider的爬虫文件</li>
</ul>
</li>
<li>构造链接提取器和构造解析器<ul>
<li>链接提取器<ul>
<li>可以根据制定的规则进行指定链接的提取</li>
</ul>
</li>
<li>构造解析器</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> Homework1Item, Homework1ContentItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SunSpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'sun'</span></span><br><span class="line">    <span class="comment"># allowed_domains = ['www.xxx.com']</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://wz.sun0769.com/index.php/question/questionType?type=4'</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        <span class="comment"># 进行链接提取,follow开启深度提取 ,</span></span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'type=4&amp;page=\d+'</span>),</span><br><span class="line">             callback=<span class="string">'parse_item'</span>,</span><br><span class="line">             follow=<span class="literal">True</span>),</span><br><span class="line">        <span class="comment"># 进行详情页链接提取,但是关闭深度提取</span></span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'question/\d+/\d+\.shtml'</span>),</span><br><span class="line">             callback=<span class="string">'parse_detail'</span>,</span><br><span class="line">             follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line">	<span class="comment"># 在进行上述的网页处理的时候,这两个将会同步进行,也就是说,在第一个深度提取运行一次的时候,另一个也会一起运行一次</span></span><br><span class="line">    <span class="comment"># 这种情况下,每次我们获取一个新的页面,第二个提取器将会对这个新的页面进行处理,然后再处理下一个页面</span></span><br><span class="line">    <span class="comment"># 正常的spider和这个crawlspider是通用的,也就是说,在使用这个crawlspdier进行深度爬取的时候,其他的spider操作也是没问题的</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        tr_list = response.xpath(</span><br><span class="line">            <span class="string">'//*[@id="morelist"]/div/table[2]//tr/td/table//tr'</span>)</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</span><br><span class="line">            title = tr.xpath(<span class="string">'./td[2]/a[2]/@title'</span>).extract_first()</span><br><span class="line">            detail = tr.xpath(<span class="string">'./td[3]/span/text()'</span>).extract_first()</span><br><span class="line">            <span class="comment"># print(title,detail)</span></span><br><span class="line">            item = Homework1ContentItem()</span><br><span class="line">            item[<span class="string">'title'</span>] = title</span><br><span class="line">            item[<span class="string">'detail'</span>] = detail</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line"></span><br><span class="line">        content = response.xpath(</span><br><span class="line">            <span class="string">'/html/body/div[9]/table[2]//tr[1]//text()'</span>).extract()</span><br><span class="line">        content = <span class="string">''</span>.join(content)</span><br><span class="line">        item = Homework1Item()</span><br><span class="line">        item[<span class="string">'content'</span>] = content</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>增量式爬虫使用</title>
    <url>/2019/04/27/Spider/%E5%A2%9E%E9%87%8F%E5%BC%8F%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1—增量式爬虫简介"><a href="#1—增量式爬虫简介" class="headerlink" title="1—增量式爬虫简介"></a>1—增量式爬虫简介</h2><a id="more"></a>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h3><p>​    检测网站数据更新情况</p>
<h3 id="核心"><a href="#核心" class="headerlink" title="核心:"></a>核心:</h3><p>​    去重</p>
<h3 id="要点"><a href="#要点" class="headerlink" title="要点::"></a>要点::</h3><p>​    深度爬取类型的网站中需要对详情页的url进行记录和检测</p>
<h4 id="记录"><a href="#记录" class="headerlink" title="记录:"></a>记录:</h4><p>​        将爬取过的详情页的url进行记录保存</p>
<p>​        将url存储到redis中去</p>
<h4 id="检测"><a href="#检测" class="headerlink" title="检测:"></a>检测:</h4><p>​        在对某一个详情页的url发请求之前先要到记录表中进行查看,该url是否存在,如果存在的话,意味着这个url已经被爬取过了</p>
<h2 id="2—使用流程及案例"><a href="#2—使用流程及案例" class="headerlink" title="2—使用流程及案例"></a>2—使用流程及案例</h2><h3 id="深度爬取类型的网站使用增量式爬虫爬取数据"><a href="#深度爬取类型的网站使用增量式爬虫爬取数据" class="headerlink" title="深度爬取类型的网站使用增量式爬虫爬取数据:"></a>深度爬取类型的网站使用增量式爬虫爬取数据:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> ZlsMovieproItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZlsSpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'zls'</span></span><br><span class="line">    conn = Redis()</span><br><span class="line">    <span class="comment"># 设置初试url</span></span><br><span class="line">    start_urls = [<span class="string">'https://www.4567tv.tv/index.php/vod/show/id/8.html'</span>]</span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'id/8/page/\d+\.html'</span>),</span><br><span class="line">             callback=<span class="string">'parse_item'</span>,</span><br><span class="line">             follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 进行数据解析,准备就进行深度爬取,</span></span><br><span class="line">        <span class="comment"># 因为这里的深度解析涉及两层页面,所以需要进行手动发送请求来确保更加精确</span></span><br><span class="line">        li_list = response.xpath(<span class="string">'//div[1]/div/div/div/div[2]/ul/li'</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            movie_name = li.xpath(<span class="string">'./div/div/h4/a/text()'</span>).extract_first()</span><br><span class="line">            detail_url = <span class="string">'https://www.4567tv.tv'</span> + li.xpath(</span><br><span class="line">                <span class="string">'./div/div/h4/a/@href'</span>).extract_first()</span><br><span class="line">            <span class="comment"># 进行数据插入,通过sadd的返回值来辨别数据是否重复</span></span><br><span class="line">            <span class="comment"># 将获取到的详情页的url存储到redis中</span></span><br><span class="line">            <span class="comment"># 在执行sadd操作的时候,如果要插入的数据已经存在,将会返回0,并且插入失败,如果不存在,返回1,插入成功</span></span><br><span class="line">            ex = self.conn.sadd(<span class="string">'movie_url_data'</span>, detail_url)</span><br><span class="line">            <span class="keyword">if</span> ex == <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">'哦~一块新鲜的奶酪!'</span>)</span><br><span class="line">                item = ZlsMovieproItem()</span><br><span class="line">                item[<span class="string">'movie_name'</span>] = movie_name</span><br><span class="line">                将获取到的电影名称存储到item并进行传递</span><br><span class="line">                <span class="keyword">yield</span> scrapy.Request(url=detail_url,</span><br><span class="line">                                     callback=self.detail_parse,</span><br><span class="line">                                     meta=&#123;<span class="string">'item'</span>: item&#125;)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'腐朽的味道!!!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = response.meta[<span class="string">'item'</span>]</span><br><span class="line">        detail_text = response.xpath(</span><br><span class="line">            <span class="string">'//div[1]/div/div/div/div[2]/p[5]/span[3]/text()'</span>).extract_first()</span><br><span class="line">        item[<span class="string">'detail_text'</span>] = detail_text</span><br><span class="line">        print(item)</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>

<h3 id="不需要深度爬取的网站的注意点"><a href="#不需要深度爬取的网站的注意点" class="headerlink" title="不需要深度爬取的网站的注意点:"></a>不需要深度爬取的网站的注意点:</h3><p>数据指纹:</p>
<p>​    一组数据的唯一标识</p>
<p>​    在数据库中构建指纹集合,换句话说,就是创建一个绝对不会重复的id,来确保数据爬取的时候不会重复获取已有的数据</p>
<h2 id="3—核心要点"><a href="#3—核心要点" class="headerlink" title="3—核心要点"></a>3—核心要点</h2>]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>代理ip</title>
    <url>/2019/02/13/Spider/%E4%BB%A3%E7%90%86IP/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="代理IP"><a href="#代理IP" class="headerlink" title="代理IP"></a>代理IP</h2><a id="more"></a>
<h2 id="代理IP与代理服务器"><a href="#代理IP与代理服务器" class="headerlink" title="代理IP与代理服务器:"></a>代理IP与代理服务器:</h2><ol>
<li><p>代理IP分类</p>
<ul>
<li>透明代理IP<ul>
<li>服务器知道你在使用代理IP,并且知道你的真实IP</li>
</ul>
</li>
<li>匿名IP<ul>
<li>服务器知道你在使用代理IP,但不知道你的真正IP</li>
</ul>
</li>
<li>高匿名IP<ul>
<li>服务器不知道你在使用代理IP,并且不知道你的真正IP</li>
</ul>
</li>
</ul>
</li>
<li><p>代理IP分为两种:</p>
<ul>
<li>基于接口<ul>
<li>获取固定数量的代理IP</li>
<li>这些IP地址时固定的,固定数量,如果你的请求数量过多的话,同样又被发现的风险</li>
</ul>
</li>
<li>基于隧道<ul>
<li>这种代理IP基于云端服务器存在,拥有一个云端的IP池</li>
<li>每次使用时,都会从庞大的IP池中随即调用代理IP</li>
<li>因此,基于隧道的代理IP在使用时几乎不会出现重复使用的IP</li>
<li>相比较固定数量的基于接口IP,更加的安全</li>
</ul>
</li>
<li>相比较起来,使用基于隧道的代理IP更加好用,但是相对的是,基于隧道的代理IP价格更加昂贵</li>
</ul>
</li>
<li><pre><code class="python"><span class="keyword">import</span> requests

url = <span class="string">'http://httpbin.org/get'</span>

proxies = {
    <span class="string">"http"</span>: <span class="string">"http://60.167.103.60:9999"</span>,
    <span class="string">"https"</span>: <span class="string">"https://183.166.138.137:9999"</span>
}
res = requests.get(url=url,proxies=proxies)
print(res.text)
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">4</span>. 在进行高频请求的时候,如果你的爬虫被检测了出来,将会被返回一个特殊的错误:ConectionPool</span><br><span class="line"></span><br><span class="line"><span class="title">   1. 这个错误的意思就是说:</span> 你已经被发现了,并且你用来进行请求的IP已经被禁掉了</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. ```python</span><br><span class="line">   proxies = [</span><br><span class="line">       &#123;<span class="string">"http"</span>: <span class="string">"http://60.167.103.60:9999"</span>&#125;,</span><br><span class="line">       &#123;<span class="string">"http"</span>: <span class="string">"http://60.167.103.60:9999"</span>&#125;,</span><br><span class="line">       &#123;<span class="string">"http"</span>: <span class="string">"http://60.167.103.60:9999"</span>&#125;,</span><br><span class="line">       &#123;<span class="string">"http"</span>: <span class="string">"http://60.167.103.60:9999"</span>&#125;</span><br><span class="line">   ]</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>代理ip池写法,创建一个列表,存储准备好的IP,然后使用随机模块进行随即调用,这样可以确保每次都会随机抽取一个代理ip来发送请求</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>动态获取数据</title>
    <url>/2019/02/13/Spider/%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="动态获取数据"><a href="#动态获取数据" class="headerlink" title="动态获取数据"></a>动态获取数据</h2><a id="more"></a>
<ol>
<li>在一些网页中,进行ajax请求的时候需要传递参数,有些参数是特殊的动态参数,这些参数通常隐藏在页面中,只需要进行对应的匹配就能够进行获取</li>
<li>在一些网页中,cookie的获取可能是在执行ajax请求进行动态加载的时候才传递过来的,因此,想要获取对应的cookie,就需要是用Session模块在进行ajax请求的时候进行获取,才能拿到需要使用的cookie</li>
</ol>
]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask文件上传</title>
    <url>/2018/10/24/Flask/flask%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传:"></a>文件上传:</h2><a id="more"></a>
<ul>
<li><pre><code class="python"><span class="comment">#导入必须的模块包</span>
<span class="keyword">from</span> wtform <span class="keyword">import</span> Form,StringField,PasswordField,SubmitField,BooleanField,FileField,SelectField
<span class="comment">#导入验证器包</span>
<span class="keyword">from</span> wtform.validators <span class="keyword">import</span> EqualTo,Length,UUID,URL,ValidatorsError,InputRequired,Email
<span class="comment">#从flask_wtf中导入file.FileRequired(是否为空验证)和file.FileAllowed(验证是否符合要求的格式,格式要求的范围作为参数进行传递,切记传入的参数必须为一个列表)</span>
<span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template,send_from_directory
<span class="keyword">from</span> werkzeug.datastructures <span class="keyword">import</span> CombinedMultiDict

<span class="keyword">from</span> flask_wtf.file <span class="keyword">import</span> FileRequired,FileAllowed
<span class="comment">#导入文件名过滤包</span>
<span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename
<span class="keyword">import</span> os

</code></pre>
</li>
</ul>
<p>  app = Flask(<strong>name</strong>)</p>
<p>  upload_url = os.path.join(os.path.dirname(<strong>file</strong>),’image’)</p>
<p>  class userForm(Form):<br>      #创建文件上传约束<br>      avater = FileField(validators=[FileRequired(),FileAllowed([‘jpg’,’png’,’gif’])])</p>
<p>  @app.route(‘/‘,methods=[‘GET’,’POST’])<br>  dedf func():<br>      if request.method == ‘GET’:<br>          return render_template(‘add.html’)<br>      else:<br>          #使用ConbinedMultiDict模块对传输的两个不同的值进行合并,一起传入wtf文件传输判定中进行验证<br>          userform = userForm(CombinedMultiDict([request.form,request.files]))<br>          if userform.validate():<br>              avater = userform.avater.data<br>              filename = secure_filename(avater.filename)<br>              avater.save(os.path.join(upload_url,filename))<br>              return ‘上传成功’</p>
<pre><code></code></pre>]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask常用钩子函数</title>
    <url>/2018/10/14/Flask/flask%E5%B8%B8%E7%94%A8%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="常用钩子函数"><a href="#常用钩子函数" class="headerlink" title="常用钩子函数"></a>常用钩子函数</h2><a id="more"></a>
<ol>
<li><h3 id="errorhandler"><a href="#errorhandler" class="headerlink" title="errorhandler"></a>errorhandler</h3><ol>
<li><p>错误报告专用</p>
</li>
<li><p>在装饰器中传入参数进行对应错误代码进行捕获</p>
</li>
<li><p>定义错误捕获函数进行捕获,此函数中定义参数为error</p>
</li>
<li><p>此错误报告可以返回 ‘html’ 页面,并使用js对其进行修饰</p>
<ol>
<li><p>使用abort模块进行错误跳转,即,当访问的界面不符合条件时,直接返回对应的错误,</p>
<ol>
<li><pre><code class="python"><span class="keyword">from</span> flask <span class="keyword">import</span> abort

.....
<span class="meta">@app.route('/)</span>
<span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span>
    <span class="keyword">if</span>....:
       <span class="keyword">return</span> render_template(<span class="string">'...html'</span>)
    <span class="keyword">else</span>:
       <span class="comment">#不满足条件直接返回404错误</span>
       abort(<span class="number">404</span>)
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">         </span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  @app.errorhandler(404)</span><br><span class="line">  def func1(error):</span><br><span class="line">      return '404'</span><br><span class="line">  @app.errorhandler(500)</span><br><span class="line">  def func2(error):</span><br><span class="line">      return '500'</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><h3 id="context-processor"><a href="#context-processor" class="headerlink" title="context_processor"></a>context_processor</h3><ol>
<li>上下文声明专用</li>
<li>在声明的函数中直接返回要定义的上下文内容</li>
</ol>
<ul>
<li><pre><code class="python"><span class="meta">@app.context_processor</span>
<span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">()</span>:</span>
    <span class="keyword">return</span> {<span class="string">"current"</span>:<span class="string">""</span>}</code></pre>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask文件下载</title>
    <url>/2018/10/14/Flask/flask%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="文件下载模块"><a href="#文件下载模块" class="headerlink" title="文件下载模块"></a>文件下载模块</h2><a id="more"></a>
<h2 id="send-file"><a href="#send-file" class="headerlink" title="send_file"></a>send_file</h2><h4 id="return-send-file-文件路径-as-attachment-True-cache-timeout-1"><a href="#return-send-file-文件路径-as-attachment-True-cache-timeout-1" class="headerlink" title="return send_file(文件路径,,==as_attachment=True==,==cache_timeout=1==)"></a>return send_file(文件路径,,==as_attachment=True==,==cache_timeout=1==)</h4>]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask中g定向</title>
    <url>/2018/10/14/Flask/g%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<h2 id="g定向"><a href="#g定向" class="headerlink" title="g定向"></a>g定向</h2><a id="more"></a>
<ul>
<li><p>g定向使用</p>
<ul>
<li><pre><code class="python"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,g

</code></pre>
</li>
</ul>
</li>
</ul>
<pre><code>app = Flask(__name__)

@app.route(&apos;/&apos;)
def func():
    g.username = &apos;root&apos;
    return &apos;hello world&apos;
```</code></pre><ul>
<li><p>g的声明方法和local相同</p>
</li>
<li><p>使用g定向声明过的变量在整个flask文件中通用,及如果你在app中调用了另一个外部文件的函数,在这个函数中你是可以直接传入g来使用你在app中声明的变量的</p>
</li>
<li><p>这样可以不传入参数</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask_wtf</title>
    <url>/2018/09/30/Flask/flask_WTF/</url>
    <content><![CDATA[<h2 id="flask-wtf简介"><a href="#flask-wtf简介" class="headerlink" title="flask_wtf简介:"></a><em>flask_wtf简介:</em></h2><a id="more"></a>
<ul>
<li>​    flask_wtf模块下载安装<ul>
<li>pip install flask-wtf</li>
<li>使用命令行形式安装flask_wtf模块</li>
</ul>
</li>
</ul>
<hr>
<h2 id="flask-wtf实际使用"><a href="#flask-wtf实际使用" class="headerlink" title="flask_wtf实际使用:"></a>flask_wtf实际使用:</h2><ul>
<li><pre><code class="python"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form,StringField,PasswordField,SubmitField
<span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> EqualTo,Length
<span class="comment">#创建一个全新的form表单类,该类继承自Form</span>
<span class="class"><span class="keyword">class</span> <span class="title">RegistForm</span><span class="params">(Form)</span>:</span>
    <span class="comment">#username属性设定</span>
    username = StringField(validators=[Length(min=<span class="number">3</span>,max=<span class="number">8</span>)])
    <span class="comment">#password属性设定</span>
    password= PasswordField(validators=[Length(min=<span class="number">6</span>,max=<span class="number">10</span>)])
    <span class="comment">#EqalTo作用,添加EqualTo的字段必须与其参数的值相同,相当于绑定</span>
    password_1 = PasswordField(validators=[Length(min=<span class="number">6</span>,max=<span class="number">10</span>),EqualTo(<span class="string">'password'</span>)])
    sub = SubmitField()

app = Flask(__name__)

</code></pre>
</li>
</ul>
<p>  @app.route(‘/‘)<br>  def hello_world():<br>      return ‘Hello World!’<br>  #创建form表单提交页面<br>  @app.route(‘/regist’,methods=[‘GET’,’POST’])<br>  def regist():<br>      #判断请求方式并给出相应回复<br>      if request.method == ‘GET’:<br>          return render_template(‘regist.html’)<br>      else:<br>          #实例化表单类<br>          regist_form = RegistForm(request.form)<br>          #判断类中的validate是否正常,即验证是否通过<br>          #根据判定结果进行不同的返回情况<br>          if regist_form.validate():<br>              return ‘True’<br>          else:<br>              print(regist_form.errors())<br>              return “false”</p>
  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 在length函数中,可以添加一个新的参数,message,用来设定报错之后的</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  username = <span class="constructor">StringField(<span class="params">validators</span>=[Length(<span class="params">min</span>=3,<span class="params">max</span>=8,<span class="params">message</span>='您所输入的账户名称不符合要求.请重新输入')</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>这个message所储存的参数将会体现在类的errors方法里面,可以通过直接输出来查看</li>
</ul>
<hr>
<h2 id="flask-wtf常用验证器"><a href="#flask-wtf常用验证器" class="headerlink" title="flask_wtf常用验证器:"></a>flask_wtf常用验证器:</h2><p>验证器导入方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> EqualTo</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Length</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> NumberRange</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Email</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> InputRequired</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> Regexp</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> URL</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> UUID</span><br></pre></td></tr></table></figure>



<ul>
<li><p>EqualTo           </p>
<ul>
<li>绑定另一个字段,使两个字段保持一致</li>
</ul>
</li>
<li><p>Length             </p>
<ul>
<li>限定内容长度,以及自定义报错提醒</li>
</ul>
</li>
<li><p>NumberRange   </p>
<ul>
<li>限定数字的大小所在区间,和length一样有max和min两个值限制,只有在这两个值之剑才满足</li>
</ul>
</li>
<li><p>Email               </p>
<ul>
<li>邮箱验证器,用于验证邮箱,不需要参数,内置了邮箱格式验证</li>
</ul>
</li>
<li><p>InputRequired  </p>
<ul>
<li>对输入的信息进行验证,有值即为True,没有则为false</li>
</ul>
</li>
<li><p>Regexp</p>
<ul>
<li>正则表达式,自动将输入的内容于Regexp的内容匹配对照</li>
</ul>
</li>
<li><p>URL</p>
<ul>
<li>验证输入的是否为正确的url地址</li>
</ul>
</li>
<li><p>UUID</p>
<ul>
<li><p>验证是否为UUID</p>
</li>
<li><p>UUID导入方法</p>
<ul>
<li><pre><code class="python">form uuid <span class="keyword">import</span> uuid4
print(uuid4())
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"><span class="comment">## 自定义验证器:</span></span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">validate_</span></span>字段名 (<span class="keyword">self</span>,filed)<span class="symbol">:</span></span><br><span class="line">      <span class="comment">#通过这个方法定义的验证器,将会自行调用进行判断,</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>自定义验证器的名字为validate_加上要绑定的字段名</p>
</li>
<li><p>validate_字段名</p>
</li>
<li><p>需要设定一个形参,不限制</p>
</li>
</ul>
<hr>
<h2 id="flask-wtf常用字段"><a href="#flask-wtf常用字段" class="headerlink" title="flask_wtf常用字段:"></a>flask_wtf常用字段:</h2><ul>
<li><p>IntegerField</p>
<ul>
<li>整形字段,该输入框只支持输入数字类型</li>
<li>最终拿到的值也是整形,即int</li>
<li>同一属性的还有FloatField</li>
</ul>
</li>
<li><p>StringField</p>
<ul>
<li>字符串形式,该输入框支持输入字符串类型</li>
</ul>
</li>
<li><p>PasswordField</p>
<ul>
<li>密码字段,如果使用该字段创建表单,其生成的将会是密码输入框</li>
</ul>
</li>
<li><p>SubmitField</p>
<ul>
<li>此字段对应的是submit提交按钮</li>
</ul>
</li>
<li><p>BooleanField</p>
<ul>
<li>单选框模板</li>
</ul>
</li>
</ul>
<ul>
<li><p>FileField</p>
<ul>
<li>文件框</li>
</ul>
</li>
<li><p>SelectField</p>
<ul>
<li><p>下拉框</p>
</li>
<li><pre><code class="python">tags = SelecrField(<span class="string">'标签名'</span>,choices=[(<span class="string">'1'</span>,<span class="string">'python'</span>),(<span class="string">'2'</span>,<span class="string">'ios'</span>)])</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask_sqlalchemy</title>
    <url>/2018/09/27/Flask/flask_sqlalchemy/</url>
    <content><![CDATA[<h2 id="flask-sqlalchemy"><a href="#flask-sqlalchemy" class="headerlink" title="flask_sqlalchemy"></a>flask_sqlalchemy</h2><a id="more"></a>


<h2 id="创建flask数据库链接"><a href="#创建flask数据库链接" class="headerlink" title="创建flask数据库链接"></a>创建flask数据库链接</h2><hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLALchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.comfig[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql+mysqlconnector://root:password@localhost:port/database'</span></span><br><span class="line">db = SQLALchemy(app)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'person'</span></span><br><span class="line">    id = db.COlumn(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">db.drop_all()</span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ = <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="关于导包"><a href="#关于导包" class="headerlink" title="关于导包:"></a>关于导包:</h2><ul>
<li>flask_sqlalchemy中把sqlalchemy的所有模块整合到了一起,所以不需要像原生sqlalchemy一样导入一大堆模块,在这一方面做的比原生SQL alchemy好得多</li>
</ul>
<hr>
<h2 id="关于分页查询"><a href="#关于分页查询" class="headerlink" title="关于分页查询:"></a>关于分页查询:</h2><h2 id="paginate"><a href="#paginate" class="headerlink" title="paginate"></a><u>paginate</u></h2><p>per_page:设定每页展示的数据</p>
<p>page:当前的页数</p>
<p>has_prve:判断是否具有上一页</p>
<p>has_next:判断是否具有下一页</p>
<p>prve_num:上一页的页码</p>
<p>next_num:下一页的页码</p>
<p>iter_pages: 所有页码,可遍历</p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask_session</title>
    <url>/2018/09/23/Flask/flask_session/</url>
    <content><![CDATA[<h2 id="cookie创建"><a href="#cookie创建" class="headerlink" title="cookie创建:"></a>cookie创建:</h2><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line">res = Response(<span class="string">'示例'</span>)</span><br><span class="line"></span><br><span class="line">res.set_cookie(<span class="string">'username'</span>,<span class="string">'root'</span>,</span><br><span class="line">               max_age=<span class="number">60</span>,</span><br><span class="line">               expires=datetime(year,month,day,hour,minute,second),</span><br><span class="line">              domain=<span class="string">'.fcg.com'</span>)</span><br><span class="line"><span class="comment">#创建cookie时需要导入以下几项,</span></span><br><span class="line"><span class="comment">#	1.cookies名字 + cookies值 (必传)</span></span><br><span class="line"><span class="comment">#	2.max_age从当前开始计算的过期时间,单位为秒,不添加的时候默认过期时间为关闭浏览器过期</span></span><br><span class="line"><span class="comment">#	3.expires设定过期时间,以格林尼治标准时间计算,换算到北京时间需要减八,这个参数如果设置的话,需要传入六个参数分别是--(year,month,day,hour,minute,second)</span></span><br><span class="line"><span class="comment">#	4.domain设定cookie作用范围,在主域名前面加上.即为将此cookie应用于所有子域名</span></span><br><span class="line"><span class="comment">#	5.设定作用范围,需要先绑定好主域名和子域名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cookie删除</span></span><br><span class="line">res = Response(<span class="string">'删除'</span>)</span><br><span class="line">res.delete_cookie(<span class="string">'username'</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="session创建"><a href="#session创建" class="headerlink" title="session创建:"></a>session创建:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#创建并设置session.cookie</span></span><br><span class="line">    session[<span class="string">'username'</span>] = <span class="string">'123'</span></span><br><span class="line">    <span class="comment">#设定session过期时间</span></span><br><span class="line">    session.permanent=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#session.permanent默认为一个月</span></span><br><span class="line"><span class="comment">#可以通过设定修改,</span></span><br><span class="line"><span class="comment">#app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(剩余过期的时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#session删除</span></span><br><span class="line">session.pop(<span class="string">'username'</span>)</span><br><span class="line"><span class="comment">#相当于字典删除</span></span><br><span class="line">session.clear()</span><br><span class="line"><span class="comment">#将session中储存的数据全部清空</span></span><br><span class="line"><span class="keyword">del</span> session[key]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="请求函数的装饰器使用方法"><a href="#请求函数的装饰器使用方法" class="headerlink" title="*请求函数的装饰器使用方法*:"></a><strong>*<u>请求函数的装饰器使用方法</u>*:</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">decorators</span><br></pre></td></tr></table></figure>

<ul>
<li><p>设置请求函数过滤用装饰器</p>
</li>
<li><pre><code class="python"><span class="comment">#从functools 中导入模块wraps</span>
<span class="keyword">from</span> functools <span class="keyword">import</span> wraps

<span class="keyword">from</span> flask <span class="keyword">import</span> session,redirect,url_for
<span class="function"><span class="keyword">def</span> <span class="title">login_required</span><span class="params">(func)</span>:</span>
    <span class="comment">#设定从functools里面导入的装饰器,此装饰器的参数为外部函数传入的值</span>
<span class="meta">    @wraps(func)</span>
    <span class="comment">#定义内层函数,该内从函数中执行运算与判定</span>
    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span>
        <span class="comment">#获取session</span>
        username = session.get(<span class="string">'username'</span>)
        <span class="comment">#判断是否存在session</span>
        <span class="keyword">if</span> username:
            <span class="comment">#存在session时,正常调用外层函数传入的func参数</span>
            <span class="keyword">return</span> func(*args,**kwargs)
        <span class="keyword">else</span>:
            <span class="comment">#当session中不存在对应的cookie时,重定向当前网址到登陆界面</span>
            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))

    <span class="comment">#正常的闭包函数用法,返回内层函数的引用</span>
    <span class="keyword">return</span> wrapper</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask中app上下文机制</title>
    <url>/2018/09/15/Flask/app%E4%B8%8A%E4%B8%8B%E6%96%87%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="app上下文"><a href="#app上下文" class="headerlink" title="app上下文"></a>app上下文</h2><a id="more"></a>
<p>应用上下文和请求上下文都是存放到一个’LocalStack’的栈中</p>
<p>和应用app相关的操作就必须用到应用上下文,比如通过current_app获取当前这个app</p>
<p>和请求相关的操作就必须用到请求上下文,比如url_for反转视图函数</p>
<p>视图函数中不需要考虑上下文的问题</p>
<hr>
<h3 id="应用上下文"><a href="#应用上下文" class="headerlink" title="应用上下文:"></a>应用上下文:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app</span><br><span class="line"><span class="comment">#current_app模块的作用是获取当前文件的栈</span></span><br><span class="line"><span class="comment">#使用的方法</span></span><br><span class="line"></span><br><span class="line">current_app.name</span><br><span class="line"><span class="comment">#获取当前文件的名字</span></span><br><span class="line"><span class="comment">#此选项需要在路由函数中才能使用</span></span><br><span class="line"><span class="comment">#在路由函数外直接使用将会报错</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="手动推入应用上下文"><a href="#手动推入应用上下文" class="headerlink" title="手动推入应用上下文:"></a>手动推入应用上下文:</h5><ul>
<li><p>第一种方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在路由函数外调用current_app模块</span></span><br><span class="line"><span class="comment">#需要先设定好应用上下文</span></span><br><span class="line">app.context = app.app_context()</span><br><span class="line">app.context.push()</span><br><span class="line">print(current_app.name)</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">	print(corrent_app.name)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<h3 id="请求上下文"><a href="#请求上下文" class="headerlink" title="请求上下文:"></a>请求上下文:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#请求上下文最常见的一个是url_for</span></span><br><span class="line"><span class="comment">#在视图函数中</span></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#查看url_for打印出来的路由地址</span></span><br><span class="line">    print(url_for(<span class="string">'func1'</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/test/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello user'</span></span><br><span class="line"></span><br><span class="line">print(url_for(<span class="string">'func1'</span>))</span><br><span class="line"><span class="comment">#在路由函数外直接调用url_for 查看路由地址将会报错,原因是请求上下文问题</span></span><br><span class="line"><span class="comment">#此问题无法使用应用上下文的方法解决</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="手动推入请求上下文"><a href="#手动推入请求上下文" class="headerlink" title="手动推入请求上下文:"></a>手动推入请求上下文:</h5><ul>
<li><p>​    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在路由函数之外调用</span></span><br><span class="line"><span class="keyword">with</span> app.test_requert_context():</span><br><span class="line">    print(url_for(<span class="string">'func1'</span>))</span><br><span class="line"><span class="comment">#注意,test_request_context这个函数会在推送请求上下文之前先检查有没有应用上下文,如果没有,将会先推送一个应用上下文过来,在推送一个请求上下文,也就是说,在一定程度上等同于app_context的加强版</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask信号机制</title>
    <url>/2018/09/08/Flask/%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="flask信号"><a href="#flask信号" class="headerlink" title="flask信号"></a>flask信号</h2><a id="more"></a>
<h3 id="信号使用详解"><a href="#信号使用详解" class="headerlink" title="信号使用详解:"></a>信号使用详解:</h3><ul>
<li><p>信号使用分为三步</p>
</li>
<li><p>定义信号</p>
<ul>
<li><pre><code class="python"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask
<span class="keyword">from</span> signal <span class="keyword">import</span> visit_signal

app = Flask(__name__)

<span class="meta">@app.route('/')</span>
<span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span>
    username = request.args.get(<span class="string">'username'</span>)
    <span class="keyword">if</span> username:
        g.user = username
        visit_signal.send()
    <span class="keyword">else</span>:
        <span class="keyword">return</span> <span class="string">'hello world'</span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  <span class="keyword">from</span> blinker <span class="keyword">import</span> Namespace</span><br><span class="line">  my_pace = Namepace()</span><br><span class="line">  visit_signal = my_pace.signal(<span class="string">'visit-signal'</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(sender)</span>:</span></span><br><span class="line">      <span class="keyword">from</span> flask <span class="keyword">import</span> g</span><br><span class="line">      print(g.user)</span><br><span class="line">  visit_signal.connect(func)</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>监听信号</p>
<ul>
<li><pre><code class="python">visit_signal.send()
<span class="comment">#设置监听</span>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"><span class="section">### flask自带的信号机制:</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 		模板渲染时传出的信号:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span><span class="code">```</span>python</span><br><span class="line">  #正常信号监听</span><br><span class="line">  from flask import Flask,render<span class="emphasis">_template,template_</span>rendered</span><br><span class="line">  app = Flask(<span class="strong">__name__</span>)</span><br><span class="line">  <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span><br><span class="line">  #其一</span><br><span class="line">  def template<span class="emphasis">_rendered_</span>func(sender,template,context):</span><br><span class="line"><span class="code">      print('sender:',sender)</span></span><br><span class="line"><span class="code">      print('template:',template)</span></span><br><span class="line"><span class="code">      print('context',context)</span></span><br><span class="line">  template<span class="emphasis">_randered.context(template_</span>rendered_func)</span><br><span class="line">  <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</span><br><span class="line">  @app.route('/')</span><br><span class="line">  def func1():</span><br><span class="line"><span class="code">      return render_template('index.html')</span></span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
</li>
</ul>
<ul>
<li><pre><code class="python"><span class="comment">#异常信号监听</span>
<span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,template_rendered,got_request_exception
app = Flask(__name__)
***********************************************************
<span class="comment">#其二  </span>
<span class="function"><span class="keyword">def</span> <span class="title">request_exception_log</span><span class="params">(sender,*args,**kwargs)</span>:</span>
    print(sender)
    print(args)
    print(kwargs)
got_request_exception.connect(request_exception_log)
***********************************************************
<span class="meta">@app.route('/')</span>
<span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span>
    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask分页</title>
    <url>/2018/08/31/Flask/%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<h2 id="flask-分页"><a href="#flask-分页" class="headerlink" title="flask 分页"></a>flask 分页</h2><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> goods.has_prev %&#125;</span><br><span class="line">    &lt;a href="/show?page=&#123;&#123; goods.prev_num &#125;&#125;"&gt;上一页&lt;/a&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> goods.iter_pages() %&#125;</span><br><span class="line">    &lt;a href="/show?page=&#123;&#123; foo &#125;&#125;"&gt;&#123;&#123; foo &#125;&#125;&lt;/a&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> goods.has_next %&#125;</span><br><span class="line">    &lt;a href="/show?page=&#123;&#123; goods.next_num &#125;&#125;"&gt;下一页&lt;/a&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/show/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    page = int(request.args.get(<span class="string">'page'</span>,<span class="number">1</span>))</span><br><span class="line">    goods = GOOds.query.paginate(page,per_page=<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># app_list = app_sql.session.query(app_sql.Subordinate_forces).offset(num * 10).limit(10).all()</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'show.html'</span>,goods=goods)</span><br></pre></td></tr></table></figure>





<p>下载判断</p>
<p>@page.route(“/goodsdown”)<br>def download():<br>    goodslist = Goods.query.all()<br>    data = []<br>    for goods in goodslist:<br>        temp = {}<br>        temp[“id”] = goods.id<br>        temp[“name”] = goods.name<br>        temp[“price”] = goods.price<br>        temp[“img”] = goods.img</p>
<pre><code>    data.append(temp)


# 每次下载 向数据库中写入count
count = Count.query.first()


print(&quot;count&quot;, count)
if not count:
    count = Count(count=1)
    db.session.add(count)
    db.session.commit()
else:
    count.count += 1
    db.session.commit()


with open(&quot;static/data.json&quot;, &quot;w&quot;) as f:
    jstr = json.dumps(data, ensure_ascii=False)
    f.write(jstr)


return send_file(&quot;static/data.json&quot;, as_attachment=True, cache_timeout=1)</code></pre>]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask数据库迁移</title>
    <url>/2018/08/26/Flask/flask%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h2 id="flask数据库迁移"><a href="#flask数据库迁移" class="headerlink" title="flask数据库迁移"></a><code>flask</code>数据库迁移</h2><a id="more"></a>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm.orm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.dialects.mysql <span class="keyword">import</span> LONGTEXT,DECIMAL,DATETIME</span><br><span class="line"></span><br><span class="line">Host = <span class="string">'127.0.0.1'</span></span><br><span class="line">Port = <span class="string">'3306'</span></span><br><span class="line">User = <span class="string">'root'</span></span><br><span class="line">Password = <span class="string">'000000'</span></span><br><span class="line">Database = 要使用的数据库名称</span><br><span class="line">DB_URI = <span class="string">'mysql+mysqlconnector://&#123;user&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;database&#125;'</span>.format(user=User,password=Password,host=Host,port=Port,database=Database)</span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'person'</span></span><br><span class="line">    id = Column(Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">Base.metadata.drop_all()</span><br><span class="line">Base.metadata.create_all()</span><br></pre></td></tr></table></figure>

<p>创建一个模型</p>
<hr>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">alembic init alembic</span></span><br></pre></td></tr></table></figure>

<p>创建新的alembic文件(此操作在命令提示符中完成)</p>
<hr>
<p>修改alembic文件内容</p>
<ul>
<li>打开alembic.ini文件<ul>
<li>修改<strong>*<u>sqlalchemy.url</strong></u>*为:</li>
</ul>
</li>
</ul>
<p>​        </p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">sqlalchemy.url</span> = <span class="string">'mysql+mysqlconnector://root:password@localhost:port/database'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开alembic文件夹</li>
</ul>
<ul>
<li><p>打开env.py文件</p>
<ul>
<li><p>在其中添加以下代码</p>
</li>
<li><pre><code class="python"><span class="keyword">import</span> sys,os
<span class="keyword">import</span> app
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 修改文件代码</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    #修改前</span><br><span class="line">    target_metadata = None</span><br><span class="line">    #修改后</span><br><span class="line">    target_metadata = app.Base.metadata</span><br></pre></td></tr></table></figure>

------
</code></pre>
</li>
</ul>
</li>
</ul>
<hr>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">*alembic revision --autogenerate -m 'first commit'</span><br><span class="line">创建新的迁移脚本(此操作在命令提示符中完成)</span><br><span class="line">alembic revision --autogenerate -m 'add age column'</span><br><span class="line">更新迁移脚本(此操作在命令提示符中完成)</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="alembic-upgrade-head"><a href="#alembic-upgrade-head" class="headerlink" title="alembic upgrade head"></a><u><strong><em>alembic upgrade head</em></strong></u></h4><p>数据库迁移开启(此操作在命令提示符中完成)</p>
<hr>
<h3 id="alembic常用字段"><a href="#alembic常用字段" class="headerlink" title="alembic常用字段"></a><strong><u>alembic常用字段</u></strong></h3><ul>
<li>​    init<ul>
<li>新建一个仓库</li>
</ul>
</li>
<li>revision<ul>
<li>创建一个新的版本文件</li>
</ul>
</li>
<li>–autogenerate<ul>
<li>自动将当前模型的修改,生成迁移文件</li>
</ul>
</li>
<li>–m<ul>
<li>本次迁移做了哪些修改,可以通过指定这个参数,进行回顾</li>
</ul>
</li>
<li>upgeade<ul>
<li>将置定版本的迁移文件映射到数据库之中,如果有多个迁移文件没有映射,那么会执行多个迁移脚本</li>
</ul>
</li>
<li>[head]<ul>
<li>代表最新的迁移脚本的版本号</li>
<li>一般指向最新版</li>
</ul>
</li>
<li>‘first commit’ <ul>
<li>生成第一个迁移脚本时的映射参数</li>
</ul>
</li>
<li>add age column<ul>
<li>修改数据库时使用的映射参数</li>
</ul>
</li>
<li>history<ul>
<li>列出所有的迁移版本及其信息</li>
<li>alembic history  (展示所有的版本更新的版本号)</li>
</ul>
</li>
<li>heads<ul>
<li>展示head指向的脚本文件的版本号</li>
<li>这个版本号通常为正在使用的版本号</li>
</ul>
</li>
<li>downgrade<ul>
<li>执行指定版本迁移文件中的downgrade函数</li>
<li>与upgrade对应,使用方法为<ul>
<li>alembic downgrade 版本号</li>
<li>版本号可以在文件中查看,即为对应迁移文件中的revision的值</li>
</ul>
</li>
</ul>
</li>
<li>current<ul>
<li>展示当前数据库中的版本号</li>
<li>使用方法<ul>
<li>在数据库中会生成一个额外的表,alem_version ,这个表中存储着当前的版本号</li>
<li>在命令提示符中输入<ul>
<li>alembic current 会得到当前正在使用的版本号</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="alembic在flask中的使用"><a href="#alembic在flask中的使用" class="headerlink" title="*alembic在flask中的使用*"></a><strong>*<u>alembic在flask中的使用*</u></strong></h2><ul>
<li><p>前期操作方法相同</p>
</li>
<li><p>在创建好仓库时,按照以下步骤设定</p>
<ul>
<li><p>找到alembic.ini文件</p>
</li>
<li><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1572849457816.png" alt="1572849457816"></p>
</li>
<li><p>修改其中的sqlalchemy_uri的值为要使用的数据库链接</p>
</li>
<li><p>找到alembic文件夹下的env.py</p>
</li>
<li><p>在其中进行如下操作</p>
</li>
<li><pre><code class="python"><span class="keyword">import</span> sys,os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
<span class="keyword">import</span> app
*
target_metadata = app.db.Model.metadata</code></pre>
</li>
</ul>
</li>
<li><p>之后的操作和之前并无差别</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask文件上传</title>
    <url>/2018/08/16/Flask/lask%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传:"></a>文件上传:</h2><a id="more"></a>
<ul>
<li><pre><code class="python"><span class="comment">#导入必须的模块包</span>
<span class="keyword">from</span> wtform <span class="keyword">import</span> Form,StringField,PasswordField,SubmitField,BooleanField,FileField,SelectField
<span class="comment">#导入验证器包</span>
<span class="keyword">from</span> wtform.validators <span class="keyword">import</span> EqualTo,Length,UUID,URL,ValidatorsError,InputRequired,Email
<span class="comment">#从flask_wtf中导入file.FileRequired(是否为空验证)和file.FileAllowed(验证是否符合要求的格式,格式要求的范围作为参数进行传递,切记传入的参数必须为一个列表)</span>
<span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template,send_from_directory
<span class="keyword">from</span> werkzeug.datastructures <span class="keyword">import</span> CombinedMultiDict

<span class="keyword">from</span> flask_wtf.file <span class="keyword">import</span> FileRequired,FileAllowed
<span class="comment">#导入文件名过滤包</span>
<span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename
<span class="keyword">import</span> os

</code></pre>
</li>
</ul>
<p>  app = Flask(<strong>name</strong>)</p>
<p>  upload_url = os.path.join(os.path.dirname(<strong>file</strong>),’image’)</p>
<p>  class userForm(Form):<br>      #创建文件上传约束<br>      avater = FileField(validators=[FileRequired(),FileAllowed([‘jpg’,’png’,’gif’])])</p>
<p>  @app.route(‘/‘,methods=[‘GET’,’POST’])<br>  dedf func():<br>      if request.method == ‘GET’:<br>          return render_template(‘add.html’)<br>      else:<br>          #使用ConbinedMultiDict模块对传输的两个不同的值进行合并,一起传入wtf文件传输判定中进行验证<br>          userform = userForm(CombinedMultiDict([request.form,request.files]))<br>          if userform.validate():<br>              avater = userform.avater.data<br>              filename = secure_filename(avater.filename)<br>              avater.save(os.path.join(upload_url,filename))<br>              return ‘上传成功’</p>
<pre><code></code></pre>]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask_script</title>
    <url>/2018/08/13/Flask/flask_script/</url>
    <content><![CDATA[<h2 id="flask-script"><a href="#flask-script" class="headerlink" title="*flask_script*"></a><strong>*<u>flask_script*</u></strong></h2><h2 id="flask-script安装"><a href="#flask-script安装" class="headerlink" title="flask_script安装:"></a>flask_script安装:</h2><a id="more"></a>

<ol>
<li><p>​    安装方法</p>
<ol>
<li><pre><code>pip install flask-script
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"><span class="comment">## flask_script初次使用:</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> ```python</span><br><span class="line">   <span class="keyword">from</span> flask_script <span class="keyword">import</span> Manage</span><br><span class="line">   <span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line">   manage = Manage(app)</span><br><span class="line"><span class="meta">   @manage.command</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">       print(<span class="string">'hello world'</span>)</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">   <span class="comment">#最简单的flask_script创建</span></span><br><span class="line">   <span class="comment">#无参数</span></span><br></pre></td></tr></table></figure></code></pre></li>
</ol>
</li>
<li><pre><code class="python"><span class="meta">@manage.option('-u','--username',dest='')</span>
<span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(username)</span>:</span>
    print(<span class="string">"你输入的账号为%s"</span>%username)

<span class="comment">#有参数</span>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">3.</span> 进入命令提示符,进入代码所在的文件夹</span><br><span class="line"></span><br><span class="line">   <span class="number">1.</span> ```python</span><br><span class="line">      python (文件名称) <span class="function"><span class="keyword">func</span></span></span><br><span class="line">      </span><br><span class="line">      <span class="meta">#无参数</span></span><br></pre></td></tr></table></figure>

<span class="number">2.</span> ```python
   python (文件名称) func -u <span class="string">"root"</span>

   <span class="comment">#有参数</span>
   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"><span class="comment">## flask_script进阶操作:</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 额外创建一个script文件</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 在文件中引入要集成的文件</span><br><span class="line"></span><br><span class="line">   <span class="number">1.</span> ```python</span><br><span class="line">      <span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line">      <span class="keyword">from</span> app <span class="keyword">import</span> app,db,Person</span><br><span class="line">      </span><br><span class="line">      db_script = Manager()</span><br><span class="line"><span class="meta">      @db_script.command</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">          print(<span class="string">'仓库创建成功'</span>)</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="meta">      @db_script.command</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">          print(<span class="string">'数据迁移成功'</span>)</span><br><span class="line">      </span><br><span class="line"><span class="meta">      @db_script.command</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></span><br><span class="line">          print(<span class="string">'数据映射成功'</span>)</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>在主文件中注册附属的script文件</p>
<ol>
<li><pre><code class="python"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager
<span class="keyword">from</span> app <span class="keyword">import</span> app,db,Person
<span class="keyword">from</span> db_script <span class="keyword">import</span> db_script
manager = Manager(app)
manager.add_command(<span class="string">'db'</span>,db_script)
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">4</span>. 在命令提示符中使用</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>. ```<span class="keyword">python</span></span><br><span class="line">      <span class="keyword">python</span> 文件名 db func1</span><br><span class="line">      <span class="keyword">python</span> 文件名 db func2</span><br><span class="line">      <span class="keyword">python</span> 文件名 db func3</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask_migrate</title>
    <url>/2018/08/07/Flask/flask_migrate/</url>
    <content><![CDATA[<h2 id="flask-migrate"><a href="#flask-migrate" class="headerlink" title="*flask_migrate*"></a><strong>*<u>flask_migrate*</u></strong></h2><hr>
<h2 id="flask-migrate初试"><a href="#flask-migrate初试" class="headerlink" title="flask_migrate初试:"></a>flask_migrate初试:</h2><a id="more"></a>
<ul>
<li><p>模块导入</p>
<ul>
<li><pre><code class="python"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span>  Migrate,MigrateCommand
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - Migrate用于migrate对象实例化通过app以及db来构筑完整的migrate</span><br><span class="line"></span><br><span class="line">  - MigrateCommand是一个对象,其中封存着要使用的command对象(此对象使用方法等同于flask_script的构筑方法)</span><br><span class="line"></span><br><span class="line">  - 此处还可以导入flask_script模块</span><br><span class="line"></span><br><span class="line">- 具体实现步骤</span><br><span class="line"></span><br><span class="line">  - migrate文件内的构造</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    #导入flask_script模块</span><br><span class="line">    <span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line">    #导入flask_migrate模块</span><br><span class="line">    <span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate,MigrateCommand</span><br><span class="line">    #导入app</span><br><span class="line">    <span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line">    #导入数据库链接实例db</span><br><span class="line">    <span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    #实例化manager对象</span><br><span class="line">    manager = Manager(app)</span><br><span class="line">    #开始创建app与数据库连接</span><br><span class="line">    Migrate(app,db)</span><br><span class="line">    #在创建好的对象中添加script子命令</span><br><span class="line">    manager.add_command(<span class="string">'db'</span>,MigrateCommand)</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>exts文件中的构造</p>
</li>
<li><pre><code class="python"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLALchemy

db.SQLALchemy()
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- app文件中的构造</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  <span class="keyword">from</span> flask import Flask</span><br><span class="line">  <span class="keyword">from</span> exts import db</span><br><span class="line">  import config</span><br><span class="line">  app = Flask(__name__)</span><br><span class="line">  app.config.from_object(config)</span><br><span class="line">  db.init_app(app)</span><br><span class="line">  @app.route(<span class="string">'/'</span>)</span><br><span class="line">  def hello_world():</span><br><span class="line">      return <span class="string">'Hello World!'</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">      app.<span class="builtin-name">run</span>()</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>models文件中的构造</p>
</li>
<li><pre><code class="python"><span class="keyword">from</span> exts <span class="keyword">import</span> db
<span class="class"><span class="keyword">class</span> <span class="title">person</span><span class="params">(db.Model)</span>:</span>
    __tablename__ = <span class="string">'person'</span>
    id = db.column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)
    name = db.Column(db.String(<span class="number">100</span>))
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"><span class="section">## flask_migrate在命令行中的使用:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>进入文件夹,打开命令窗口</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span><span class="code">```</span>python</span><br><span class="line">  python 文件名 db(子命令名称) init</span><br><span class="line">  #创建一个migrations文件夹</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>创建一个迁移文件</p>
</li>
<li><pre><code class="python">python 文件名 db(子命令名称) migrate
<span class="comment">########################################</span>
<span class="comment">#注意,这里有一个坑,如果在创建migrate文件的时候,没有传入你的models文件中的表(类)</span>
<span class="comment">#那么将会出现无法找到表的情况</span>
<span class="comment">#具体表现形式为</span>
<span class="string">"""</span>
<span class="string">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span>
<span class="string">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span>
<span class="string">INFO  [alembic.env] No changes in schema detected.</span>
<span class="string">"""</span>
<span class="comment">#在这种情况下,需要在migrate中导入表</span>
form models <span class="keyword">import</span> Person
<span class="comment">########################################</span>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 将创建好的迁移文件映射到数据库中</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  python 文件名 db(子命令名) upgrade</span><br><span class="line">  #完成数据库映射</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>python 文件名 db(子命令名) downgrade</p>
</li>
<li><p>python 文件名 db(子命令名) head</p>
</li>
<li><p>python 文件名 db(子命令名) history</p>
</li>
</ul>
<p>基本上所有的方法对应着flask_alembic中的方法</p>
<p>可以使用 –help方法查看可以使用的全部方法</p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask开端</title>
    <url>/2018/08/03/Flask/flask/</url>
    <content><![CDATA[<h2 id="—————————–flask开端——————————–"><a href="#—————————–flask开端——————————–" class="headerlink" title="—————————–flask开端——————————–"></a>—————————–flask开端——————————–</h2><hr>
<h2 id="flask安装"><a href="#flask安装" class="headerlink" title="flask安装:"></a>flask安装:</h2><a id="more"></a>
<ul>
<li>​    pip install flask     在命令提示符中输入pip指令进行安装</li>
<li>​        使用pycharm安装flask</li>
</ul>
<hr>
<h2 id="flask使用"><a href="#flask使用" class="headerlink" title="flask使用:"></a>flask使用:</h2><ul>
<li><p>​    初次创建flask工程</p>
<ul>
<li><pre><code class="python"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask

app = Flask(__name__)

</code></pre>
</li>
</ul>
</li>
</ul>
<pre><code>@app.route(&apos;/&apos;)
def hello_world():
    return &apos;hello world!&apos;

if __name__ = &apos;__main__&apos;:
    app.run(debug=True)
```</code></pre><ul>
<li>注意,在2018之后版本的pycharm中,设定debug=true并不能开启debug模式,想要开启debug模式需要在pycharm中进行设定</li>
</ul>
<ul>
<li>点击运行按钮左边的选项,在台出的页面中选择edit configurations</li>
<li>进入后勾选FLASK_DEBUG</li>
</ul>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>flask_route</title>
    <url>/2018/08/03/Flask/flask_route/</url>
    <content><![CDATA[<h2 id="flask-route"><a href="#flask-route" class="headerlink" title="*flask_route*"></a><strong>*<u>flask_route*</u></strong></h2><a id="more"></a>
<ul>
<li><p>创建app主体</p>
<ul>
<li><pre><code class="python"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask
app = Flask(__name__)
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>绑定路由</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span><span class="code">```</span>python</span><br><span class="line"><span class="code">    @app.route('/')</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><pre><code class="python"><span class="meta">@app.route('/',methods=['GET','PORT'])</span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 绑定路由时,如果不设定methods方法,将会默认为get方法,这种情况下,其他方法无法访问</span><br><span class="line"></span><br><span class="line">- 设定路由的执行函数</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world!'</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>路由的执行函数通过return来实现,在不返回HTML页面的情况下,可以将要返回的数值直接返回,但是只能返回字符串类型</p>
</li>
</ul>
</li>
<li><p>在设定玩路由之后,只需要开辟一个程序入口进行运行,就构成了一个完整的flask</p>
<ul>
<li><pre><code class="python"><span class="keyword">if</span> __name__ = <span class="string">'__main'</span>:
    app.run(debug=<span class="literal">True</span>)</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF自定义错误捕获</title>
    <url>/2018/04/28/Django/DRF%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="自定义错误捕获"><a href="#自定义错误捕获" class="headerlink" title="自定义错误捕获:"></a>自定义错误捕获:</h2><a id="more"></a>
<p>在drf和django框架中,仅仅内置了一些常见的错误捕获,如:</p>
<ul>
<li><p>​    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HTTP_100_CONTINUE = <span class="number">100</span></span><br><span class="line">HTTP_101_SWITCHING_PROTOCOLS = <span class="number">101</span></span><br><span class="line">HTTP_200_OK = <span class="number">200</span></span><br><span class="line">HTTP_201_CREATED = <span class="number">201</span></span><br><span class="line">HTTP_202_ACCEPTED = <span class="number">202</span></span><br><span class="line">HTTP_203_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span></span><br><span class="line">HTTP_204_NO_CONTENT = <span class="number">204</span></span><br><span class="line">HTTP_205_RESET_CONTENT = <span class="number">205</span></span><br><span class="line">HTTP_206_PARTIAL_CONTENT = <span class="number">206</span></span><br><span class="line">HTTP_207_MULTI_STATUS = <span class="number">207</span></span><br><span class="line">HTTP_208_ALREADY_REPORTED = <span class="number">208</span></span><br><span class="line">HTTP_226_IM_USED = <span class="number">226</span></span><br><span class="line">HTTP_300_MULTIPLE_CHOICES = <span class="number">300</span></span><br><span class="line">HTTP_301_MOVED_PERMANENTLY = <span class="number">301</span></span><br><span class="line">HTTP_302_FOUND = <span class="number">302</span></span><br><span class="line">HTTP_303_SEE_OTHER = <span class="number">303</span></span><br><span class="line">HTTP_304_NOT_MODIFIED = <span class="number">304</span></span><br><span class="line">HTTP_305_USE_PROXY = <span class="number">305</span></span><br><span class="line">HTTP_306_RESERVED = <span class="number">306</span></span><br><span class="line">HTTP_307_TEMPORARY_REDIRECT = <span class="number">307</span></span><br><span class="line">HTTP_308_PERMANENT_REDIRECT = <span class="number">308</span></span><br><span class="line">HTTP_400_BAD_REQUEST = <span class="number">400</span></span><br><span class="line">HTTP_401_UNAUTHORIZED = <span class="number">401</span></span><br><span class="line">HTTP_402_PAYMENT_REQUIRED = <span class="number">402</span></span><br><span class="line">HTTP_403_FORBIDDEN = <span class="number">403</span></span><br><span class="line">HTTP_404_NOT_FOUND = <span class="number">404</span></span><br><span class="line">HTTP_405_METHOD_NOT_ALLOWED = <span class="number">405</span></span><br><span class="line">HTTP_406_NOT_ACCEPTABLE = <span class="number">406</span></span><br><span class="line">HTTP_407_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span></span><br><span class="line">HTTP_408_REQUEST_TIMEOUT = <span class="number">408</span></span><br><span class="line">HTTP_409_CONFLICT = <span class="number">409</span></span><br><span class="line">HTTP_410_GONE = <span class="number">410</span></span><br><span class="line">HTTP_411_LENGTH_REQUIRED = <span class="number">411</span></span><br><span class="line">HTTP_412_PRECONDITION_FAILED = <span class="number">412</span></span><br><span class="line">HTTP_413_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span></span><br><span class="line">HTTP_414_REQUEST_URI_TOO_LONG = <span class="number">414</span></span><br><span class="line">HTTP_415_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span></span><br><span class="line">HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span></span><br><span class="line">HTTP_417_EXPECTATION_FAILED = <span class="number">417</span></span><br><span class="line">HTTP_422_UNPROCESSABLE_ENTITY = <span class="number">422</span></span><br><span class="line">HTTP_423_LOCKED = <span class="number">423</span></span><br><span class="line">HTTP_424_FAILED_DEPENDENCY = <span class="number">424</span></span><br><span class="line">HTTP_426_UPGRADE_REQUIRED = <span class="number">426</span></span><br><span class="line">HTTP_428_PRECONDITION_REQUIRED = <span class="number">428</span></span><br><span class="line">HTTP_429_TOO_MANY_REQUESTS = <span class="number">429</span></span><br><span class="line">HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE = <span class="number">431</span></span><br><span class="line">HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS = <span class="number">451</span></span><br><span class="line">HTTP_500_INTERNAL_SERVER_ERROR = <span class="number">500</span></span><br><span class="line">HTTP_501_NOT_IMPLEMENTED = <span class="number">501</span></span><br><span class="line">HTTP_502_BAD_GATEWAY = <span class="number">502</span></span><br><span class="line">HTTP_503_SERVICE_UNAVAILABLE = <span class="number">503</span></span><br><span class="line">HTTP_504_GATEWAY_TIMEOUT = <span class="number">504</span></span><br><span class="line">HTTP_505_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span></span><br><span class="line">HTTP_506_VARIANT_ALSO_NEGOTIATES = <span class="number">506</span></span><br><span class="line">HTTP_507_INSUFFICIENT_STORAGE = <span class="number">507</span></span><br><span class="line">HTTP_508_LOOP_DETECTED = <span class="number">508</span></span><br><span class="line">HTTP_509_BANDWIDTH_LIMIT_EXCEEDED = <span class="number">509</span></span><br><span class="line">HTTP_510_NOT_EXTENDED = <span class="number">510</span></span><br><span class="line">HTTP_511_NETWORK_AUTHENTICATION_REQUIRED = <span class="number">511</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>但是一些偏门的,或者说,更加细微之处的错误,就需要我们自定义一些错误捕获函数来进行捕获</p>
<p>那么,废话不多说,上代码</p>
<ol>
<li><p>第一步,创建一个错误捕获函数的文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(exc,context)</span>:</span></span><br><span class="line">    <span class="comment">#实例化框架自带的错误捕获,先进行筛选</span></span><br><span class="line">    response = exception_handler(exc,context)</span><br><span class="line">	<span class="comment">#当没有捕获到错误之后,执行我们自定义的错误验证机制</span></span><br><span class="line">    <span class="keyword">if</span> response == <span class="literal">None</span>:</span><br><span class="line">        <span class="string">'''开始进行判断'''</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(exc,ZeroDivisionError):</span><br><span class="line">            print(<span class="string">'服务器错误'</span>)</span><br><span class="line">            response = Response(<span class="string">'服务器错误'</span>,status=status.HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="comment">#上面的验证返回的结果存储到response,这是一个已经完成序列化的数据,可以直接返回</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件setting中进行配置(通常情况下,我们创建一个新的文件夹来存放这个文件,然后再setting中以app的形式注册这个文件夹)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'EXCEPTION_HANDLER'</span>:<span class="string">'utiles.excaptions.func'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>完成了上述的工作之后,当我们的码出现错误之后,将会自动进行错误捕获</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF中generics</title>
    <url>/2018/04/25/Django/DRF%E4%B8%ADgenerics/</url>
    <content><![CDATA[<h2 id="generics"><a href="#generics" class="headerlink" title="generics"></a>generics</h2><a id="more"></a>
<ol>
<li><p>这模块中封装着GenericsAPIViews类,对APIViews进行了进一步的封装,比起APIViews,它的功能进一步扩展</p>
</li>
<li><pre><code>from rest_framework.generics import GenericsAPIViews
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">3.</span> </span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> .serializer <span class="keyword">import</span> StudentsSerializer,Students_Serializer</span><br><span class="line"><span class="keyword">from</span> . models <span class="keyword">import</span> CuressInfo,Students</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsAPIViews</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># queryset = Students.objects.all()</span></span><br><span class="line">    <span class="comment"># serializer_class = StudentsSerializer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        students = Students.objects.all()</span><br><span class="line">        serializer = StudentsSerializer(instance=students,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> json</span><br><span class="line">        data_string = request.body.decode()</span><br><span class="line">        data_dict = json.loads(data_string)</span><br><span class="line">        serializer = Students_Serializer(data=data_dict)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stdSl</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,id)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> .serializer <span class="keyword">import</span> SerializerModel</span><br><span class="line">        serializer = SerializerModel(data=Students.objects.all(),many=<span class="literal">True</span>)</span><br><span class="line">        serializer.is_valid()</span><br><span class="line">        print(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(serializer.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,id)</span>:</span></span><br><span class="line">        <span class="keyword">from</span> .serializer <span class="keyword">import</span> SerializerModel</span><br><span class="line">        <span class="keyword">import</span> json</span><br><span class="line">        data_string = request.body.decode()</span><br><span class="line">        data_dict = json.loads(data_string)</span><br><span class="line">        serializer = SerializerModel(data=data_dict)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,id)</span>:</span></span><br><span class="line">        instance = Students.objects.get(id=id)</span><br><span class="line">        <span class="keyword">import</span> json</span><br><span class="line">        data_dict = json.loads(request.body.decode())</span><br><span class="line">        serializer = Students_Serializer(instance=instance,data=data_dict)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> .serializer <span class="keyword">import</span> ModelSerializerAPIViews</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsModelAPIViews</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        instance = Students.objects.all()</span><br><span class="line">        serializer = ModelSerializerAPIViews(instance=instance,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># instance = Students.objects.get(id=id)</span></span><br><span class="line">        data_dict = request.data</span><br><span class="line">        serializer = ModelSerializerAPIViews(data=data_dict)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        print(serializer.error_messages)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsGenericAPIViews</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Students.objects.all()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        all_dict = self.get_queryset()</span><br><span class="line">        serializer = ModelSerializerAPIViews(instance=all_dict,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        serializer = ModelSerializerAPIViews(data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsGenericAPIViews</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Students.objects.all()</span><br><span class="line">    serializer_class = ModelSerializerAPIViews</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        all_dict = self.get_queryset()</span><br><span class="line">        serializer = self.get_serializer(instance=all_dict,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        serializer.save()</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ListModelMixin                  展示全部数据,里面封装的是全部数据的获取,方法名为list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CreateModelMixin	   添加新的数据,这里面封存的方法名为create</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DestroyAPIView	  删除对应的数据,对应的方法为destroy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UpdateAPIView		修改对应的数据,对应的方法名为update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RetrieveAPIView	  获取单条数据,需要有对应的pk数值传入,方法名为retrieve</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RetrieveUpdateDestroyAPIView	这个里面封装了多个视图分支类,包括DestroyAPIView-------UpdateAPIView------RetrieveAPIView------GenericsAPIView四个,所以它里面包含了对应的方法</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin,CreateModelMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsListModelMixin</span><span class="params">(GenericAPIView,ListModelMixin,CreateModelMixin)</span>:</span></span><br><span class="line">    queryset = Students.objects.all()</span><br><span class="line">    serializer_class = ModelSerializerAPIViews</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># from rest_framework.generics import ListAPIView,CreateAPIView,DestroyAPIView,UpdateAPIView,RetrieveAPIView</span></span><br><span class="line"><span class="comment"># from rest_framework.generics import RetrieveUpdateDestroyAPIView</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 终极形态</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># ModelAPIViewSet里面,相当于继承了以上的多种方法</span></span><br><span class="line"><span class="comment"># 同时,在使用ModelAPIViewSet创建的类视图进行注册时,需要在as_view中传入参数具体操作方法请往下看==============&gt;</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students_ListModelMixin</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Students.objects.all()</span><br><span class="line">    serializer_class = ModelSerializerAPIViews</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ReadOnlyModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students_ListModelMixin</span><span class="params">(ReadOnlyModelViewSet)</span>:</span></span><br><span class="line">    <span class="comment"># 当使用ReadOnlyModelViewSet时,所获得的方法是只读的,也即是说,里面并没有封装修改数据的方法</span></span><br><span class="line">    queryset = Students.objects.all()</span><br><span class="line">    serializer_class = ModelSerializerAPIViews</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================&gt;</span></span><br><span class="line">	<span class="comment"># 路由属性为显示全部数据时的注册方式</span></span><br><span class="line">	path(<span class="string">'students5/'</span>,Students_ListModelMixin.as_view(&#123;</span><br><span class="line">        <span class="string">'get'</span>:<span class="string">'list'</span>,</span><br><span class="line">        <span class="string">'post'</span>:<span class="string">'create'</span></span><br><span class="line">    &#125;)),</span><br><span class="line">    <span class="comment">#当需要使用路由获取参数时的方式</span></span><br><span class="line">    re_path(<span class="string">r'students5/(?P&lt;pk&gt;\d+)/'</span>,Students_ListModelMixin.as_view(&#123;</span><br><span class="line">        <span class="string">'get'</span>:<span class="string">'retrieve'</span>,</span><br><span class="line">        <span class="string">'put'</span>:<span class="string">'update'</span>,</span><br><span class="line">        <span class="string">'delete'</span>:<span class="string">'destroy'</span></span><br><span class="line">    &#125;)),</span><br><span class="line">	<span class="comment"># 确切的书,在as_view中,你需要将访问方式同函数绑定起来,确保你在访问时将会执行对应的方法</span></span><br><span class="line">    <span class="comment"># 访问方式与方法的绑定一般整合为一个字典形式传入视图类</span></span><br></pre></td></tr></table></figure>


</code></pre></li>
</ol>
<hr>
<h3 id="在视图函数函数类中调用多个序列化器"><a href="#在视图函数函数类中调用多个序列化器" class="headerlink" title="在视图函数函数类中调用多个序列化器"></a>在视图函数函数类中调用多个序列化器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> .serializer <span class="keyword">import</span> CuressInfo,ModelSerializerAPIViews</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsModelViewSet</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    queryset = Students.objects.all()</span><br><span class="line">    serializer_class = ModelSerializerAPIViews</span><br><span class="line">    <span class="comment"># 重写get_serializer_class方法,在其中添加判断,如果对应的访问方式,就返回需要用到的序列化器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.request.method == <span class="string">'GET'</span>:</span><br><span class="line">            <span class="keyword">return</span> ModelSerializerAPIViews</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> CuressInfo</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        instance = self.get_queryset()</span><br><span class="line">        serializer = self.get_serializer(instance=instance,many=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        data = request.data</span><br><span class="line">        serializer = self.get_serializer(data=data)</span><br><span class="line">        serializer.is_valid(raise_excaption=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Students.objects.all()</span><br><span class="line">    serializer_class = ModelSerializerAPIViews</span><br><span class="line">    <span class="comment"># 重写get_serializer_class方法,在其中添加判断,如果对应的访问方式,就返回需要用到的序列化器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#在视图集函数中,使用的并不是self.request.method进行判断,而是self.action</span></span><br><span class="line">        <span class="keyword">if</span> self.action == <span class="string">'list'</span>:</span><br><span class="line">            <span class="keyword">return</span> ModelSerializerAPIViews</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> CuressInfo</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        instance = self.get_queryset()</span><br><span class="line">        serializer = self.get_serializer(instance=instance,many=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        data = request.data</span><br><span class="line">        serializer = self.get_serializer(data=data)</span><br><span class="line">        serializer.is_valid(raise_excaption=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF中的APIViews视图类</title>
    <url>/2018/04/21/Django/DRF%E4%B8%AD%E7%9A%84APIViews%E8%A7%86%E5%9B%BE%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="from-rest-framework-views-import-APIViews"><a href="#from-rest-framework-views-import-APIViews" class="headerlink" title="from rest_framework.views import APIViews"></a>from rest_framework.views import APIViews</h2><a id="more"></a>
<ol>
<li><p>封装在DRF中的视图模块,相比直接使用django中的views模块,这个模块的使用更加的严谨,功能更多,更好用</p>
<ol>
<li>从页面中使用request获取到的json数据将会自动转换成字典类型的数据,方便使用,不需要额外导入一次json模块</li>
<li>其他方面的使用views使用方式相同</li>
<li>从根本上来看,APIViews继承自Views</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF验证器机制使用</title>
    <url>/2018/04/18/Django/DRF%E9%AA%8C%E8%AF%81%E5%99%A8%E6%9C%BA%E5%88%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="DRF验证器机制"><a href="#DRF验证器机制" class="headerlink" title="DRF验证器机制"></a>DRF验证器机制</h2><a id="more"></a>
<ol>
<li><p>创建基于drf框架的验证器</p>
<ol>
<li><pre><code class="python"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializer
<span class="class"><span class="keyword">class</span> <span class="title">SerializerStudents</span><span class="params">(serializer.Serializer)</span>:</span>
    name = serializer.CharField(max_length=<span class="number">10</span>,min_length=<span class="number">2</span>)
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2.</span> 在创建好的视图类中使用这个验证器类</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Students</span><span class="params">(View)</span>:</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">           <span class="comment">#获取客户端传输过来的json数据并进行解码操作</span></span><br><span class="line">           data_string = request.body.decode()</span><br><span class="line">           <span class="comment">#导入json模块</span></span><br><span class="line">           <span class="keyword">import</span> json</span><br><span class="line">           <span class="comment">#使用json模块的方法对获取到的字符串进行转换,变成一个字典</span></span><br><span class="line">           data_dict = json.loads(data_string)</span><br><span class="line">           <span class="comment">#使用创建好的验证器类</span></span><br><span class="line">           <span class="keyword">from</span> .serializer <span class="keyword">import</span> SerializerStudents</span><br><span class="line">           serializer = SerializerStudents(data=data_dict)</span><br><span class="line">           <span class="comment">#验证器类的is_valid方法返回的数据为bool数据,当通过验证时,返回结果为true,否则返回false</span></span><br><span class="line">           print(serializer.is_valid())</span><br><span class="line">           <span class="comment">#is_valid方法的属性为raise_excaption</span></span><br><span class="line">           <span class="comment">#这个属性默认时关闭的,当他开启时,意味着当验证出错时,将会直接报错,并直接停止代码的继续运行,</span></span><br><span class="line">           print(serializer.is_valid(raise_exception=<span class="literal">True</span>))</span><br><span class="line">           <span class="comment">#返回报错信息,这个并不会阻止程序的继续运行</span></span><br><span class="line">           print(serializer.erreo_messages)</span><br><span class="line">           <span class="comment">#</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
</ol>
</li>
<li><p>创建一个验证器方法进行验证</p>
<ol>
<li><p>单字段验证</p>
<ul>
<li><pre><code class="python"><span class="function"><span class="keyword">def</span> <span class="title">validate_name</span><span class="params">(self,data)</span>:</span>
    <span class="comment">#传入的参数可以直接设定为data</span>
    <span class="keyword">if</span> data == <span class="string">'root'</span>:
        <span class="keyword">raise</span> serializer.ValidationError(message=<span class="string">'用户名不能为root'</span>)
        <span class="comment">#当满足条件时,返回错误原因和信息</span>
    <span class="keyword">return</span> data
    <span class="comment">#当通过验证时,返回原数据data</span>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2.</span> 全局字段验证</span><br><span class="line"></span><br><span class="line">   - ```python</span><br><span class="line">     def <span class="keyword">validate</span>(self,data_dict):</span><br><span class="line">         #验证方法和单字段验证基本相同,区别是传入的数据类型是字典,进行判断是只需要从字典中取出对应的值即可进行判断,要注意的是,最终依然要将这个数据返回回去</span><br><span class="line">         <span class="type">name</span> = data_dict.<span class="keyword">get</span>(<span class="string">'name'</span>)</span><br><span class="line">         <span class="keyword">password</span> = data_dict.<span class="keyword">get</span>(<span class="string">'password'</span>)</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">return</span> data_dict</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
</ol>
</li>
<li><p>创建一个验证器类外部的方法进行使用</p>
<ol>
<li><p>在验证器类外部进行函数定义</p>
<ul>
<li><pre><code class="python"><span class="function"><span class="keyword">def</span> <span class="title">check_validate</span><span class="params">(data)</span>:</span>
    <span class="keyword">if</span> data==<span class="string">'user'</span>:
        <span class="keyword">raise</span> serializer.ValidationError(message=<span class="string">'不能使用user作为用户名'</span>)
    <span class="keyword">return</span> data
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2.</span> 在验证器类中定义字段属性时使用</span><br><span class="line"></span><br><span class="line">   - ```python</span><br><span class="line">     name = serializer.<span class="constructor">CharFIeld(<span class="params">max_length</span>=20,<span class="params">min_length</span>=2,<span class="params">validates</span>=[<span class="params">check_validate</span>])</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
</ol>
</li>
<li><p>在验证器类中重写create(添加一条数据)方法和update(修改一条数据)方法</p>
<ol>
<li><p>重写create方法</p>
<ul>
<li><pre><code class="python"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self,validate_data)</span>:</span>
    name = validate_data.get(<span class="string">'name'</span>)
    instance = Students.objects.create(
        name=name
    )
    <span class="keyword">return</span> instance
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2</span>. 重写<span class="keyword">update</span>方法</span><br><span class="line"></span><br><span class="line">   - ```python</span><br><span class="line">     def <span class="keyword">update</span>(self,<span class="keyword">instance</span>,validate_data):</span><br><span class="line">        <span class="built_in"> name</span> = validate_date,get(<span class="string">'name'</span>)</span><br><span class="line">         <span class="keyword">instance</span><span class="built_in">.name</span> =<span class="built_in"> name</span></span><br><span class="line">         <span class="keyword">instance</span>.save()</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">instance</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>使用这两种方法</p>
<ol>
<li><p>通用的激活方法</p>
<ul>
<li><pre><code class="python">serializer.save()
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   - 通过验证之后的数据,可以使用方法save()</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. create可以直接使用,当验证时传入的参数仅有一个data时,将会调用create方法,而不会激活<span class="keyword">update</span>方法</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 使用<span class="keyword">update</span>方法</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>. ```python</span><br><span class="line">          def <span class="keyword">update</span>(self, <span class="keyword">instance</span>, validated_data):</span><br><span class="line">             <span class="built_in"> name</span> = validated_data.get(<span class="string">'name'</span>)</span><br><span class="line">              curess = <span class="number">1</span></span><br><span class="line">              <span class="keyword">instance</span><span class="built_in">.name</span> =<span class="built_in"> name</span></span><br><span class="line">              <span class="keyword">instance</span>.curess_id = curess</span><br><span class="line">              <span class="keyword">instance</span>.save()</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">instance</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
<ol start="2">
<li><pre><code class="python"><span class="class"><span class="keyword">class</span> <span class="title">stdSl</span><span class="params">(View)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,id)</span>:</span>
        instance = Students.objects.get(id=id)
        <span class="keyword">import</span> json
        data_dict = json.loads(request.body.decode())
        serializer = Students_Serializer(instance=instance,data=data_dict)
        serializer.is_valid(raise_exception=<span class="literal">True</span>)
        serializer.save()
        <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="以上内容为serializer-Serializer组件的使用-相比较起来-drf框架中其实已经封装好了专用的模型类序列化器"><a href="#以上内容为serializer-Serializer组件的使用-相比较起来-drf框架中其实已经封装好了专用的模型类序列化器" class="headerlink" title="以上内容为serializer.Serializer组件的使用,相比较起来,drf框架中其实已经封装好了专用的模型类序列化器"></a>以上内容为serializer.Serializer组件的使用,相比较起来,drf框架中其实已经封装好了专用的模型类序列化器</h2><hr>
<h3 id="serializer-ModelSerializer"><a href="#serializer-ModelSerializer" class="headerlink" title="serializer.ModelSerializer:"></a>serializer.ModelSerializer:</h3><ul>
<li></li>
</ul>
<hr>
<h2 id="验证器使用时的属性和字段"><a href="#验证器使用时的属性和字段" class="headerlink" title="验证器使用时的属性和字段:"></a>验证器使用时的属性和字段:</h2><ul>
<li></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Git操作</title>
    <url>/2018/04/14/Git/Git%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="git-bash操作实例"><a href="#git-bash操作实例" class="headerlink" title="git bash操作实例:"></a>git bash操作实例:</h2><a id="more"></a>
<ul>
<li><p>​    在文件夹中打开git(在文件页面上方的路径里面输入git bash即可快速打开git编辑界面)</p>
</li>
<li><pre><code>git init //初始化git文件包
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
git add 文件名     //创建镜像文件
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
git commit  //提交
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
git commit -m &apos;描述信息&apos; //提交,但不会打开编辑窗口
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
git clone https://github.com/fcg22450/my_flask.git

#https://github.com/fcg22450/my_flask.git这里的内容从github页面获取
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
git add .
#将当前文件夹中的所有文件打包成迁移文件
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
git push -u origin master
#将生成的迁移文件上传到github仓库中
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
cd test 
#进入对应文件夹
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
git status
#查看当前准备好的迁移文件
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
git config --system --unset credential.helper
# 清空密码
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
git config --global credential.helper store
# 保存密码</code></pre></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF文件上传与静态文件访问</title>
    <url>/2018/04/13/Django/DRF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="DRF文件上传及访问"><a href="#DRF文件上传及访问" class="headerlink" title="DRF文件上传及访问"></a>DRF文件上传及访问</h2><a id="more"></a>
<h2 id="关于DRF文件上传"><a href="#关于DRF文件上传" class="headerlink" title="关于DRF文件上传:"></a>关于DRF文件上传:</h2><p>​    其实我的掌握并不强,目前也只能完成非前后端分离的状态提交的数据,在前后端分离的状态,我提交的数据不知道为什么始终无法传上来,查验代码之后提示是我的上传数据格式不一致,但是查了好久都没找到具体的解决办法</p>
<p>​    那么,先演示一下使用drf进行的django工程内部的提交:</p>
<p>​        </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">imgCal</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = imageInfo.objects.all()</span><br><span class="line">    serializer_class = StudentsSerializer</span><br><span class="line">    <span class="comment">#重写get方法,确保在进行get访问时获取进行文件上传的模板</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'./imgfrom.html'</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#在这里,我选择了重写ModelViewSet中自带的create方法,并将其更名为post</span></span><br><span class="line">    <span class="comment">#模板自带的create方法所获得的request.data并不是表单直接提交的数据,因为个人原因(其实就是懒)我将request.data方法改掉,改为使用表单的方式获取数据,然后存储到一个字典之中,</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 创建一个新的字典</span></span><br><span class="line">        a_dict = &#123;&#125;</span><br><span class="line">        <span class="comment"># 获取上传的文件,并存储到创建的字典中去</span></span><br><span class="line">        a_dict[<span class="string">'name'</span>] = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        a_dict[<span class="string">'img'</span>] = request.FILES.get(<span class="string">'img'</span>)</span><br><span class="line">        <span class="comment"># 最后得到的,是这样一个集合</span></span><br><span class="line">        <span class="comment"># &lt; QueryDict: &#123;'name': ['小小'], 'img': ['C:\\fakepath\\003.png']&#125; &gt;</span></span><br><span class="line">        print(request.GET)</span><br><span class="line">        <span class="comment"># 创建序列化器对象,将床架你的字典作为data放入序列化器</span></span><br><span class="line">        serializer = self.get_serializer(data=a_dict)</span><br><span class="line">        print(serializer.is_valid())</span><br><span class="line">        <span class="comment"># create方法原生的使用方法,转到下一个类方法中</span></span><br><span class="line">        self.perform_create(serializer)</span><br><span class="line">        headers = self.get_success_headers(serializer.data)</span><br><span class="line">        <span class="comment"># 将最终结果返回回去,不需要修改</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        <span class="comment"># 对序列化器结果进行判断,这里加不加都可以,之所以加上这层判断,只是我在书写过程中,为了确保结构完整,并且能够在每一个位置进行判断,确定bug位置而书写的</span></span><br><span class="line">        <span class="comment">#当序列化通过时,执行save</span></span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid(raise_exception=<span class="literal">True</span>):</span><br><span class="line">            serializer.save()</span><br><span class="line">        <span class="comment"># 当序列化未通过时,将会执行以下数据</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'数据无效'</span>,serializer.data)</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_success_headers</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">'Location'</span>: str(data[api_settings.URL_FIELD_NAME])&#125;</span><br><span class="line">        <span class="keyword">except</span> (TypeError, KeyError):</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>以下是序列化器部分:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = imageInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure>

<p>平平无奇的序列化器,没有添加什么额外的配置要求</p>
<p>值得一提的是,在数据库中我并不是使用的imageFields,而是使用了兼容性感觉更高的filefield</p>
<p>下面是数据库配置:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_to</span><span class="params">(instance, fielname)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'/'</span>.join([settings.MEDIA_ROOT, instance.user_name, fielname])</span><br><span class="line"><span class="comment">#以上代码是自己重写的文件下载模块,已弃之不用</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">imageInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    img = models.FileField(upload_to=<span class="string">''</span>)</span><br><span class="line">    <span class="comment"># 必备参数,upload</span></span><br><span class="line">    <span class="comment"># 如果你不需要再设定好的下载路径中再次准备一个文件夹进行文件存储,可以直接为空,即: upload=''</span></span><br><span class="line">    <span class="comment"># 当然,在使用之前,需要准备好MEDIA_URL以及MEDIA_ROOT,如果想要在网页中能直接通过网址进行蹄片查看,需要配置好meida路由</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'imageinfo'</span></span><br></pre></td></tr></table></figure>

<p>以下是路由配置:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re_path(<span class="string">'media/(?P&lt;path&gt;.*)'</span>,serve,&#123;<span class="string">'document_root'</span>:settings.MEDIA_ROOT&#125;),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#setting文件配置</span></span><br><span class="line"></span><br><span class="line">MEDIA_URL = <span class="string">'static/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'static\media'</span>)</span><br></pre></td></tr></table></figure>

<p>在完成上述的代码之后,只需要配置好模板文件即可,正常的form表单的提交方法,后台的代码将会自行对获得的数据进行解析存储</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF数据分页器</title>
    <url>/2018/04/07/Django/DRF%E6%95%B0%E6%8D%AE%E5%88%86%E9%A1%B5%E5%99%A8/</url>
    <content><![CDATA[<h2 id="分页器类书写"><a href="#分页器类书写" class="headerlink" title="分页器类书写"></a>分页器类书写</h2><a id="more"></a>
<ol>
<li><pre><code class="python"><span class="comment"># 废话不多说,直接上代码</span>
<span class="keyword">from</span> rest_framework <span class="keyword">import</span> pagination

<span class="class"><span class="keyword">class</span> <span class="title">PaginationStudents</span><span class="params">(pagination.PageNumberPagination)</span>:</span>
    page_size = <span class="number">5</span>    
    <span class="comment"># 在不传入page_size参数时的默认长度</span>
    page_size_query_param = <span class="string">'size'</span>
    <span class="comment"># 设定在使用url传递参数时每页展示数量的参数名</span>
    page_query_param = <span class="string">'page'</span>
    <span class="comment"># 设定在使用url传递参数时展示的页数的参数名</span>
    max_page_size = <span class="number">5</span>
    <span class="comment"># 设定每页的最大展示数量</span>

</code></pre>
</li>
</ol>
<p>   #注意,在使用分页的时候,可以不传入每页展示数量,默认将会使用设定好的page_size<br>   <figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2.</span> 创建好分页器类之后,进行使用</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   from rest_framework.views <span class="keyword">import</span> ModelAPIView</span><br><span class="line"><span class="class">   <span class="keyword">class</span> <span class="type">MyPaginations</span>(<span class="type">ModelAPIView</span>):</span></span><br><span class="line"><span class="class">       queryset = <span class="type">Students</span>.objects.all()</span></span><br><span class="line"><span class="class">   	serializer_class = <span class="type">MySerializers</span></span></span><br><span class="line"><span class="class">       pagination_class = <span class="type">PaginationStudents</span></span></span><br></pre></td></tr></table></figure></p>
<ol start="3">
<li><p>使用时的传参方式</p>
<ul>
<li><pre><code>127.0.0.1/api/students5/?page=1&amp;size=5

page为页码
size为单页显示的最大数量
</code></pre></li>
</ul>
</li>
</ol>
<p>​    </p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>vue路由配置</title>
    <url>/2018/04/01/Vue/vue%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="配置vue路由"><a href="#配置vue路由" class="headerlink" title="配置vue路由"></a>配置vue路由</h2><a id="more"></a>
<ol>
<li><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul>
<li><p>cd ./vueproject/src/router</p>
</li>
<li><p>进入到路由文件夹中,打开index.js文件</p>
</li>
<li><p>在文件中导入设定好的Vue路由文件</p>
<ul>
<li>import User from ‘../components/User’</li>
<li>这里可以通过输入vue文件名的方式进行快捷编写</li>
</ul>
</li>
<li><p>在路由数组中注册路由</p>
<ul>
<li><pre><code class="javascript">routes: [
    {
        path:<span class="string">'/user'</span>,
        name: <span class="string">'User'</span>,
        component:User
    }
]
&lt;!--￼<span class="number">0</span>--&gt;
&lt;router-link to=<span class="string">'/user'</span>&gt;user&lt;router-link&gt;
&lt;!--￼<span class="number">1</span>--&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>渲染:</p>
<p>使用模板语法,对传递过来的参数进行提取</p>


]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于vue的配置</title>
    <url>/2018/04/01/Vue/%E5%85%B3%E4%BA%8Evue%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Vue配置"><a href="#Vue配置" class="headerlink" title="Vue配置"></a>Vue配置</h2><a id="more"></a>


<ol>
<li><h3 id="在电脑中安装node-js"><a href="#在电脑中安装node-js" class="headerlink" title="在电脑中安装node.js"></a>在电脑中安装node.js</h3><ul>
<li>………..省略</li>
</ul>
</li>
<li><h3 id="使用node-js安装脚手架"><a href="#使用node-js安装脚手架" class="headerlink" title="使用node.js安装脚手架"></a>使用node.js安装脚手架</h3><ul>
<li><pre><code>npm install -g vue-cli
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">3.</span> ### 查看vue版本</span><br><span class="line"></span><br><span class="line">   -</span><br></pre></td></tr></table></figure>
vue -V
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">4.</span> ### vue下载换源</span><br><span class="line"></span><br><span class="line">   - ```python</span><br><span class="line">     npm --registry https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line">     #临时使用</span><br></pre></td></tr></table></figure></code></pre></li>
<li><pre><code class="python">npm config set registry https://registry.npm.taobao.org
<span class="comment">#持久使用</span>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">5.</span> ### 创建一个新的vue工程</span><br><span class="line"></span><br><span class="line">   - ```cmd</span><br><span class="line">     vue init webpack 文件名</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><h3 id="运行vue工程"><a href="#运行vue工程" class="headerlink" title="运行vue工程"></a>运行vue工程</h3><ul>
<li><pre><code>vue run dev
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">7.</span> ### 删除node_modules</span><br><span class="line"></span><br><span class="line">   -</span><br></pre></td></tr></table></figure>
npm install rimraf -g
rimraf node_modules</code></pre></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于哈希加密算法</title>
    <url>/2018/03/30/Python/%E5%85%B3%E4%BA%8E%E5%93%88%E5%B8%8C%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="哈希加密"><a href="#哈希加密" class="headerlink" title="哈希加密"></a>哈希加密</h2><a id="more"></a>
<ul>
<li><p>该加密算法对于相同的字符串将会是一致的,同时,这种加密是单向的,无法反向编译出来,也就是说,想要对 加密后的数据进行比较,你需要将要比较的数据先进行加密,然后才能进行比较,当两者内容一致时,才会通过验证</p>
</li>
<li><p>当使用在登陆页面时,其流程时这样的:输入密码===&gt;进行加密===&gt;调用数据库===&gt;进行比较===&gt;验证通过===&gt;返回session信息,进入登陆状态</p>
</li>
<li><pre><code class="python"><span class="comment">#导入哈希加密包</span>
<span class="comment">#在py3之后,md5包被移除,其功能被整合到hashlib包中</span>
<span class="keyword">import</span> hashlib
<span class="comment">#创建一个新的哈希加密对象</span>
h1 = hashlib.md5()
<span class="comment">#在对象中添加要加密的字符串,该字符串需要先转化成二进制格式,即utf8</span>
h1.update(str.encode(encoding=<span class="string">'utf8'</span>))
<span class="comment">#查看转码后的数据,hexdigest为十六进制模式</span>
print(h1.hexdigest())
<span class="comment">#查看转码后的数据,digest为二进制模式</span>
print(h1.digest())</code></pre>
</li>
<li><p>这里要注意的是,每次进行加密,都要重新创建一个哈希对象,也即是重新书写一遍==&gt;h1 = hashlib.md5()</p>
</li>
<li><p>如果不进行重新定义的话,当加密时遇到相同的字符串,如”hello world”这样的字符串,将会出现”hello worldhello world”这样的叠加形式,所以需要重新定义</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django中cookie和session</title>
    <url>/2018/03/18/Django/Django%E4%B8%ADcookie%E5%92%8Csession/</url>
    <content><![CDATA[<h2 id="COOKIES"><a href="#COOKIES" class="headerlink" title="COOKIES"></a>COOKIES</h2><a id="more"></a>
<ol>
<li><p>设置cookie</p>
<ol>
<li><p>创建一个全新的HttpResponse对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = HttpResponse(<span class="string">'设置cookie'</span>)</span><br><span class="line">response.set_cookie(<span class="string">'num'</span>,<span class="number">1</span>,max_age=<span class="number">10</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取cookie</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = request.COOKIES[<span class="string">'num'</span>]</span><br><span class="line"><span class="keyword">return</span> HttpResponse(num)</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>设置过期时间</p>
<ol>
<li><p>max_age,设置单位为秒</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response.set_cookie(<span class="string">'num'</span>,<span class="number">1</span>,max_age=<span class="number">10</span>*<span class="number">24</span>*<span class="number">3600</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>exprice,设置较为复杂,但是适合长期设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse,HttpResponse</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta</span><br><span class="line">response.set_cookie(<span class="string">'num'</span>,<span class="number">1</span>,expires=datetime.now() + timedelta(days=<span class="number">10</span>))</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<hr>
<h2 id="相较于cookie-session安全性较高-在保存一些重要数据时-更适合使用session来进行保存-如用户的帐号-密码-私人信息等"><a href="#相较于cookie-session安全性较高-在保存一些重要数据时-更适合使用session来进行保存-如用户的帐号-密码-私人信息等" class="headerlink" title="相较于cookie,session安全性较高,在保存一些重要数据时,更适合使用session来进行保存,如用户的帐号,密码,私人信息等"></a>相较于cookie,session安全性较高,在保存一些重要数据时,更适合使用session来进行保存,如用户的帐号,密码,私人信息等</h2><h2 id="sessions"><a href="#sessions" class="headerlink" title="sessions"></a>sessions</h2><ol>
<li><p>设置session</p>
<ol>
<li><pre><code class="python"><span class="comment">#设置session</span>
<span class="function"><span class="keyword">def</span> <span class="title">set_session</span><span class="params">(request)</span>:</span>
    request.session[<span class="string">'username'</span>] = <span class="string">'root'</span>
    request.session[<span class="string">'age'</span>] = <span class="string">'000000'</span>
    <span class="keyword">return</span> HttpResponse(<span class="string">'设置成功'</span>)
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2.</span> 获取<span class="keyword">session</span></span><br><span class="line"></span><br><span class="line">   <span class="number">1.</span> ```python</span><br><span class="line">      #获取<span class="keyword">session</span></span><br><span class="line">      def get_session(request):</span><br><span class="line">          username = request.<span class="keyword">session</span>[<span class="string">'username'</span>]</span><br><span class="line">          age = request.<span class="keyword">session</span>[<span class="string">'age'</span>]</span><br><span class="line">          <span class="keyword">return</span> HttpResponse(username + <span class="string">':'</span> + str(age))</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ol>
</li>
<li><p>session使用方法</p>
<ol>
<li><p>直接使用字典的键值对获取方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session[<span class="string">'cookie名'</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用get方法获取,可以设置默认值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.get(<span class="string">'cookie名,default="默认值")</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>clear,删除session中保存的数据,但是删除掉的只是值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.clear()</span><br></pre></td></tr></table></figure>
</li>
<li><p>flash,删除整条数据,完全删除所有数据,数据表完全清除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.flash()</span><br></pre></td></tr></table></figure>
</li>
<li><p>del    删除目标数据的所有内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> request.session[<span class="string">'cookie'</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置session过期时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.set_expiry(value)</span><br></pre></td></tr></table></figure>

<ul>
<li>当没有设置过期时间的时候,默认将会在两周之后过期</li>
<li>当value值为0的时候,将会在关闭浏览器的时候过期</li>
<li>当value大于0的时候,将会在value秒之后过期</li>
</ul>
</li>
<li><p>has_key   判断session中有没有对应的cookie</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.has_key(<span class="string">'username'</span>)</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django数据库关系属性</title>
    <url>/2018/03/18/Django/Django%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E7%B3%BB%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="数据库关系属性"><a href="#数据库关系属性" class="headerlink" title="数据库关系属性"></a>数据库关系属性</h2><a id="more"></a>
<ul>
<li><h2 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h2><ul>
<li><p>ForeignKey</p>
</li>
<li><p>外键专属,一对多关系设定,通常情况下,这个属性设置在多类属性中,关联一类属性</p>
</li>
<li><pre><code class="python">news_type = models.ForeignKey(<span class="string">'NewsTypeInfo'</span>,on_delete=models.CASCADE)
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">- ## 多对多关系</span><br><span class="line"></span><br><span class="line">  - ManyToManyField</span><br><span class="line"></span><br><span class="line">  - 多对多关系建立字段,这个字段可以写在任意一个里面,并不影响使用</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    news_type = models.ManyToManyField('NewsInfo')</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
</li>
</ul>
<ul>
<li><h2 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h2><ul>
<li>OneToOneField</li>
</ul>
</li>
</ul>
<h2 id="通过模型类实现关联查询语句"><a href="#通过模型类实现关联查询语句" class="headerlink" title="通过模型类实现关联查询语句:"></a>通过模型类实现关联查询语句:</h2><p>​    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Two.models <span class="keyword">import</span> *</span><br><span class="line">b = HeroInfo.objects.filter(hbook__id=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#通过一对多关系获取对象的方法</span></span><br><span class="line"><span class="comment">#关系字段加上双下划线加上对应表中的字段即可进行查询,但需要注意</span></span><br><span class="line">b = HeroInfo.object.get(id=<span class="number">1</span>)</span><br><span class="line">b.hbook</span><br><span class="line"><span class="comment">#以上两种方法都能进行查询,但是第一种方法查询出来的结果是一个查询集,第二种拿到的是一个对象</span></span><br></pre></td></tr></table></figure>

<p>在没有关系的情况下查询的话,就不能使用关系属性字段进行查询,这个这时候,就需要用模型类的名字进行查询,用模型类的名字代替关系属性字段的名字</p>
<h2 id="自关联属性字段查询"><a href="#自关联属性字段查询" class="headerlink" title="自关联属性字段查询:"></a>自关联属性字段查询:</h2><h3 id="设定自关联属性字段"><a href="#设定自关联属性字段" class="headerlink" title="设定自关联属性字段:"></a>设定自关联属性字段:</h3><p>​            </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AreaInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">	a_title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    <span class="comment">#设置关联属性字段,关联自身,即self</span></span><br><span class="line">    <span class="comment">#这个字段即意味着与自身关联</span></span><br><span class="line">    a_parent = models.ForeignKey(<span class="string">'self'</span>,on_delete=models.CASCADE,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h4 id="自关联属于特殊的一对多"><a href="#自关联属于特殊的一对多" class="headerlink" title="自关联属于特殊的一对多"></a>自关联属于特殊的一对多</h4><h4 id="在查询时遵循一对多的查询方式"><a href="#在查询时遵循一对多的查询方式" class="headerlink" title="在查询时遵循一对多的查询方式"></a>在查询时遵循一对多的查询方式</h4><p>由一查多时使用字段名__set.all()进行查询</p>
<p>由多查一时使用字段名查询</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django视图管理</title>
    <url>/2018/03/17/Django/Django%E8%A7%86%E5%9B%BE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="Django视图管理"><a href="#Django视图管理" class="headerlink" title="Django视图管理"></a>Django视图管理</h2><h2 id="视图函数在views-py文件中进行定义"><a href="#视图函数在views-py文件中进行定义" class="headerlink" title="#视图函数在views.py文件中进行定义"></a>#视图函数在views.py文件中进行定义</h2><h2 id="1-定义视图函数"><a href="#1-定义视图函数" class="headerlink" title="1).定义视图函数"></a>1).定义视图函数</h2><p>​    <a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'视图函数成功'</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-配置路由"><a href="#2-配置路由" class="headerlink" title="2).配置路由"></a>2).配置路由</h2><ul>
<li><p>导入路由模块</p>
<ul>
<li><pre><code class="python"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path
<span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include
urlatterns = [
    path(<span class="string">''</span>,include(<span class="string">'路径'</span>))
]
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 设定好总的路由之后开始设定从属的路由</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  <span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">from</span> First <span class="keyword">import</span> views</span><br><span class="line">  #导入views视图函数文件</span><br><span class="line">  urlpatterns = [</span><br><span class="line">      #给视图函数绑定url,</span><br><span class="line">      re_path(r<span class="string">'index/'</span>,views.index)</span><br><span class="line">      ###################################</span><br><span class="line">      #两种方法都可以使用</span><br><span class="line">      path(<span class="string">'index/'</span>,views.index)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>path配置方法不需要考虑路由名字匹配的问题</p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="3-构建模板文件"><a href="#3-构建模板文件" class="headerlink" title="3).构建模板文件"></a>3).构建模板文件</h2><hr>
<ul>
<li><p>构造模板</p>
<ul>
<li><p>在django2.2.7中,创建新的项目时会自动配置好tempalte文件,只需要在里面创建应用文件的模板文件夹即可,</p>
</li>
<li><p>旧版本中并不主动生成template文件夹,所以需要自己创建并进行配置</p>
</li>
<li><p>```<br>‘DIRS’: [os.path.join(BASE_DIR, ‘templates’)],</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 模板构造与导入</span><br><span class="line"></span><br><span class="line">  - 加载模板文件</span><br><span class="line"></span><br><span class="line">    - 从模板文件目录获取html文件的内容,得到一个模板对象</span><br><span class="line">  - 定义模板上下文</span><br><span class="line"></span><br><span class="line">    - 向模板文件传递数据</span><br><span class="line">  - 模板渲染</span><br><span class="line"></span><br><span class="line">    - 得到一个标准的html页面</span><br><span class="line"></span><br><span class="line">      - ```python</span><br><span class="line">        re_path(<span class="string">r'lists/(\d+)'</span>,views.lists)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>重定向,路由传参方法,使用正则匹配路由</p>
</li>
<li><pre><code class="python"><span class="function"><span class="keyword">def</span> <span class="title">lists</span><span class="params">(request,bid)</span>:</span>
    books = BookInfo.objects.get(id=bid)
    heros = books.heroinfo_set.all()
    <span class="keyword">return</span> render(request,<span class="string">'FirstTemplates/lists.html'</span>,{
        <span class="string">'books'</span> : books,
        <span class="string">'heros'</span> : heros
    })</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF初试</title>
    <url>/2018/03/16/Django/DRF%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="DRF初试"><a href="#DRF初试" class="headerlink" title="DRF初试"></a>DRF初试</h2><a id="more"></a>
<ol>
<li><p>创建一个新的序列化器</p>
<ol>
<li><p>Serializer序列化器创建,通常这个序列化器我们使用一个新的文件承载</p>
<ul>
<li><pre><code class="python"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializer
<span class="keyword">from</span> .models <span class="keyword">import</span> *
<span class="class"><span class="keyword">class</span> <span class="title">StudentsSerializer</span><span class="params">(serializer.ModelSerializer)</span>:</span>
    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span>
        model = Students
        fields = <span class="string">'__all__'</span>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   - 在创建序列化器的时候,需要直接或者间接的继承serializer.<span class="type">Serializer</span>这个类</span><br><span class="line"></span><br><span class="line">   - 当序列化器继承自serializer.<span class="type">ModelSerializer</span>的时候,需要在序列化器的模型类中声明要使用的模型类model,以及要使用的字段fields</span><br><span class="line"></span><br><span class="line">   - 当fields的值为'__all__'的时候,就相当于对应着这个模型类中的全部字段</span><br><span class="line"></span><br><span class="line">   - 字段声明</span><br><span class="line"></span><br><span class="line">     - </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 在view中使用这个序列化器</span><br><span class="line"></span><br><span class="line">   - ```python</span><br><span class="line">     from rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line">     from .serializer <span class="keyword">import</span> StudentsSerializer</span><br><span class="line">     from .models <span class="keyword">import</span> *</span><br><span class="line"><span class="class">     <span class="keyword">class</span> <span class="type">StudentsAPIViews</span>(<span class="type">ModelViewSet</span>):</span></span><br><span class="line"><span class="class">         queryset = <span class="type">Students</span>.objects.all()</span></span><br><span class="line"><span class="class">         serializer = <span class="type">StudentsSerializer</span></span></span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>在settings文件中注册test_framework应用</p>
<ul>
<li><pre><code class="python">INSTALLED_APPS = [
    <span class="string">'test_framework'</span>
]
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">4.</span> 设置test_framework模块路由</span><br><span class="line"></span><br><span class="line">   - ```python</span><br><span class="line">     <span class="keyword">from</span> test_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line">     <span class="keyword">from</span> .views <span class="keyword">import</span> StudentsAPIViews</span><br><span class="line">     urlpatterns = []</span><br><span class="line">     router = DefaultRouter()</span><br><span class="line">     router.register(<span class="string">'student'</span>,StudentsAPIViews,basename=<span class="string">'StudentsAPIViews'</span>)</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     urlpatterns += router.urls</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>在主路由中配置好应用的路由</p>
<ul>
<li><pre><code class="python"><span class="keyword">from</span> fjango.contrib <span class="keyword">import</span> admin
<span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include
urlpatterns = [
    path(<span class="string">'admin/'</span>,admin.site.urls),
    path(<span class="string">'api/'</span>,include(<span class="string">'drf_app.urls'</span>)),
]</code></pre>
</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django中间件</title>
    <url>/2018/03/15/Django/Django%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="django中间件"><a href="#django中间件" class="headerlink" title="django中间件"></a>django中间件</h2><a id="more"></a>
<p>中间件需要使用request参数的META属性</p>
<ul>
<li><p>获取用户ip地址</p>
<ul>
<li>​        如下所示</li>
<li></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">request</span><span class="selector-class">.META</span><span class="selector-attr">[<span class="string">'REMOTE_ADDR'</span>]</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="自定义中间件类对访问的ip进行限制-从而对特定ip进行封号处理"><a href="#自定义中间件类对访问的ip进行限制-从而对特定ip进行封号处理" class="headerlink" title="自定义中间件类对访问的ip进行限制,从而对特定ip进行封号处理"></a>自定义中间件类对访问的ip进行限制,从而对特定ip进行封号处理</h2><ol>
<li><p>创建一个全新的中间件文件</p>
<ol>
<li><p>创建一个新的中间件问价</p>
<ul>
<li><p>middleware.py</p>
</li>
<li><pre><code class="python"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse

<span class="class"><span class="keyword">class</span> <span class="title">BlockedIPSMiddleware</span><span class="params">(object)</span>:</span>
    EXCLUDE = [<span class="string">'192.168.1.238'</span>,<span class="string">'127.0.0.1'</span>]
    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self,request,view_func,*view_args,**view_keargs)</span>:</span>
        user_ip = request.META[<span class="string">'REMOTE_ADDR'</span>]
        <span class="keyword">if</span> user_ip <span class="keyword">in</span> BlockedIPSMiddleware.EXCLUDE:
            <span class="keyword">return</span> HttpResponse(<span class="string">"拒绝访问"</span>)
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 注意,<span class="number">2.0</span>以后无法使用以上的方法进行中间价创建</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  <span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">BlockedIPSMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">      EXCLUDE = [<span class="string">'192.168.1.238'</span>,<span class="string">'127.0.0.1'</span>]</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self,request,view_func,*view_args,**view_keargs)</span>:</span></span><br><span class="line">          user_ip = request.META[<span class="string">'REMOTE_ADDR'</span>]</span><br><span class="line">          <span class="keyword">if</span> user_ip <span class="keyword">in</span> BlockedIPSMiddleware.EXCLUDE:</span><br><span class="line">              <span class="keyword">return</span> HttpResponse(<span class="string">"拒绝访问"</span>)</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>创建好之后,再setting文件中进行中间件注册</p>
<ul>
<li>setting.py文件中</li>
<li>MIDDLEWARE = [要注册的中间件函数路径]</li>
<li>该路径需要精确到中间件函数类</li>
</ul>
</li>
<li><p>运行django项目,可以看到,被记录的函数已经无法正常访问这个项目了</p>
</li>
<li><p>中间件覆盖了项目所属所有的页面</p>
</li>
</ol>
</li>
<li><p>process_exception</p>
<ol>
<li><p>这个中间件函数将会在视图函数出错的时候进行调用</p>
</li>
<li><h5 id="注意-这个函数在进行调用的时候-如果多个中间件类都定义了这个函数并且都进行了注册-将会以从下往上的顺序进行调用"><a href="#注意-这个函数在进行调用的时候-如果多个中间件类都定义了这个函数并且都进行了注册-将会以从下往上的顺序进行调用" class="headerlink" title="注意,这个函数在进行调用的时候,如果多个中间件类都定义了这个函数并且都进行了注册,将会以从下往上的顺序进行调用"></a>注意,这个函数在进行调用的时候,如果多个中间件类都定义了这个函数并且都进行了注册,将会以从下往上的顺序进行调用</h5></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF框架的权限验证器与限流</title>
    <url>/2018/03/14/Django/DRF%E6%A1%86%E6%9E%B6%E7%9A%84%E6%9D%83%E9%99%90%E9%AA%8C%E8%AF%81%E5%99%A8%E4%B8%8E%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<h2 id="DRF框架权限验证器"><a href="#DRF框架权限验证器" class="headerlink" title="DRF框架权限验证器:"></a>DRF框架权限验证器:</h2><a id="more"></a>
<p>基础验证器</p>
<ol>
<li><p>drf中集成了关于权限验证的一些基本模块,具体可以分为:</p>
<p>​            所有用户均可访问———AllowAny</p>
<p>​            登录用户可访问–-——IsAuthenticated</p>
<p>​            仅限管理员权限可以访问——–IsAdminUser</p>
</li>
<li><p>关于基本权限验证模块的使用方法</p>
<ul>
<li><p>话不多说,上代码</p>
</li>
<li><pre><code class="python"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny
<span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView
<span class="class"><span class="keyword">class</span> <span class="title">MyPermissions</span><span class="params">(APIView)</span>:</span>

    permission_classes = [AllowAny]
    <span class="comment">#当视图函数中设定permission_classes的值为AllowAny时,这个页面允许任何人访问,也就是说,相当于允许游客进行访问</span>
    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(selfg,request)</span>:</span>
        <span class="keyword">return</span> HttpResponse(<span class="string">'权限验证通过,欢迎'</span>)


</code></pre>
</li>
</ul>
</li>
</ol>
<pre><code>from rest_framework.permissions import IsAuthenticated,IsAdminUser
from rest_framework.views import APIView
class MyPermissions(APIView):

    permission_classes = [IsAuthenticated]
    #当视图函数中设定permission_classes的值为IsAuthenticated时,这个页面允许任何用户访问,也就是说,只要你进行登录,就可以进行访问
    def get(selfg,request):
        return HttpResponse(&apos;权限验证通过,欢迎&apos;)


from rest_framework.permissions import IsAdminUser
from rest_framework.views import APIView
class MyPermissions(APIView):

    permission_classes = [IsAdminUser]
    #当视图函数中设定permission_classes的值为IsAdminUser时,这个页面只允许拥有管理员权限的用户进行访问
    def get(selfg,request):
        return HttpResponse(&apos;权限验证通过,欢迎&apos;)
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"># 自定义权限验证器:</span><br><span class="line"></span><br><span class="line">1. 在drf中,允许我们自定义一些权限验证器,来实现我们想要的一些功能,比如说.…...留后门、留后门,还有...留后门之类的操作,当然,如果是大公司,同时自己又没有高级权限的话,不建议留后门,毕竟如果留后门被发现了的话不太好,哈哈哈哈</span><br><span class="line"></span><br><span class="line">2. 上代码</span><br><span class="line"></span><br><span class="line">   - 首先创建一个自定义的权限验证,这个验证就不需要使用自带的模块了,直接自定义</span><br><span class="line"></span><br><span class="line">   - ```python</span><br><span class="line">     from rest_framework.permissions import BasePermission</span><br><span class="line">     class My_permissions(BasePermission):</span><br><span class="line">         def has_permission(self,request,view):</span><br><span class="line">             if request.query_paramy.get('user') == 'root':</span><br><span class="line">                 return True</span><br></pre></td></tr></table></figure></code></pre><ul>
<li><p>在调用权限验证的时候选择使用自定义的权限验证器</p>
</li>
<li><pre><code class="python"><span class="class"><span class="keyword">class</span> <span class="title">MyPermissions</span><span class="params">(APIView)</span>:</span>
    permission_classes = [My_permissions]
    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span>
        <span class="keyword">return</span> HttpResponse(<span class="string">'权限验证通过,欢迎'</span>)
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 限流</span><br><span class="line"></span><br><span class="line">### 全局限流设置:</span><br><span class="line"></span><br><span class="line">- 在setting文件中设定限流要求</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    </span><br><span class="line">    REST_FRAMEWORK = &#123;</span><br><span class="line">        'DEFAULT_THROTTLE_CLASSES':(</span><br><span class="line">            'rest_framework.throttling.AnonRateThrottle',</span><br><span class="line">            'rest_framework.throttling.UserRateThrottle'</span><br><span class="line">        ),</span><br><span class="line">        'DEFAULT_THROTTLE_RATES':&#123;</span><br><span class="line">            #单位时间内访问次数限制</span><br><span class="line">            #anon匿名用户限流</span><br><span class="line">            'anon':'1/second',</span><br><span class="line">            #user注册用户限流</span><br><span class="line">            'user':'1/second'</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

- 注册限流信息时,所需要使用的rest_framework模块需要现在INSTALLED_APPS中进行配置才能进行使用,同时,这里使用的时候需要与注册的app名相同


</code></pre>
</li>
</ul>
<h3 id="局部限流设置"><a href="#局部限流设置" class="headerlink" title="局部限流设置:"></a>局部限流设置:</h3><ul>
<li><p>无论是局部限流还是全局限流,都需要现在setting文件中进行配置,但是这个配置并不相同</p>
<ul>
<li><pre><code class="python">REST_FRAMEWORK = {
    <span class="string">'DEFAULT_THROTTLE_RATES'</span>:{
        <span class="string">'anon'</span>:<span class="string">'1/second'</span>,
        <span class="string">'user'</span>:<span class="string">'1/second'</span>
    }
}
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 在进行局部限流时,不需要导入自带的限流模块</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  <span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line">  <span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line">  <span class="keyword">class</span> <span class="symbol">Mythrottling</span>(<span class="symbol">APIView</span>):</span><br><span class="line">      <span class="symbol">throttling_class</span> = [<span class="symbol">UserRateThrottle</span>]</span><br><span class="line">      <span class="symbol">def</span> <span class="symbol">get</span>(<span class="symbol">self,<span class="symbol">request</span></span>):</span><br><span class="line">          <span class="symbol">return</span> <span class="symbol">Response</span>('这是投票页面')</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django数据库操作</title>
    <url>/2018/03/14/Django/Django%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="Django数据库操作"><a href="#Django数据库操作" class="headerlink" title="Django数据库操作"></a>Django数据库操作</h2><h2 id="Django中不需要定义id字段"><a href="#Django中不需要定义id字段" class="headerlink" title="#Django中不需要定义id字段"></a>#Django中不需要定义id字段</h2><a id="more"></a>

<h3 id="数据库创建–基础字段"><a href="#数据库创建–基础字段" class="headerlink" title="数据库创建–基础字段:"></a>数据库创建–基础字段:</h3><ul>
<li><p>CharField(定义一个字符串类型的字段)</p>
<ul>
<li>max_length=xx,  定义字符串最大长度</li>
</ul>
</li>
<li><p>DateField(定义一个时间类型的字段)</p>
<ul>
<li>时间类型字段一共有三个,TimeField</li>
</ul>
</li>
<li><p>BooleanField</p>
</li>
<li><p>FileField</p>
<ul>
<li>文件字段</li>
</ul>
</li>
<li><p>TextField</p>
<ul>
<li>大文本字段,超过4000字符的文本使用这个字段</li>
</ul>
</li>
<li><p>ImageField</p>
<ul>
<li>上传图片</li>
</ul>
</li>
<li><p>ForeignKey  外键</p>
<ul>
<li><p>第一个参数为要关联的模型类</p>
</li>
<li><h3 id="第二个参数必须加上下面这个参数-才能保证正确"><a href="#第二个参数必须加上下面这个参数-才能保证正确" class="headerlink" title="第二个参数必须加上下面这个参数,才能保证正确"></a>第二个参数必须加上下面这个参数,才能保证正确</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">on_delete</span>=models.CASCADE</span><br></pre></td></tr></table></figure>
</li>
<li><p>在django2.0之后的版本中不在有默认的on_delete,所以这里需要手动传入这个参数</p>
<ul>
<li><pre><code>on_delete=None,               # 删除关联表中的数据时,当前表与其关联的field的行为
    on_delete=models.CASCADE,     # 删除关联数据,与之关联也删除
    on_delete=models.DO_NOTHING,  # 删除关联数据,什么也不做
    on_delete=models.PROTECT,     # 删除关联数据,引发错误ProtectedError
    # models.ForeignKey(&apos;关联表&apos;, on_delete=models.SET_NULL, blank=True, null=True)
    on_delete=models.SET_NULL,    # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）
    # models.ForeignKey(&apos;关联表&apos;, on_delete=models.SET_DEFAULT, default=&apos;默认值&apos;)
    on_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）
    on_delete=models.SET,         # 删除关联数据,
     a. 与之关联的值设置为指定值,设置：models.SET(值)
     b. 与之关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 字段属性</span><br><span class="line"></span><br><span class="line">- default</span><br><span class="line">- null</span><br><span class="line">  - 判断字段能不能为空</span><br><span class="line">  - 默认为false</span><br><span class="line">- primary_key</span><br><span class="line">  - 主键约束</span><br><span class="line">- Foregin_key</span><br><span class="line">  - 外键约束\</span><br><span class="line">- autoincerment</span><br><span class="line">  - 自增长</span><br><span class="line">- blank</span><br><span class="line">  - 后台出入数据时是否允许为空</span><br><span class="line">- verbose_name</span><br><span class="line">  - 设定字段在管理页面显示的名称</span><br><span class="line"></span><br><span class="line">## 插入、更新和删除</span><br><span class="line"></span><br><span class="line">#### 插入、更新</span><br><span class="line"></span><br><span class="line">​	save()</span><br><span class="line"></span><br><span class="line">#### 删除</span><br><span class="line"></span><br><span class="line">​	delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">## 生成迁移文件</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  python manage.py makemigrations</span><br><span class="line">  #生成迁移脚本</span><br></pre></td></tr></table></figure></code></pre></li>
</ul>
</li>
</ul>
</li>
<li><pre><code class="python">python manage.py migrate
<span class="comment">#将迁移脚本映射到数据库之中</span>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">## 修改Django数据库默认配置:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">#修改setting文件中的database中的参数</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    'default': &#123;</span><br><span class="line">        'ENGINE': 'django.db.backends.mysql',</span><br><span class="line">        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span><br><span class="line">        'NAME': 'django_demo',#数据库名称,需要手动创建好数据库</span><br><span class="line">        'USER': "root",	#用户名,默认为root</span><br><span class="line">        'PASSWORD': '000000',#mysql密码</span><br><span class="line">        'HOST': 'localhost',#数据库地址,一般为本机127.0.0.1,通localhost</span><br><span class="line">        'PORT': '3306'#MySQL数据库端口号.默认3306</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<hr>
<h2 id="运行整个项目"><a href="#运行整个项目" class="headerlink" title="运行整个项目:"></a>运行整个项目:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="通过models文件在数据库中添加数据"><a href="#通过models文件在数据库中添加数据" class="headerlink" title="通过models文件在数据库中添加数据"></a>通过models文件在数据库中添加数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py shell</span><br><span class="line"><span class="comment">#进入交互模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 模块名.models <span class="keyword">import</span> 模型类名</span><br><span class="line"><span class="keyword">from</span> first.models <span class="keyword">import</span> BookInfo</span><br><span class="line">b = BookInfo()</span><br><span class="line">b.btitle = <span class="string">'天龙八部'</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line">b.bpub_data = date(<span class="number">1998</span>,<span class="number">3</span>,<span class="number">22</span>)</span><br><span class="line">b.save()</span><br></pre></td></tr></table></figure>

<h2 id="通过模型类从数据库中获取对应的数据"><a href="#通过模型类从数据库中获取对应的数据" class="headerlink" title="通过模型类从数据库中获取对应的数据"></a>通过模型类从数据库中获取对应的数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b1 = BookInfo.objects.get(id=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>#通过模型对象BookInfo的objects方法的get方法获取满足对应条件的字段 </p>
<p>type(b1)</p>
<p>#返回对象是First.models.BookInfo</p>
<h3 id="修改表中数据"><a href="#修改表中数据" class="headerlink" title="修改表中数据:"></a>修改表中数据:</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">b<span class="number">1.</span>btitle = <span class="string">'新的数据'</span></span><br><span class="line">b<span class="number">1.</span>save<span class="comment">()</span></span><br></pre></td></tr></table></figure>

<p>从根本上来说,修改数据仅仅只是拿到数据之后重新赋值,然后进行提交而已</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">b1.<span class="keyword">delete</span>()</span><br></pre></td></tr></table></figure>

<p>从数据库中删除这条数据</p>
<hr>
<h2 id="外键查询"><a href="#外键查询" class="headerlink" title="外键查询:"></a>外键查询:</h2><ul>
<li><p>ForeignKey设置外键</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment">#书名</span></span><br><span class="line">    btitle = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">    <span class="comment">#上架时间</span></span><br><span class="line">    bpub_data = models.DateField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment">#人物名</span></span><br><span class="line">    hname = models.CharField(max_length=<span class="number">10</span>)</span><br><span class="line">    <span class="comment">#人物性别,true为男,false为女</span></span><br><span class="line">    hgender = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment">#简介</span></span><br><span class="line">    hcomment = models.CharField(max_length=<span class="number">300</span>)</span><br><span class="line">    <span class="comment">#人物所属书籍,一对多关系</span></span><br><span class="line">    <span class="comment">#设置外键</span></span><br><span class="line">    hbook = models.ForeignKey(<span class="string">'BookInfo'</span>,on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>外键创建好之后的字段名为设定好的models模型里面的外键字段加上_id,这个id和另一个表的id对照</p>
</li>
<li><pre><code class="python">b = BookInfo()
b.btitle = <span class="string">'天龙八部'</span>
<span class="keyword">from</span> datetime <span class="keyword">import</span> date
b.bpub_data = date(<span class="number">1998</span>,<span class="number">2</span>,<span class="number">33</span>)
b.save()
<span class="comment">#之后添加HeroInfo表的数据</span>
h = HeroInfo()
h.hname = <span class="string">'段誉'</span>
h.hgender = <span class="literal">True</span>
<span class="comment">#外键字段赋值为已经创建好的与这条数据关联的bookinfo表对象</span>
<span class="comment">#通过这个字段可以查询到对应表的信息</span>
h.hbook = b

<span class="comment">###################################################################</span>
<span class="comment">#一对多的情况下查询一的信息</span>
&gt;&gt;&gt;h.hbook.btitle
&gt;&gt;&gt;<span class="string">'天龙八部'</span>
&gt;&gt;&gt;h.hbook.bpub_data
&gt;&gt;&gt;datetime.date(<span class="number">1998</span>,<span class="number">2</span>,<span class="number">33</span>)
<span class="comment">#一对多查询所属信息</span>
&gt;&gt;&gt;b.heroinfo_set.all()
<span class="comment">#返回的结果是一个集合,里面以列表形式放置了所有对应的数据</span>
<span class="meta">&gt;&gt;&gt; </span>&lt;QuerySet [&lt;HeroInfo: HeroInfo object (<span class="number">1</span>)&gt;]&gt;
&gt;&gt;&gt;b.heroinfo_set.first()
<span class="comment">#返回的结果是对应数据的第一条</span>
<span class="meta">&gt;&gt;&gt; </span>&lt;HeroInfo: HeroInfo object (<span class="number">1</span>)&gt;
<span class="comment">#通过将这一条数据赋值之后可以继续进行一些查询</span>
&gt;&gt;&gt;b1 = b.heroinfo_set.first()
&gt;&gt;&gt;b1.hname
&gt;&gt;&gt;<span class="string">"段誉"</span>
<span class="comment">######################################################</span>
<span class="comment">#查询全部数据</span>
<span class="meta">&gt;&gt;&gt; </span>BookInfo.objects.all()
<span class="meta">&gt;&gt;&gt; </span>HeroInfo.objects.all()
<span class="comment">#模型类名.objects.all()</span></code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="数据库查询语句"><a href="#数据库查询语句" class="headerlink" title="数据库查询语句"></a>数据库查询语句</h2><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><ul>
<li><p>all</p>
<ul>
<li>all返回的是一个数据集合</li>
<li>此返回数据可以进行遍历</li>
</ul>
</li>
<li><p>filter</p>
<ul>
<li>返回的结果也是一个集合,可以遍历</li>
<li>属性名__exact = 1<ul>
<li>判断是否相等</li>
<li>此项属性等同于id = 1</li>
</ul>
</li>
<li>属性名__contains<ul>
<li>查询包含某个字符的数据</li>
</ul>
</li>
<li>属性名__endswith<ul>
<li>查询以某字符结尾的数据</li>
<li>以某字符串结尾</li>
</ul>
</li>
<li>属性名__startswith<ul>
<li>以某字符串开头</li>
</ul>
</li>
<li>属性名__isnull<ul>
<li>查询某字段为空或者不为空的数据</li>
<li>属性名_isnull=false    不为空</li>
<li>属性名__isnull=true   为空</li>
</ul>
</li>
<li>属性名__in = [1,2,3]<ul>
<li>查询目标字段再此列表元素的范围内的数据</li>
</ul>
</li>
<li>属性名__gt = 3(gt为大于)<ul>
<li>等同于                属性名 &gt; 3</li>
</ul>
</li>
<li>属性名__lt = 3(lt为小于)<ul>
<li>等同于                属性名 &lt; 3</li>
</ul>
</li>
<li>属性名__gte = 3(gte为大于等于)<ul>
<li>等同于                属性名 &gt;= 3</li>
</ul>
</li>
<li>属性名__lte = 3(lte为小于等于)<ul>
<li>等同于                属性名 &lt;= 3</li>
</ul>
</li>
<li>属性名__year<ul>
<li>bpub_date__year = 1980</li>
<li>查询1980年之后的数据</li>
<li>查询时间信息还可以使用上面的大于等于的方法<ul>
<li>bpub_date_gt = date(1998,1,1)</li>
<li>查询在1998年1月1日之后的数据</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>exclude</p>
<ul>
<li><p>返回的结果也是一个集合,可以遍历</p>
</li>
<li><p>查询不满足某个条件的数据</p>
</li>
</ul>
</li>
<li><p>order_by排序</p>
<ul>
<li><p>返回的结果也是一个集合,可以遍历</p>
</li>
<li><p>排序字段一般是放在条件查询之后进行的</p>
</li>
<li><p>BackInfo.objects.all().order_by(‘id’)</p>
<ul>
<li>默认排序方式为升序排列</li>
</ul>
</li>
<li><p>BackInfo.objects.all().order_by(‘-id’)</p>
<ul>
<li>在前面加个-将会进行降序排列</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><ul>
<li>两个条件并存</li>
<li>与&amp;<ul>
<li>filter(id_gt=1,age_gt=10)<ul>
<li>id大于1并且age大于10</li>
</ul>
</li>
</ul>
</li>
<li>或  |<ul>
<li>这个条件查询需要导入一个新的模块</li>
<li>from django.db.models import Q</li>
<li>filter(Q(id=1) | Q(age=15))</li>
<li>创建新的Q对象,作为或条件的单位,</li>
</ul>
</li>
<li>查询条件为一个字段的数值大于另一个字段的数据<ul>
<li>如,查询一本书的阅读量大于评论量的的数据</li>
<li>这个时候需要导入一个新的模块F<ul>
<li>from django.db.models import F</li>
<li>使用f模块构造对应字段的对象,并将这个对象作为条件进行查询</li>
<li>BookInfo.objects.filter(bread_gt=F(bcomment))</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数."></a>聚合函数.</h3><h5 id="—-—-聚合操作的关键字"><a href="#—-—-聚合操作的关键字" class="headerlink" title="—-—-聚合操作的关键字:"></a>—-—-聚合操作的关键字:</h5><p>​    <strong>aggregate</strong></p>
<p>​    查询时所使用的模块都在django.db.models这个包里面</p>
<h4 id="聚合函数总览"><a href="#聚合函数总览" class="headerlink" title="聚合函数总览"></a>聚合函数总览</h4><ul>
<li>count该字段的总个数</li>
<li>max最大数值</li>
<li>min最小数值</li>
<li>sum该字段数值的和</li>
<li>avg平均数值</li>
</ul>
<h4 id="聚合函数使用时需要导入模块"><a href="#聚合函数使用时需要导入模块" class="headerlink" title="聚合函数使用时需要导入模块"></a>聚合函数使用时需要导入模块</h4><ol>
<li>​    <u>f<strong>rom django.db.models import Count,Max,Min,Avg,Sum</strong></u></li>
<li>​    <u><strong>这五个聚合函数需要从django.db.models里面引入进来</strong></u></li>
<li>​    <u><strong>BookInfo.objects.aggregate(Sum(‘bread’))</strong></u></li>
<li>​    <u><strong>模型类名.bojects.aggregate(聚合函数(字段名))</strong></u></li>
<li>​    <u><strong>当不加查询条件时默认为all,也就是说,all时可以省略的</u></strong></li>
</ol>
<h5 id="当进行聚合之后-返回的值是一个字典-书写形式为-key-聚合的属性名-聚合方式-value-聚合的结果"><a href="#当进行聚合之后-返回的值是一个字典-书写形式为-key-聚合的属性名-聚合方式-value-聚合的结果" class="headerlink" title="当进行聚合之后,返回的值是一个字典,书写形式为,key = 聚合的属性名__聚合方式      ,value = 聚合的结果"></a>当进行聚合之后,返回的值是一个字典,书写形式为,key = 聚合的属性名__聚合方式      ,value = 聚合的结果</h5><h4 id="聚合函数另一种用法"><a href="#聚合函数另一种用法" class="headerlink" title="聚合函数另一种用法:"></a>聚合函数另一种用法:</h4><p>在已经进行过条件查询的情况下,直接使用小写的.count()得到的结果时一个数值,这个数值是已经查询到的数据的总数</p>
<p>但是因为条件查询完毕之后获取的是数据集合,所以这个数据集合是没有其他的属性的,他唯一适用的聚合函数只有一个,那就是计算总数的<strong><u><code>count</code></u></strong></p>
<p>注意,在所有返回的为数据集合的查询语句后面,以上的所有函数都是可以用的,你可以继续在后面使用分类,</p>
<p>所有结果为查询集的结果都是可以进行切片的,[:]</p>
<p>注意,这个切片使用的下标是不允许使用负数的</p>
<p>切片之后的结果依然是一个查询集,可以使用get()方法进行查询</p>
<p>exists()   判断这个查询集中是否有数据,有返回True,没有返回False</p>
<p>existe     相当于查看这个判断并展示这个查询及的全部数据</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-filter过滤器的使用</title>
    <url>/2018/03/10/Django/Django-filter%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Django-filter模块使用"><a href="#Django-filter模块使用" class="headerlink" title="Django-filter模块使用:"></a>Django-filter模块使用:</h2><a id="more"></a>
<h2 id="目前-过滤器django-filter只能在ListAPIView的子类中使用"><a href="#目前-过滤器django-filter只能在ListAPIView的子类中使用" class="headerlink" title="目前,过滤器django_filter只能在ListAPIView的子类中使用"></a>目前,过滤器django_filter只能在ListAPIView的子类中使用</h2><ol>
<li><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><ul>
<li><pre><code class="python"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListAPIView
<span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend
<span class="class"><span class="keyword">class</span> <span class="title">MYfilter</span><span class="params">(ListAPIView)</span>:</span>
    queryset = Students.objects.all()
    serializer_class = StudentsSerializer
    filter_backends = [DjangoFilterBackend]
    filter_fields = (<span class="string">"id"</span>,)
    <span class="comment">#注意,filter_fields的值必须是一个元组!!!!</span>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>使用方法</span><br></pre></td></tr></table></figure>
在网址url之后追加-------/?id=1
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">2. ### 排序</span><br><span class="line"></span><br><span class="line">   - ```python</span><br><span class="line">     from rest_framework.filters import OrderingFilter</span><br><span class="line">     from rest_framework.generics import ListAPIView</span><br><span class="line">     class MYfilter(ListAPIView):</span><br><span class="line">         queryset = Students.objects.all()</span><br><span class="line">         serializer_class = StudentsSerializer</span><br><span class="line">         filter_backends = [OrderingFilter]</span><br><span class="line">         ordering_fields = ['id']</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>使用方法</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">在网址url之后追加------/?<span class="attribute">ordering</span>=xx</span><br><span class="line">xx为ordering_fields中准备的用来作为排序基准的字段</span><br><span class="line">倒序为在xx前加上-号</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django模型管理器</title>
    <url>/2018/03/09/Django/Django%E6%A8%A1%E5%9E%8B%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h2 id="模型管理器详解"><a href="#模型管理器详解" class="headerlink" title="模型管理器详解"></a>模型管理器详解</h2><a id="more"></a>
<ol>
<li><h2 id="objects模型管理器"><a href="#objects模型管理器" class="headerlink" title="objects模型管理器"></a>objects模型管理器</h2><ol>
<li><p>本质上来说,objects其实是django为我们封装的一个特殊的模型管理器类,它本质上其实是models.Manager对象</p>
</li>
<li><p>也就是说,我们可以通过重写models.Manager的方法来实现给这个管理器进行重命名</p>
</li>
<li><p>如:</p>
<ol>
<li><pre><code class="python"><span class="comment">#在模型类属性之中直接重写models.manger方法</span>
book = models.manger()
<span class="comment">#自定义一个管理器对象,这之后我们就可以不适用objects来进行查询</span>
<span class="comment">#而是使用book来进行查询</span>
BookInfo.book.all()
<span class="comment">#在进行定义之后,将无法使用原本的objects</span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="comment">## 常用的重写模型管理器方法</span></span><br><span class="line"></span><br><span class="line">   <span class="number">1.</span> 创建一个模型类来进行重写</span><br><span class="line"></span><br><span class="line">      <span class="number">1.</span> ```python</span><br><span class="line">         <span class="class"><span class="keyword">class</span> <span class="title">BookInfoManger</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">             <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>这是最简单得到重写Manager的方法</p>
</li>
<li><p>通过这个类可以创建全新的Manager对象来进行查询</p>
</li>
<li><p>注意,一旦进行重写之后,django自带的objects将会无法使用,只能使用自己创建的对象进行查询</p>
</li>
</ol>
</li>
<li><p>在模型类之中进行其他的编写</p>
<ol>
<li><p>重写all方法(改变结果集)</p>
<ul>
<li><pre><code class="python"><span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(self)</span>:</span>
    <span class="comment">#通过super方法调用父类的all方法对模型类对象进行查询</span>
    books = super().all()
    <span class="comment">#对处理过的结果进行处理</span>
    books = books.filter(id__gt=<span class="number">1</span>)
    <span class="comment">#将结果返回</span>
    <span class="keyword">return</span> books
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 这样处理过的all方法在调用时将不会返回全部的数据,而是会根据这个重新定义的all方法对数据进行处理之后才会返回,</span><br><span class="line"></span><br><span class="line">- 最终返回结果为</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  &gt;&gt;&gt; BookInfo.a.all()</span><br><span class="line">  &gt;&gt;&gt; &lt;QuerySet <span class="meta">[&lt;BookInfo: 神墓&gt;, &lt;BookInfo: 龙蛇演义&gt;, &lt;BookInfo: 那年那兔那些事儿&gt;, &lt;BookInfo: 亮剑&gt;, &lt;BookInfo: 秒速五厘米&gt;, &lt;BookInfo: 你的名字&gt;]</span>&gt;</span><br></pre></td></tr></table></figure>

返回结果为一个返回集</code></pre>
</li>
</ul>
</li>
<li><p>自定义类方法(定义额外的方法)</p>
<ul>
<li><p>在这里我们可以自定义一些方法,比如自定义一些添加用的方法,也即是说,把原本复杂的添加方法封装成为类方法进行使用,这样的话,可以减少代码的数量</p>
</li>
<li><p>重写字段添加</p>
<ul>
<li><pre><code class="python"><span class="meta">@classmethod</span>
<span class="function"><span class="keyword">def</span> <span class="title">create_book</span><span class="params">(cls,btitle,bpub_date,cate_id)</span>:</span>
    obj = BookInfo()
    obj.btitle = btitle
    obj.bpub_date = bpub_date
    obj.cate_id = cate_id
    obj.save()
    <span class="keyword">return</span> obj
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 重写添加信息方法</span><br><span class="line"></span><br><span class="line">- 在模型类中的写法,此方法不适合写在模型类中,因为过多的类方法会使模型类变得臃肿,不方便使用,所以我们一般将这些方法定义在我们重写的manager模型管理器中</span><br><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  def create_book(<span class="keyword">self,btitle,bpub_date,cate_id):</span></span><br><span class="line"><span class="keyword"> </span>     obj = <span class="keyword">BookInfo()</span></span><br><span class="line"><span class="keyword"> </span>     obj.<span class="keyword">btitle </span>= <span class="keyword">btitle</span></span><br><span class="line"><span class="keyword"> </span>     obj.<span class="keyword">bpub_date </span>= <span class="keyword">bpub_date</span></span><br><span class="line"><span class="keyword"> </span>     obj.cate_id = cate_id</span><br><span class="line">      obj.save()</span><br><span class="line">      return objpython</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>这两种方法都可以使用,</p>
</li>
<li><p>重写封装的方法适用于增删改查的所有方法</p>
</li>
<li><p>在manager函数中,封装好了一个model方法,这个方法返回的是调用这个方法的模型类</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.model()</span><br></pre></td></tr></table></figure>

<p>使用这个方法之后,就不会出现换一个模型类就无法调用的情况了</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>API接口生成</title>
    <url>/2018/03/09/Vue/API%E6%8E%A5%E5%8F%A3%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<h2 id="自动创建api接口的文档"><a href="#自动创建api接口的文档" class="headerlink" title="自动创建api接口的文档"></a>自动创建api接口的文档</h2><a id="more"></a>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置:"></a>配置:</h2><h4 id="setting文件配置"><a href="#setting文件配置" class="headerlink" title="setting文件配置:"></a>setting文件配置:</h4><ol>
<li><p>下载模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install corsapi</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置SCHEMA_CLASS</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_SCHEMA_CLASS'</span>: <span class="string">'rest_framework.schemas.AutoSchema'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主路由中注册使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.decumentation <span class="keyword">import</span> include_docs_urls</span><br><span class="line"><span class="keyword">from</span> django.url <span class="keyword">import</span> path,include</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'docs/'</span>,include_docs_urls(title=<span class="string">'API管理页面'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>创建成功之后的画面如下图:<img src="/fcg22450.github.io/img/interactive/1575621839123.png" alt="1575621839123"></p>
<p>在这里面,还有一些别的设置,如,在模型类中设置字段的提示属性 :</p>
<ul>
<li>help_text = ‘ ’</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>axios请求与跨域</title>
    <url>/2018/03/09/Vue/axios%E8%AF%B7%E6%B1%82%E4%B8%8E%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="axios请求与跨域"><a href="#axios请求与跨域" class="headerlink" title="axios请求与跨域."></a>axios请求与跨域.</h2><a id="more"></a>
<ol>
<li><p>创建一个django工程并运行</p>
</li>
<li><p>运行vue工程</p>
</li>
<li><p>vue配置跨域</p>
<ul>
<li><p>cd vueproject/src/main.js</p>
<ul>
<li>导入axios模块</li>
<li>import axios from ‘axios’</li>
<li>注册axios模块</li>
<li>Vue.prototype.$axios = axios</li>
</ul>
</li>
<li><p>cd vueproject/config/index.js</p>
<ul>
<li><p>配置跨域请求—-—-proxytable</p>
</li>
<li><pre><code class="javascript">proxyTable: {
    <span class="string">'/api'</span>: {
        target: <span class="string">'http://127.0.0.1:8000/api/test/'</span>,
        #要连接的接口
        changeOrigin: <span class="literal">true</span>,
        #是否跨域
        pathRewrite: {
            <span class="string">'^api/'</span>:<span class="string">''</span>
            #重写接口的域名
        }    
    }
}
&lt;!--￼<span class="number">0</span>--&gt;
<span class="keyword">export</span> <span class="keyword">default</span> {
    name:<span class="string">'User'</span>,
    data(){
        <span class="keyword">return</span> {
            page_info: <span class="string">'this is user route'</span>
        }
    },
    created(){
        <span class="keyword">this</span>.$axios.get(<span class="string">'http://127.0.0.1:8000/api/test'</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> {<span class="built_in">console</span>.log(response.data)})
    }
}
&lt;!--￼<span class="number">1</span>--&gt;</code></pre>
</li>
</ul>
</li>
<li><p>创建django跨域中间件</p>
<ul>
<li><p>在应用中创建middlewares.py文件</p>
</li>
<li><pre><code class="python"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin
<span class="class"><span class="keyword">class</span> <span class="title">MyTest</span><span class="params">(MiddlewareMixin)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">precess_response</span><span class="params">(self,request,response)</span>:</span>
        response[<span class="string">'Access-Control-Allow-Origin'</span>] = [<span class="string">'*'</span>]
        <span class="keyword">return</span> response
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="deletion">- 注册中间件</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-</span></span><br></pre></td></tr></table></figure>
<span class="string">'app.middlewares.MyTest'</span>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">5. </span>在完成了上述步骤之后,跨域请求的基本要求就完成了</span><br><span class="line"></span><br><span class="line"><span class="bullet">6. </span>将获得数据绑定到vue模板中去</span><br><span class="line"></span><br><span class="line"><span class="bullet">   - </span>在模板版中准备一个接受用的变量</span><br><span class="line"></span><br><span class="line"><span class="code">     -</span></span><br></pre></td></tr></table></figure>
django_message : <span class="string">''</span>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-<span class="ruby"> 在请求到数据之后将数据赋予这个变量</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  -</span></span><br></pre></td></tr></table></figure>
this.django_message = response.data.message</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django模板使用</title>
    <url>/2018/03/08/Django/Django%E6%A8%A1%E6%9D%BF%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="Django模板使用"><a href="#Django模板使用" class="headerlink" title="Django模板使用"></a>Django模板使用</h2><a id="more"></a>
<ol>
<li><pre><code>for foo in msg
    forloop.counter
endfor
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   - <span class="keyword">for</span>循环中可以使用forloop.counter获取当前循环的次数</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br></pre></td></tr></table></figure>
if books

else

endif
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="number">1.</span> <span class="keyword">if</span>循环,包括<span class="keyword">elseif</span>与<span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="meta">## 模板注释</span></span><br><span class="line"></span><br><span class="line">单行注释:</span><br></pre></td></tr></table></figure>
注释的内容
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">多行注释:</span></span><br></pre></td></tr></table></figure>
comment
注释的内容
endcomment
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 过滤器:</span><br><span class="line"></span><br><span class="line">1. default</span><br><span class="line"></span><br><span class="line">   - </span><br><span class="line"></span><br><span class="line">2. length</span><br><span class="line"></span><br><span class="line">   -  </span><br><span class="line"></span><br><span class="line">3. date</span><br><span class="line"></span><br><span class="line">   - 默认时间显示格式为美式</span><br><span class="line"></span><br><span class="line">   -</span><br></pre></td></tr></table></figure>
  dete:&apos;Y年-m月-d日&apos;
  <figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-<span class="ruby"> 通过过滤器可以将时间格式转化为想要的状态</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- safe,关闭自动转义</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">- autoescape标签关闭转义</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  -</span></span><br></pre></td></tr></table></figure>
    autoescape
    模板内容
    endautoescape
    <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   - 模板硬编码不会进行转义</span><br><span class="line"></span><br><span class="line"><span class="comment">### 自定义过滤器:</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> ​	在应用下新建templatetags文件夹,此文件夹名为固定名称,不可自定义</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> ​        在文件夹中创建一个py文件用来存放自定义过滤器</span><br><span class="line"></span><br><span class="line">   - ```python</span><br><span class="line">     <span class="keyword">from</span> django.tempalte <span class="keyword">import</span> Library</span><br><span class="line">     <span class="comment">#创建一个实例化Library对象</span></span><br><span class="line">     register = Library()</span><br><span class="line">     </span><br><span class="line">     <span class="comment">#创建一个过滤器函数</span></span><br><span class="line"><span class="meta">     @register.filter</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">(num)</span>:</span></span><br><span class="line">         <span class="keyword">return</span> num %<span class="number">2</span> == <span class="number">0</span></span><br></pre></td></tr></table></figure></code></pre></li>
<li><p>在模板中导入这个过滤器文件</p>
<ul>
<li><pre><code>load filters
#在这里进行的模块导入只需要将过滤器文件的名字导入进去就可以直接进行使用了</code></pre></li>
</ul>
</li>
</ol>
<h3 id="一个坑"><a href="#一个坑" class="headerlink" title="一个坑:"></a>一个坑:</h3><p>​    自定义过滤器时,创建出来的library对象的名字必须是register</p>
<p>​    目前还不明白原因,但是使用了library之后会出现无法查询到filters模板的问题,</p>
<h4 id="自定义过滤器时最少需要有一个参数传入-最多两个"><a href="#自定义过滤器时最少需要有一个参数传入-最多两个" class="headerlink" title="自定义过滤器时最少需要有一个参数传入,最多两个"></a>自定义过滤器时最少需要有一个参数传入,最多两个</h4>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于vue的一些问题</title>
    <url>/2018/03/08/Vue/%E5%85%B3%E4%BA%8Evue%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><a id="more"></a>
<h2 id="第一点"><a href="#第一点" class="headerlink" title="第一点"></a>第一点</h2><p>​    最初老师教的其实是2.0版本,相比起来,更加高端的vue/cli3的代码更加简洁高效,我也不知道为啥学校不叫最新的,反正当初这个坑是被我踩到了</p>
<p>​    这其中有着很多的问题,如缺少依赖包,缺少必备的代码库,林林总总的红色报错在当时直接把我惊呆了</p>
<p>​    因为在出问题之前,我一直是在使用webstorm进行代码的编写,webstorm是个很好的软件,基本上,只要你装好了环境,他就能帮你进行一系列的操作,但也正是这些,导致我压根没发现这些潜在的问题</p>
<p>​    事情的起因,是因为我的webstorm到期了……<img src="/fcg22450.github.io/img/interactive/1576150667489.png" alt="1576150667489"></p>
<p>​    这是一个悲伤的故事,我的电脑中安装了很多编辑器</p>
<p>​    包括webstorm,pycharm,codeblock,vscode,golang等等,也正是因为到期了,我便决定收拾一下vscode,将vue问价你放到vscode中去写</p>
<p>​    然后问题就出现了.</p>
<p>先是新建的vue文件无法显示,然后就是疯狂报错,到最后,我三个dos窗口全是红色,惨不忍睹</p>
<p>于是忍痛删掉了电脑中的vue插件,然后开始重新安装</p>
<p>以下是这两天安装的全部插件,不排除被我忘记的可能</p>
<ul>
<li><p>npm install @vue/cli -g –save</p>
</li>
<li><p>npm install axios</p>
</li>
<li><p>npm install stylus</p>
</li>
<li><p>npm install stylus-loader</p>
</li>
<li><p>npm install style-loader</p>
</li>
<li><p>npm install css-loader</p>
</li>
<li><p>npm install pug</p>
</li>
<li><p>npm install webpack</p>
</li>
<li><p>npm install cors-js</p>
</li>
<li><p>ps:更多的插件一时想不起来了.反正,凡是报错了的插件,我几乎全都下载了一遍</p>
</li>
<li><p>到现在,之前所有的错误提示全部消失,不仅如此,我发现最新版本的vue居然是4.0+???</p>
</li>
<li><p>WTF?</p>
</li>
<li><p>我之前用的可是2.6啊混蛋</p>
</li>
<li><p>难怪nanarino给我的项目那么简单,感情人家的已经是领先好几代了</p>
<p>临近考试了,本来以为这次考试稳了,现在看来,要是不赶紧摸清楚新版本的变化,恐怕这次要跪啊!</p>
<p>.</p>
</li>
</ul>
<hr>
<p>使用vue cli 4 的注意事项</p>
<ul>
<li>创建语句      vue create projects_name</li>
<li>下载模块      npm install models_name   -g –save</li>
<li>构建vue工程之后第一点就是重新下载axios与pug相关依赖,具体可以根据报错提示进行操作</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django路由参数捕获</title>
    <url>/2018/03/07/Django/Django%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E6%8D%95%E8%8E%B7/</url>
    <content><![CDATA[<h2 id="URL参数捕获"><a href="#URL参数捕获" class="headerlink" title="URL参数捕获"></a>URL参数捕获</h2><ol>
<li><p>参数捕获的方法有两种</p>
<a id="more"></a>
<ul>
<li><p>位置参数传参</p>
<ul>
<li><p>使用一个正则表达式获取参数并传入视图函数中</p>
</li>
<li><pre><code class="python"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path,path

urlpatterns = [
    re_path(r’index/(\d+)‘,veiws.index),
]
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">- 关键字参数传参</span><br><span class="line"></span><br><span class="line">  - 使用关键字参数传参和位置参数是一样的,区别就是再正则表达式中给这个字段起一个别名</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    from django.urls import re_path,path</span><br><span class="line">    </span><br><span class="line">    urlpatterns = [</span><br><span class="line">    	re_path(r’index/(?P&lt;num&gt;\d+)‘,veiws.index),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django后台管理操作</title>
    <url>/2018/03/06/Django/Django%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="Django后台管理操作"><a href="#Django后台管理操作" class="headerlink" title="Django后台管理操作"></a>Django后台管理操作</h2><a id="more"></a>
<p>#后台管理系统为admin.py文件</p>
<h2 id="1-本地化"><a href="#1-本地化" class="headerlink" title="1).本地化"></a>1).本地化</h2><ul>
<li><p>​    修改语言格式</p>
<ul>
<li><p>修改为中文:zh-hans</p>
</li>
<li><pre><code class="python">LANGUAGE_CODE = <span class="string">'zh-hans'</span>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>​	修改时区</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>修改为中国时区</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>没有北京的时间,所以我们选择上海</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>Asia/shanghai</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span><span class="code">```</span>python</span><br><span class="line"><span class="code">    TIME_ZONE = 'Asia/shanghai'</span></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="2-创建管理员"><a href="#2-创建管理员" class="headerlink" title="2).创建管理员"></a>2).创建管理员</h2><ul>
<li><p>创建超级管理员</p>
</li>
<li><pre><code>python manage.py createsuperuser
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 使用管理员帐号可以登入后台管理界面进行操作</span><br><span class="line"></span><br><span class="line"><span class="comment">## 3).注册设定好的模型类</span></span><br><span class="line"></span><br><span class="line">- 在对应文件的amdin文件中注册模型类</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HeroInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">        list_display = [<span class="string">'hname'</span>, <span class="string">'hcomment'</span>, <span class="string">'hbook_id'</span>, <span class="string">'hbook_id'</span>]</span><br><span class="line">    <span class="comment">#在这里可以设定展示出来的字段总览</span></span><br><span class="line">    <span class="comment">#使用admin模块中的site.register进行注册</span></span><br><span class="line">    </span><br><span class="line">    admin.site.register(BookCateInfo,BookCateInfoAdmin)</span><br></pre></td></tr></table></figure></code></pre></li>
<li><p>在后台管理界面中想要将每一项数据库中的数据渲染出来需要在模型类中重写<strong>str</strong>方法</p>
<ul>
<li><pre><code class="python"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>
    <span class="keyword">return</span> self.btitle
<span class="comment">#重写str方法,会使这个表渲染在管理界面时的样式改变</span>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 在数据库模型中设定方法</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">user</span></span>(<span class="keyword">self</span>)<span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br><span class="line">    user.admin_order_field = <span class="string">'username'</span></span><br><span class="line">    <span class="comment">#为创建的方法字段添加排序属性</span></span><br><span class="line">    </span><br><span class="line">    user.short_description = <span class="string">'用户名'</span></span><br><span class="line">    <span class="comment">#为创建的方法附加一个别名用于展示</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>这个方法适用于自定义模型类的方法时使用</p>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="在注册模型类时可以添加的属性"><a href="#在注册模型类时可以添加的属性" class="headerlink" title="在注册模型类时可以添加的属性:"></a>在注册模型类时可以添加的属性:</h3><ul>
<li><p>list_display</p>
<ul>
<li>设定管理页面中娴熟的模型类字段</li>
<li>这个字段可以可以使用模型类中自定义好的方法</li>
</ul>
</li>
<li><p>list_per_page</p>
<ul>
<li>设定管理页面中每页显示的数据量</li>
<li>list_per_page = 10(每页展示十条数据)</li>
</ul>
</li>
<li><p>action_on_bottom</p>
<ul>
<li>设定下方的操作框</li>
<li><img src="/fcg22450.github.io/img/django/1574901352508.png" alt="1574901352508"></li>
<li>在action_on_bottom = True时,将会在展示页的下方再次增加一个操作框</li>
<li>底部操作框在不设定的时候默认为False</li>
</ul>
</li>
<li><p>action_on_top</p>
<ul>
<li>设定上方的操作框</li>
<li><img src="/fcg22450.github.io/img/django/1574901605253.png" alt="1574901605253"></li>
<li>在action_on_top = False时,将会取消展示页上方的操作框,</li>
<li>顶部操作框默认为True</li>
</ul>
</li>
<li><p>list_filter</p>
<ul>
<li><p>在页面右侧添加快速过滤选项,该选项遵循注册模型类时的约束进行</p>
</li>
<li><pre><code class="python">list_filter = [<span class="string">'username'</span>]
<span class="comment">#这个属性的参数是一个列表,可以在其中添加要过滤的字段名</span>
<span class="comment">#过滤器将会列出所有的字段名方便选择</span>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>search_fields</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>在页面顶部添加搜索框</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span><span class="code">```</span>python</span><br><span class="line"><span class="code">    search_fields = ['username']</span></span><br><span class="line"><span class="code">    #这个属性的参数是一个列表,可以在其中添加字段</span></span><br><span class="line"><span class="code">    #在执行搜索时,将会在指定字段的数据中进行匹配</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
<li></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django关闭debug模式之后的静态文件访问</title>
    <url>/2018/03/05/Django/Django%E5%85%B3%E9%97%ADdebug%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%90%8E%E7%9A%84%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="Django关闭debug模式之后的静态文件访问"><a href="#Django关闭debug模式之后的静态文件访问" class="headerlink" title="Django关闭debug模式之后的静态文件访问"></a>Django关闭debug模式之后的静态文件访问</h2><a id="more"></a>
<ol>
<li><pre><code>STATIC_URL = &apos;/static/&apos;
#配置默认的static静态文件夹位置
STATIC_ROOT = &apos;static&apos;
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,&apos;/static/&apos;)
]
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   - ### 设置setting</span><br><span class="line"></span><br><span class="line">2. 设置url</span><br><span class="line"></span><br><span class="line">   1. ```.</span><br><span class="line">      <span class="keyword">from</span> django.views import static ##新增</span><br><span class="line">      <span class="keyword">from</span> django.conf import<span class="built_in"> settings </span>##新增</span><br><span class="line">      <span class="keyword">from</span> django.conf.urls import url ##新增</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">          url(r<span class="string">'^static/(?P&lt;path&gt;.*)$'</span>, static.serve,</span><br><span class="line">            &#123;<span class="string">'document_root'</span>: settings.STATIC_ROOT&#125;, <span class="attribute">name</span>=<span class="string">'static'</span>),</span><br></pre></td></tr></table></figure>

2. 固定公式可以直接使用</code></pre></li>
<li><p>模板中渲染</p>
<ol>
<li><pre><code>&lt;div id=&quot;box1&quot;&gt;&lt;img src=&quot;{% url 'static' path='logo/logo0.png' %}&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</code></pre></li>
<li><p>使用url反转路由</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django反转url</title>
    <url>/2018/03/04/Django/Django%E5%8F%8D%E8%BD%AC%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h2 id="Django反转url"><a href="#Django反转url" class="headerlink" title="Django反转url"></a>Django反转url</h2><a id="more"></a>
<ol>
<li><h3 id="反转url"><a href="#反转url" class="headerlink" title="反转url:"></a>反转url:</h3><ol>
<li>使用模板语言url</li>
</ol>
</li>
</ol>
<ol start="2">
<li><p>在url定义中设定路由函数名</p>
<ul>
<li>path(‘index’,views.index,name=‘index’)</li>
</ul>
</li>
<li><p>关于应用注册的路由的反转使用</p>
<ol>
<li>注册应用路由时添加namespace<ul>
<li>path(‘’,include(‘besate’,namespace=‘basete’))</li>
</ul>
</li>
<li>在应用的urls文件中添加<ul>
<li>app_name = ‘besate’</li>
</ul>
</li>
<li>使用反转<ul>
<li>url ‘besate:index’</li>
</ul>
</li>
</ol>
</li>
<li><p>关于带参数的路由的反转编译</p>
<ol>
<li><pre><code>url ‘index’ 参数数值
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   位置参数</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br></pre></td></tr></table></figure>
url ‘index’ 参数名=参数数值
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="code">      命名参数</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>在视图中进行反转url操作</span><br><span class="line"></span><br><span class="line"><span class="bullet">   1. </span>导入模块</span><br><span class="line"></span><br><span class="line"><span class="bullet">      - </span>原始的方法是从另一个模块中导入,但是3.0中包含了这个模块</span><br><span class="line"></span><br><span class="line"><span class="bullet">      - </span>所以这个模块现在集成到了django.shortcuts中,只需要再导入render的时候顺便就可以一并导入进去了</span><br><span class="line"></span><br><span class="line"><span class="bullet">      - </span><span class="code">```</span>python</span><br><span class="line"><span class="code">        from django.shortcuts import render,reverse,redirect</span></span><br></pre></td></tr></table></figure></code></pre></li>
</ol>
</li>
<li><p>传入参数</p>
<ul>
<li>传入位置参数时<ul>
<li>reverse(‘three:index’,args=(1,2,3))</li>
</ul>
</li>
<li>传入命名参数时<ul>
<li>reverse(‘three:index’,kwargs={‘a’:1,‘b’:2})</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django表单提交</title>
    <url>/2018/03/03/Django/DJango%E8%A1%A8%E5%8D%95%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4/</url>
    <content><![CDATA[<h2 id="Django表单提交"><a href="#Django表单提交" class="headerlink" title="Django表单提交"></a>Django表单提交</h2><a id="more"></a>
<ul>
<li>Django表单数据提交涉及到视图函数中的request参数<ul>
<li>在django中, request对象封装了表单提交的数据</li>
<li><strong><u><em>request.GET</u></em></strong>中存储的是get方法提交的数据</li>
<li><strong><u><em>request.POST</u></em></strong>中存储的是post方法提交的数据</li>
</ul>
</li>
<li>这些方法使用get方法可以获取到对应的值,获取的名称为表单中提交的数据的名字</li>
<li>这些数据将会在提交之后自动储存到request中去</li>
</ul>
<h2 id="request其他方法"><a href="#request其他方法" class="headerlink" title="request其他方法:"></a>request其他方法:</h2><ul>
<li><p>get()</p>
<ul>
<li>获取request对象中储存的数据</li>
</ul>
</li>
<li><p>path</p>
<ul>
<li>获取当前访问的url地址</li>
</ul>
</li>
<li><p>method</p>
<ul>
<li>获取当前的访问方法</li>
</ul>
</li>
<li><p>POST</p>
<ul>
<li>存储所有使用post方法提交过来的数据</li>
</ul>
</li>
<li><p>GET</p>
<ul>
<li>存储所有使用get方法提交过来的数据</li>
</ul>
</li>
<li><p>FILES</p>
<ul>
<li>存储提交过来的文件对象</li>
</ul>
</li>
<li><p>COOKIES</p>
<ul>
<li>存储cookie信息</li>
</ul>
</li>
<li><p>session</p>
<ul>
<li><p>存储session信息</p>
</li>
<li><p>session使用方法</p>
<ol>
<li><p>直接使用字典的键值对获取方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session[<span class="string">'cookie名'</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用get方法获取,可以设置默认值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.get(<span class="string">'cookie名,default="默认值")</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>clear,删除session中保存的数据,但是删除掉的只是值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.clear()</span><br></pre></td></tr></table></figure>
</li>
<li><p>flash,删除整条数据,完全删除所有数据,数据表完全清除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.flash()</span><br></pre></td></tr></table></figure>
</li>
<li><p>del    删除目标数据的所有内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> request.session[<span class="string">'cookie'</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置session过期时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.set_expiry(value)</span><br></pre></td></tr></table></figure>

<ul>
<li>当没有设置过期时间的时候,默认将会在两周之后过期</li>
<li>当value值为0的时候,将会在关闭浏览器的时候过期</li>
<li>当value大于0的时候,将会在value秒之后过期</li>
</ul>
</li>
<li><p>has_key   判断session中有没有对应的cookie</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.has_key(<span class="string">'username'</span>)</span><br></pre></td></tr></table></figure>







</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="ajax方法提交数据"><a href="#ajax方法提交数据" class="headerlink" title="ajax方法提交数据"></a>ajax方法提交数据</h2><h3 id="ajax请求为异步请求"><a href="#ajax请求为异步请求" class="headerlink" title="ajax请求为异步请求"></a>ajax请求为异步请求</h3><p>async : true  </p>
<p>该选项默认为true,即异步请求</p>
<p>​    异步请求时优先执行其他的javascript代码,然后才会执行ajax请求的代码</p>
<p>设定为false即为同步请求</p>
<hr>
<p>使用ajax可以实现局部刷新</p>
<hr>
<ol>
<li><p>使用ajax方法提交数据</p>
<ul>
<li><pre><code class="javascript">$.ajax({
    <span class="string">'url'</span>:<span class="string">'/ajax_handle'</span>,
    <span class="string">'dataType'</span>:<span class="string">'json'</span>,
}).success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{
    alert(data.res)
})
&lt;!--￼<span class="number">7</span>--&gt;</code></pre>
</li>
<li><p>上述为ajax信息处理函数</p>
</li>
<li><pre><code class="python">urlpatterns = [
    <span class="comment">#构建用于处理请求的网页url</span>
    path(<span class="string">'ajax_handle/'</span>,views.ajax_handle),
]
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">   - </span>以上就是基础的ajax请求构建</span><br><span class="line"></span><br><span class="line"><span class="bullet">   - </span>ajax请求禁止返回一个页面,返回的页面将会无法正常显示</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>## 踩坑详情</span><br><span class="line"></span><br><span class="line">   -</span><br></pre></td></tr></table></figure>
APPEND_SLASH=<span class="literal">False</span>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  -<span class="ruby"> 踩坑第一条</span></span><br><span class="line"><span class="ruby">    - 使用ajax进行请求时无法绕过的一个坎,必须在settings配置文件之中配置这条数据才能继续进行下去,让人惊讶的是,教学视频之中居然没有提到这个问题,暂定为django版本过高导致的配置文件差异,从而出现的问题</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">-</span></span><br></pre></td></tr></table></figure>
$.ajax({
    <span class="string">'url'</span>:<span class="string">'/ajax_handle/'</span>,
    <span class="string">'type'</span>:<span class="string">'POST'</span>,
    <span class="string">'dataType'</span>:<span class="string">'json'</span>,
    <span class="string">'data'</span>:{
        username:username,
        password:password
    }
}).success(function (data) {
    <span class="keyword">if</span> (data.res == <span class="number">1</span>){
        location.href = <span class="string">'/admin/'</span>
    }<span class="keyword">else</span>{
        $(<span class="string">"#err"</span>).show().html(<span class="string">'账号名或密码错误'</span>)
    }
})</code></pre>
<ul>
<li><p>踩坑第二条</p>
<ul>
<li>在路由函数方面,django的路由设定比起flask更加严谨<ul>
<li>书写路由重定向时,如果你写的路由为”admin/“这样的格式<ul>
<li>​            那么最终请求的网址实际上为;</li>
<li>​            当前网页网址的路由后面加上你要跳转的路由<ul>
<li>​         即:    127.0.0.1:8000/login/admin</li>
</ul>
</li>
<li>在不添加前置/的情况下,默认为在当前网址的基础上再次进行路由访问</li>
</ul>
</li>
<li>无论是ajax里面的url请求地址,还是JavaScript基础上进行的重定向,都需要注意这一点</li>
<li>反之,如果在路由前面加上/,访问的界面实际上就是在最基础的127.0.0.1:8000/的基础上进行的路由访问</li>
</ul>
</li>
</ul>
</li>
<li><h2 id="这些坑需要谨记"><a href="#这些坑需要谨记" class="headerlink" title="这些坑需要谨记"></a>这些坑需要谨记</h2></li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django编辑页选项</title>
    <url>/2018/03/02/Django/Django%E7%BC%96%E8%BE%91%E9%A1%B5%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="Django编辑页选项"><a href="#Django编辑页选项" class="headerlink" title="Django编辑页选项"></a>Django编辑页选项</h2><a id="more"></a>
<ol>
<li><h3 id="设定编辑页数据显示"><a href="#设定编辑页数据显示" class="headerlink" title="设定编辑页数据显示"></a>设定编辑页数据显示</h3><ul>
<li><p>设定显示顺序     fields</p>
<ul>
<li><p>这个属性的值是一个字典,字典中将编辑页面的字段按照想要的顺序排列好</p>
</li>
<li><pre><code class="python">fields = [<span class="string">'username'</span>,<span class="string">'password'</span>]
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 设定显示顺序,这个设定是分块设定,即将编辑页分为几个块       fieldsets</span><br><span class="line"></span><br><span class="line">  - 这个属性的值是一个元组,元组中包含着元组,并按照里面的元组分成块</span><br><span class="line"></span><br><span class="line">  - ```python</span><br><span class="line">    fieldsets = (</span><br><span class="line">    	('名字',&#123;'fields':['username']&#125;),</span><br><span class="line">        <span class="meta">#设定块时,元组的第一个值是这个块的名称,第二个值是一个字典,键为   fields  ,值为一个列表,其中保存的是要展示在这个块中的字段</span></span><br><span class="line">        ('密码',&#123;'fields':['password']&#125;)</span><br><span class="line">        <span class="meta">#无论如何设定,遵循基本的规则,字典的键都是fields,值都是一个列表</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>设定一类模型编辑时显示字类模型数据</p>
<ul>
<li><p>第一种:</p>
<ul>
<li><pre><code class="python"><span class="class"><span class="keyword">class</span> <span class="title">Power_list_StackedInline</span><span class="params">(admin.StackedInline)</span>:</span>
    model = Basic_information_of_characters
    <span class="comment">#model属性的值为这个表对应的多类表的对象</span>
    extra = <span class="number">3</span>
    <span class="comment">#在显示子类的时候留三个空白的字类方便添加和编辑</span>

<span class="comment">#将这个类在模型类约束中引入</span>
Inlines = [Power_list_StackedInline]
<span class="comment">#inlines属性的值是一个列表</span>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">  - </span>这个类设定的是显示结果是将对应的子类数据划分为一个个的块</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>第二种</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span><span class="code">```</span>python</span><br><span class="line"><span class="code">    class Power_list_TabularInline(admin.TabularInline):</span></span><br><span class="line"><span class="code">    	model = Basic_information_of_characters</span></span><br><span class="line"><span class="code">    	extra = 3</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>从设定方法和使用方法来说,和第一种方法没什么两样,唯一的区别就是继承的对象不一样</p>
</li>
<li><p>这个方法展示出来的子类是以表格形式展示出来的</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>ORM框架</title>
    <url>/2018/03/02/Django/%E5%85%B3%E4%BA%8EORM%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="ORM框架"><a href="#ORM框架" class="headerlink" title="ORM框架"></a>ORM框架</h2><h3 id="orm的全称"><a href="#orm的全称" class="headerlink" title="orm的全称:"></a>orm的全称:</h3><ul>
<li>​    O <ul>
<li>object</li>
<li>对象</li>
<li>在models.py中涉及模型类,</li>
</ul>
</li>
<li>​        R<ul>
<li>Relations</li>
<li>关系,用于关系数据库中的表</li>
</ul>
</li>
<li>​        M<ul>
<li>Mapping</li>
<li>(数据库)映射</li>
<li>将对数据库的操作映射到数据库中去</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django元选项</title>
    <url>/2018/03/01/Django/Django%E5%85%83%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><a id="more"></a>
<h3 id="通过在模型类中定义元类来对创建好的数据库表进行约束-以确保生成的数据表不依赖于应用文件的名字"><a href="#通过在模型类中定义元类来对创建好的数据库表进行约束-以确保生成的数据表不依赖于应用文件的名字" class="headerlink" title="通过在模型类中定义元类来对创建好的数据库表进行约束,以确保生成的数据表不依赖于应用文件的名字"></a>通过在模型类中定义元类来对创建好的数据库表进行约束,以确保生成的数据表不依赖于应用文件的名字</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    btitle = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'bookinfo'</span></span><br></pre></td></tr></table></figure>

<h4 id="定义元类Meta-设定好创建的数据库的名字之后-执行数据库迁移"><a href="#定义元类Meta-设定好创建的数据库的名字之后-执行数据库迁移" class="headerlink" title="定义元类Meta,设定好创建的数据库的名字之后,执行数据库迁移"></a>定义元类Meta,设定好创建的数据库的名字之后,执行数据库迁移</h4><h4 id="产生的数据库名字将不会安装应用名-模型类名的规则进行创建"><a href="#产生的数据库名字将不会安装应用名-模型类名的规则进行创建" class="headerlink" title="产生的数据库名字将不会安装应用名_模型类名的规则进行创建"></a>产生的数据库名字将不会安装应用名_模型类名的规则进行创建</h4><h2 id="模板错误试图"><a href="#模板错误试图" class="headerlink" title="模板错误试图:"></a>模板错误试图:</h2><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式:"></a>调试模式:</h3><ul>
<li><p>​    在网站上线时,应关闭DE_BUG模式,该选项在setting文件中进行配置,默认为true</p>
<p>​        默认选项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = []</span><br></pre></td></tr></table></figure>

<p>​        修改选项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>​    ALLOWED_HOSTS选项设定的是允许访问的IP地址,一般默认设置为*,即允许所有</p>
<ul>
<li>​    错误访问视图<ul>
<li>当出现错误请求或者服务器异常时,我们可以对从异常操作的响应进行,如自定义错误页面</li>
<li>常见的错误有404(页面不存在)、500(服务器错误)</li>
<li>自定义错误访问视图需要在templates模板文件夹下创建错误访问模板,文件名为对应的http状态码,</li>
<li>如: 404.html</li>
<li>错误试图的定义需要关闭debug模式</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于mvc</title>
    <url>/2018/03/01/Django/%E5%85%B3%E4%BA%8Emvc/</url>
    <content><![CDATA[<h2 id="web设计模式"><a href="#web设计模式" class="headerlink" title="==web设计模式=="></a>==web设计模式==</h2><h2 id="—web-mvc—"><a href="#—web-mvc—" class="headerlink" title="—web mvc—"></a>—web mvc—</h2><h4 id="mvc基本概念"><a href="#mvc基本概念" class="headerlink" title="mvc基本概念:"></a>mvc基本概念:</h4><a id="more"></a>
<ol>
<li>​    mvc的产生理念是: ==分工==</li>
<li>​        mvc的核心理念是:  解耦<ol>
<li>解耦的概念并不难理解,将mvc当成一台电脑,如果你的硬盘出了问题,那么你并不需要将整台电脑换掉,只需要找到损坏的硬盘并将其替换更新即可</li>
<li>同理,在mvc类型的框架中,如果代码出现了问题,只需要修正对应部分的代码即可,并不需要将所有的代码推翻重来</li>
<li>在这种情况下,只要所属模块实现了需要的功能,整个框架就是可以运行的</li>
</ol>
</li>
<li>​        mvc的组成概念相当于正常的公司,旗下有多个下属的职能部门,</li>
<li>​        同理,mvc的概念是就是将多个模块集成起来分工合作,将输入,处理输出三个部分的功能交给不同的模块进行.</li>
<li>mvc为简称<ol>
<li>model<ol>
<li>模型,</li>
<li>用于后端与数据库进行交互</li>
</ol>
</li>
<li>view<ol>
<li>视图</li>
<li>用于前端,负责产生html页面</li>
</ol>
</li>
<li>controller<ol>
<li>控制器</li>
<li>接受请求,进行处理,负责model与view进行交互,并返回应答</li>
</ol>
</li>
</ol>
</li>
</ol>
<p><img src="/fcg22450.github.io/img/django/1573521257195.png" alt="1573521257195"></p>
<hr>
<h2 id="—python-MVT—"><a href="#—python-MVT—" class="headerlink" title="—python MVT—"></a>—python MVT—</h2><h4 id="MVT基本概念"><a href="#MVT基本概念" class="headerlink" title="MVT基本概念:"></a>MVT基本概念:</h4><ol>
<li>MVT其实是基于mvc的生产模式,只是在==Django==中因为模块的少许差异简写为MVT</li>
<li>MVT是简写,全程为:         model(模型) —–&gt;   view(视图)  —–&gt;   template(模板)</li>
<li><img src="/fcg22450.github.io/img/django/1573525796015.png" alt="1573525796015"></li>
<li>MVT为简称<ol>
<li>model<ol>
<li>模型,</li>
<li>用于后端与数据库进行交互</li>
</ol>
</li>
<li>views<ol>
<li>相当于mvc中的c,</li>
<li>用于m,t交互,处理信息,并返回应答</li>
<li>控制器</li>
<li>接受请求,进行处理,负责model与template进行交互,并返回应答</li>
</ol>
</li>
<li>template<ol>
<li>相当于mvc中的v,</li>
<li>接受信息,负责产生html页面</li>
</ol>
</li>
</ol>
</li>
</ol>
<hr>
<h2 id="快速开发和DRY原则"><a href="#快速开发和DRY原则" class="headerlink" title="快速开发和DRY原则"></a>快速开发和DRY原则</h2><h3 id="Do-not-repeat-yourself"><a href="#Do-not-repeat-yourself" class="headerlink" title="Do not repeat yourself"></a>Do not repeat yourself</h3><p>不要自己去重复一些工作</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django首次使用</title>
    <url>/2018/02/27/Django/Django%E6%96%87%E4%BB%B6%E5%88%9D%E5%88%9B/</url>
    <content><![CDATA[<h2 id="Django首次使用"><a href="#Django首次使用" class="headerlink" title="Django首次使用"></a>Django首次使用</h2><a id="more"></a>
<p>创建django项目:</p>
<h4 id="django-admin-startproect-项目名"><a href="#django-admin-startproect-项目名" class="headerlink" title="django-admin startproect 项目名"></a>django-admin startproect 项目名</h4><p>创建一个完整的django项目</p>
<h2 id="创建完整的django文件之后会生成一整套的文件-里面包含了django的各种配置"><a href="#创建完整的django文件之后会生成一整套的文件-里面包含了django的各种配置" class="headerlink" title="创建完整的django文件之后会生成一整套的文件,里面包含了django的各种配置:"></a>创建完整的django文件之后会生成一整套的文件,里面包含了django的各种配置:</h2><ol>
<li>‘<strong>init</strong>.py’        声明这是一个python文件</li>
<li>settings.py           整个项目的配置文件</li>
<li>urls.py                  url路由的配置</li>
<li>wsgi.py                web服务器与django交互入口</li>
<li>manage.py          项目管理文件</li>
</ol>
<hr>
<h2 id="此处错误问题"><a href="#此处错误问题" class="headerlink" title="此处错误问题:"></a>此处错误问题:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> version &lt; (<span class="number">1</span>, <span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">    <span class="keyword">raise</span> ImproperlyConfigured(<span class="string">'mysqlclient 1.3.13 or newer is required; you have %s.'</span> % Database.__version__)</span><br></pre></td></tr></table></figure>



<ul>
<li><h4 id="提示版本错误-这一点需要将base-py文件中的报错代码注释掉-使其不会因为自身的mysqlclient版本过高导致报错"><a href="#提示版本错误-这一点需要将base-py文件中的报错代码注释掉-使其不会因为自身的mysqlclient版本过高导致报错" class="headerlink" title="提示版本错误,这一点需要将base.py文件中的报错代码注释掉,使其不会因为自身的mysqlclient版本过高导致报错"></a>提示版本错误,这一点需要将base.py文件中的报错代码注释掉,使其不会因为自身的mysqlclient版本过高导致报错</h4></li>
<li><p>第二处错误为MySQLdb不存在</p>
<ul>
<li><p>解决办法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开项目中的init配置文件,在其中导入以上代码</p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="django开发时每个模块都需要创建一个应用来实现"><a href="#django开发时每个模块都需要创建一个应用来实现" class="headerlink" title="django开发时每个模块都需要创建一个应用来实现:"></a>django开发时每个模块都需要创建一个应用来实现:</h2><ol>
<li><p>创建应用的方法:</p>
<ol>
<li><p>实例图片</p>
<ol>
<li><img src="/fcg22450.github.io/img/django/1573529761495.png" alt="1573529761495"></li>
<li><img src="/fcg22450.github.io/img/django/1573529772029.png" alt="1573529772029"></li>
</ol>
</li>
<li><pre><code class="python"><span class="comment">#进入项目文件</span>
<span class="comment">#打开cmd命令窗口</span>
<span class="comment">#输入指令</span>
python manage.py startapp 要创建的应用名称
<span class="comment">#创建完成之后,将会自动生成一个应用文件夹,文件夹名字为创建时输入的名字,文件夹中包含各种初始化的配置文件</span>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">2. 配置文件详解:</span><br><span class="line"></span><br><span class="line">   1. '__init__.py'		声明这是一个python文件</span><br><span class="line">   2. models.py           与数据库相关的内容</span><br><span class="line">   3. views                   接受请求,进行处理,与models/template进行交互,返回应答</span><br><span class="line">      1. 定义处理函数</span><br><span class="line">      2. 每一个请求都对应着一个处理函数</span><br><span class="line">   4. tests.py                写测试代码的文件</span><br><span class="line">   5. admin.py             网站后台管理相关文件</span><br><span class="line"></span><br><span class="line">3. 启动django服务器服务</span><br><span class="line"></span><br><span class="line">   1. 在setting.py文件中注册模块信息</span><br><span class="line"></span><br><span class="line">   2. ```python</span><br><span class="line">      INSTALLED_APPS = [</span><br><span class="line">          'django.contrib.admin',</span><br><span class="line">          'django.contrib.auth',</span><br><span class="line">          'django.contrib.contenttypes',</span><br><span class="line">          'django.contrib.sessions',</span><br><span class="line">          'django.contrib.messages',</span><br><span class="line">          'django.contrib.staticfiles',</span><br><span class="line">          'First',</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ol>
</li>
</ol>
<ol start="3">
<li><pre><code>python manage.py runserver</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
